This is the testing file for Ollama 3.1 with natural language to SQL. The process goes as follows:
 -
Ratings go as follows:
 - If the queries match, generate the same result, or answer the question accurately, it is perfect
 - If the genreated query is a subset of the gold query, it is good
 - If the query is innacurate, yields an irrelevant result, or causes an error, it is bad
Notes:
 - The gold queries are designed for postgres, so they will be modified to be compatible with the matrixorigin mysql server


-------------------
Total
-------------------
Perfect: 84
Good: 18
Bad: 101
Unkown: 9

-------------------
Academic
-------------------
Perfect- 7
Good- 6
Bad- 10
Unknown- 0

-------------------
Advising
-------------------
Perfect- 10
Good- 6
Bad- 15
Unknown- 1 

-------------------
Atis
-------------------
Perfect- 6
Good- 0
Bad- 23
Unknown- 3

-------------------
Broker
-------------------
Perfect- 2
Good- 0
Bad- 3
Unknown

-------------------
Car Dealership
-------------------
Perfect- 0
Good- 0
Bad- 5
Unknown- 0

-------------------
Derm Treatment
-------------------
Perfect- 1
Good- 1
Bad- 3
Unkown- 0

-------------------
E wallet
-------------------
Perfect- 2
Good- 0
Bad- 2
Unkown- 0

-------------------
Geography
-------------------
Perfect- 9
Good- 4
Bad- 8
Unknown- 2

-------------------
Restaurant
-------------------
Perfect- 18
Good- 1
Bad- 4
Unknown- 0

-------------------
Scholar
-------------------
Perfect- 15
Good- 1
Bad- 8
Unknown- 0


-------------------
Yelp
-------------------
Perfect- 14
Good- 0
Bad- 22
Unknown- 0

------------------
Test #1
DB : academic
------------------
Question : Which authors have written publications in both the domain "Machine Learning" and the domain "Data Science"?
Generated Query: SELECT a.name FROM author a JOIN writes w ON a.aid = w.aid 
    WHERE w.pid IN (SELECT pid FROM common_publications);

Rating : Bad

------------------
Test #2
DB: academic
------------------

Question: What is the total number of citations received by each author?

Generated Query: SELECT a.aid AS aid, COUNT(CASE WHEN c.citing = a.aid THEN 1 END) + COALESCE(c2.cited_count, 0) AS total_citations FROM author a LEFT JOIN (SELECT citing, COUNT(*) as cited_count FROM cite GROUP BY citing) 
c2 ON a.aid = c2.citing LEFT JOIN (SELECT citing, COUNT(*) as cited_count FROM cite WHERE citing IS NOT NULL GROUP BY citing) c3
ON a.aid = c3.citing GROUP BY a.aid;
Generated Result: 
ERROR 20301 (HY000): invalid input: missing FROM-clause entry for table 'c'

Rating: Bad

-------------------
Test #3
DB: Academic
-------------------
Question: What is the total number of publications published in each year?
Generated Query: SELECT YEAR(p.year) AS year, COUNT(*) AS total_publications FROM publication p GROUP BY year;

Result: Bad

-------------------
Test #4
DB: Academic
-------------------
Question: What is the average number of references cited by publications in each domain name?

Generated Query: What is the total number of publications published in each year?
Generated Result:
+------------------+----------------------+
| domain_name      | avg_references_cited |
+------------------+----------------------+
| Sociology        |                    0 |
| Natural Sciences |                    1 |
+------------------+----------------------+

Gold Query: SELECT domain.name, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY domain.name;
SELECT domain.did, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY domain.did;SELECT domain.name, domain.did, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY domain.name, domain.did;

Gold Result: 
+------------------+--------------------+
| name             | average_references |
+------------------+--------------------+
| Sociology        |                  0 |
| Natural Sciences |                  1 |
| Data Science     |                  2 |
| Computer Science |                  3 |
| Machine Learning |                  4 |
+------------------+--------------------+

+------+--------------------+
| did  | average_references |
+------+--------------------+
|    4 |                  0 |
|    2 |                  1 |
|    1 |                  2 |
|    3 |                  3 |
|    5 |                  4 |
+------+--------------------+

+------------------+------+--------------------+
| name             | did  | average_references |
+------------------+------+--------------------+
| Sociology        |    4 |                  0 |
| Natural Sciences |    2 |                  1 |
| Data Science     |    1 |                  2 |
| Computer Science |    3 |                  3 |
| Machine Learning |    5 |                  4 |
+------------------+------+--------------------+

Rating: Good
Reason: Generates a subset of what the gold query

-------------------
Test #5
DB: Academic
-------------------
Question: What is the average number of references cited by publications in each domain name?

Generated Query: SELECT p2.year AS year, AVG(p1.citation_num) AS avg_citations_received
FROM publication p1 INNER JOIN publication p2 ON p1.pid = p2.pid GROUP BY p2.year;

Generated Result:
+------+------------------------+
| year | avg_citations_received |
+------+------------------------+
| 2020 |                      3 |
| 2021 |                      1 |
+------+------------------------+

Gold Query: SELECT publication.title FROM publication ORDER BY publication.citation_num DESC LIMIT 1;
Gold Result:
+------+-------------------+
| year | average_citations |
+------+-------------------+
| 2020 |                 3 |
| 2021 |                 1 |
+------+-------------------+
2 rows in set (0.00 sec)

Rating: Perfect

-------------------
Test #6
DB: Academic
-------------------
Question: What is the title of the publication that has received the highest number of citations?

Generated Query: SELECT title FROM publication WHERE citation_num = (SELECT MAX(citation_num) FROM publication);
Generated Result:
+----------------------------------------------+
| title                                        |
+----------------------------------------------+
| The Effects of Climate Change on Agriculture |
+----------------------------------------------+

Gold Query: SELECT publication.title FROM publication ORDER BY publication.citation_num DESC LIMIT 1;
Gold Result:
+----------------------------------------------+
| title                                        |
+----------------------------------------------+
| The Effects of Climate Change on Agriculture |
+----------------------------------------------+

Rating: Perfect

-------------------
Test #7
DB: Academic
-------------------
Question: What are the top 5 domains with the highest number of authors associated with them?

Generated Query: SELECT d.name, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN domain_author AS da ON a.aid = da.aid
JOIN domain AS d ON da.did = d.did GROUP BY d.name ORDER BY author_count DESC LIMIT 5;
Generated Result:
+------------------+--------------+
| name             | author_count |
+------------------+--------------+
| Computer Science |            3 |
| Machine Learning |            2 |
| Data Science     |            1 |
| Natural Sciences |            1 |
| Sociology        |            1 |
+------------------+--------------+

Gold Query:  SELECT d.name, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN domain_author AS da ON a.aid = da.aid JOIN domain AS d ON da.did = d.did GROUP BY d.name ORDER BY CASE WHEN author_count IS NULL THEN 1 ELSE 0 END DESC, author_count DESC LIMIT 5;SELECT d.did, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN domain_author AS da ON a.aid = da.aid JOIN domain AS d ON da.did = d.did GROUP BY d.did ORDER BY CASE WHEN author_count IS NULL THEN 1 ELSE 0 END DESC, author_count DESC LIMIT 5;SELECT d.name, d.did, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN domain_author AS da ON a.aid = da.aid JOIN domain AS d ON da.did = d.did GROUP BY d.name, d.did ORDER BY CASE WHEN author_count IS NULL THEN 1 ELSE 0 END DESC, author_count DESC LIMIT 5;
Gold Result:
+------------------+------+--------------+
| name             | did  | author_count |
+------------------+------+--------------+
| Computer Science |    3 |            3 |
| Machine Learning |    5 |            2 |
| Data Science     |    1 |            1 |
| Natural Sciences |    2 |            1 |
| Sociology        |    4 |            1 |
+------------------+------+--------------+

Result: Perfect

-------------------
Test #8
DB: Academic
-------------------
Question: What are the top 3 titles of the publications that have the highest number of references cited, ordered by the number of references cited in descending order?

Generated Query: SELECT p.title FROM publication AS p ORDER BY p.citation_num DESC LIMIT 3;
Generated Response: 
+---------------------------------------------------------+
| title                                                   |
+---------------------------------------------------------+
| The Effects of Climate Change on Agriculture            |
| A Study on the Effects of Social Media on Mental Health |
| Data Mining Techniques                                  |
+---------------------------------------------------------+

Gold Query: 
Gold Result:
+---------------------------+
| title                     |
+---------------------------+
| Attention is all you need |
| Optimizing GPU Throughput |
| Data Mining Techniques    |
+---------------------------+

Rating: Good

-------------------
Test #9
DB: Academic
-------------------
Question: What are the top 3 publications with the highest number of citations?

Generated Query: SELECT pub.title, COUNT(wr.aid) AS citation_count FROM
writes wr JOIN publication pub ON wr.pid = pub.pid GROUP BY pub.title ORDER BY
citation_count DESC LIMIT 3;
Generated Result:
+---------------------------------------------------------+----------------+
| title                                                   | citation_count |
+---------------------------------------------------------+----------------+
| Attention is all you need                               |              2 |
| A Study on the Effects of Social Media on Mental Health |              1 |
| Data Mining Techniques                                  |              1 |
+---------------------------------------------------------+----------------+

Gold Query: SELECT publication.title, publication.citation_num FROM publication ORDER BY CASE WHEN publication.citation_num IS NULL THEN 1 ELSE 0 END DESC, publication.citation_num DESC LIMIT 3;SELECT publication.pid, publication.citation_num FROM publication ORDER BY CASE WHEN publication.citation_num IS NULL THEN 1 ELSE 0 END DESC, publication.citation_num DESC LIMIT 3;SELECT publication.title, publication.pid, publication.citation_num FROM publication ORDER BY CASE WHEN publication.citation_num IS NULL THEN 1 ELSE 0 END DESC, publication.citation_num DESC LIMIT 3;

+---------------------------------------------------------+------+--------------+
| title                                                   | pid  | citation_num |
+---------------------------------------------------------+------+--------------+
| The Effects of Climate Change on Agriculture            |    1 |            4 |
| A Study on the Effects of Social Media on Mental Health |    2 |            2 |
| Data Mining Techniques                                  |    3 |            2 |
+---------------------------------------------------------+------+--------------+

Result: Bad

-------------------
Test #10
DB: Academic
-------------------
Question: What are the titles of all publications ordered alphabetically?

Generated Query: SELECT pub.title AS title FROM publication pub;
Generated Result:
+---------------------------------------------------------+
| title                                                   |
+---------------------------------------------------------+
| The Effects of Climate Change on Agriculture            |
| A Study on the Effects of Social Media on Mental Health |
| Data Mining Techniques                                  |
| Optimizing GPU Throughput                               |
| Attention is all you need                               |
+---------------------------------------------------------+

Gold Query: SELECT DISTINCT publication.title FROM publication ORDER BY publication.title ASC;
Gold Result: 
+---------------------------------------------------------+
| title                                                   |
+---------------------------------------------------------+
| A Study on the Effects of Social Media on Mental Health |
| Attention is all you need                               |
| Data Mining Techniques                                  |
| Optimizing GPU Throughput                               |
| The Effects of Climate Change on Agriculture            |
+---------------------------------------------------------+

Rating: Bad

-------------------
Test #11
DB: Academic
-------------------
Question: What is the ratio of publications to authors in the database?

Generated Query: SELECT COUNT(pub.pid) AS publication_count, COUNT(wr.aid) AS author_count, CAST(COUNT(pub.pid) AS FLOAT) 
/ COUNT(wr.aid) AS publication_to_author_ratio FROM publication pub JOIN writes wr ON pub.pid = wr.pid;
Generated Result:
+-------------------+--------------+-----------------------------+
| publication_count | author_count | publication_to_author_ratio |
+-------------------+--------------+-----------------------------+
|                 6 |            6 |                           1 |
+-------------------+--------------+-----------------------------+

Gold Query: SELECT CAST(COUNT(DISTINCT publication.pid) AS DOUBLE) / NULLIF(COUNT(DISTINCT author.aid), 0) AS publication_to_author_ratio FROM publication, author;
Gold Result: Does not work

Rating: Unknown

-------------------
Test #12
DB: Academic
-------------------
Question: What is the ratio of publications presented in conferences to publications published in journals?

Generated Query: SELECT COUNT(DISTINCT pub.cid) AS conference_publications, COUNT(DISTINCT pub.jid) AS journal_publications,
CAST(COUNT(DISTINCT pub.cid) AS FLOAT) / NULLIF(COUNT(DISTINCT pub.jid), 0) AS ratio FROM publication pub;
Generated Result: ERROR 20203 (HY000): invalid argument cast to int, bad value

-------------------
Test #13
DB: Academic
-------------------
Question: What is the ratio of the total number of publications to the total number of keywords within each domain ID? Show all domain IDs.

Generated Query: SELECT dp.did AS domain_id, COUNT(DISTINCT pub.pid) AS total_publications, COUNT(DISTINCT pk.kid) AS total_keywords, CAST(COUNT(DISTINCT pub.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT pk.kid), 0) AS ratio FROM
domain_publication dp JOIN publication pub ON dp.pid = pub.pid JOIN publication_keyword pk ON pub.pid = pk.pid
GROUP BY dp.did;
Generated Result: invalid argument cast to int, bad value

-------------------
Test #14
DB: Academic
-------------------
Question: How does the ratio of publications to journals change over the years? Return the annual numbers of publications and journals as well.

Generated Query: SELECT P.year, COUNT(P.pid) AS publication_count, COUNT(J.jid) AS journal_count,
CAST(COUNT(P.pid) AS FLOAT) / COUNT(J.jid) AS ratio_publication_to_journal FROM
publication P JOIN journal J ON 1 = 1 GROUP BY P.year;
Generated Result: 
+------+-------------------+---------------+------------------------------+
| year | publication_count | journal_count | ratio_publication_to_journal |
+------+-------------------+---------------+------------------------------+
| 2020 |                 8 |             8 |                            1 |
| 2021 |                12 |            12 |                            1 |
+------+-------------------+---------------+------------------------------+

Gold Query: SELECT publication.year, COUNT(DISTINCT publication.pid) AS num_publications, COUNT(DISTINCT publication.jid) AS num_journals, CAST(COUNT(DISTINCT publication.pid) AS DOUBLE) / NULLIF(COUNT(DISTINCT publication.jid), 0) AS ratio FROM publication GROUP BY publication.year ORDER BY CASE WHEN publication.year IS NULL THEN 1 ELSE 0 END, publication.year;

Note: Gold Query does not work so this queries accuracy is Unknown

-------------------
Test #15
DB: Academic
-------------------
Question: How does the ratio of authors to organizations differ by continent?

Generated Query: SELECT O.continent, COUNT(A.aid) AS author_count, COUNT(O.oid) AS organization_count,
CAST(COUNT(A.aid) AS FLOAT) / COUNT(O.oid) AS ratio_author_to_organization FROM author A JOIN
writes W ON A.aid = W.aid JOIN publication P ON W.pid = P.pid JOIN
organization O ON 1 = 1 GROUP BY O.continent;
Generated Result: 
+---------------+--------------+--------------------+------------------------------+
| continent     | author_count | organization_count | ratio_author_to_organization |
+---------------+--------------+--------------------+------------------------------+
| Asia          |            6 |                  6 |                            1 |
| North America |           12 |                 12 |                            1 |
| Europe        |           12 |                 12 |                            1 |
+---------------+--------------+--------------------+------------------------------+

Gold Query: 
SELECT organization.continent, CAST(COUNT(DISTINCT author.aid) AS DOUBLE) / NULLIF(COUNT(DISTINCT organization.oid), 0) AS ratio FROM organization LEFT JOIN author ON author.oid = organization.oid GROUP BY organization.continent ORDER BY ratio DESC;WITH author_counts AS (SELECT o.continent, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN organization AS o ON a.oid = o.oid GROUP BY o.continent), organization_counts AS (SELECT o.continent, COUNT(DISTINCT o.oid) AS organization_count FROM organization AS o GROUP BY o.continent) SELECT ac.continent, CAST(ac.author_count AS FLOAT) / NULLIF(oc.organization_count, 0) AS author_to_organization_ratio FROM author_counts AS ac JOIN organization_counts AS oc ON ac.continent = oc.continent ORDER BY author_to_organization_ratio DESC;
Gold Result:
ERROR

Note: Gold Query does not work so we can't rate the generated query

-------------------
Test #16
DB: Academic
-------------------
Question: Which author had the most publications in the year 2021 and how many publications did he/she have that year?

Generated Query: SELECT A.name AS author_name, COUNT(P.pid) AS publication_count FROM writes W
JOIN author A ON W.aid = A.aid JOIN publication P ON W.pid = P.pid WHERE P.year = 2021 GROUP BY
A.name ORDER BY publication_count DESC LIMIT 1;
Generated Result:
+----------------+-------------------+
| author_name    | publication_count |
+----------------+-------------------+
| Ashish Vaswani |                 3 |
+----------------+-------------------+

Gold Query: SELECT author.name, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY author.name ORDER BY publication_count DESC LIMIT 1;SELECT author.aid, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY author.aid ORDER BY publication_count DESC LIMIT 1;SELECT author.name, author.aid, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY author.name, author.aid ORDER BY publication_count DESC LIMIT 1;
Gold Result:
+----------------+------+-------------------+
| name           | aid  | publication_count |
+----------------+------+-------------------+
| Ashish Vaswani |    2 |                 3 |
+----------------+------+-------------------+

Result: Perfect

-------------------
Test #17
DB: Academic
-------------------
Question: What is the total number of publications presented in each conference?

Generated Query: SELECT C.name AS conference_name, COUNT(P.pid) AS publication_count FROM publication P
JOIN domain_publication DP ON P.pid = DP.pid JOIN domain_conference DFC ON DP.did = DFC.did JOIN
conference C ON DFC.cid = C.cid GROUP BY C.name;
Genearted Results:
+-----------------+-------------------+
| conference_name | publication_count |
+-----------------+-------------------+
| AAAS            |                 1 |
| ISA             |                 1 |
| ICML            |                 1 |
+-----------------+-------------------+

Gold Query: SELECT conference.name, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY conference.name ORDER BY CASE WHEN total_publications IS NULL THEN 1 ELSE 0 END DESC, total_publications DESC;SELECT conference.cid, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY conference.cid ORDER BY CASE WHEN total_publications IS NULL THEN 1 ELSE 0 END DESC, total_publications DESC;SELECT conference.name, conference.cid, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY conference.name, conference.cid ORDER BY CASE WHEN total_publications IS NULL THEN 1 ELSE 0 END DESC, total_publications DESC;
Gold Result:
+------+------+--------------------+
| name | cid  | total_publications |
+------+------+--------------------+
| ICML |    3 |                  3 |
| ISA  |    1 |                  1 |
| AAAS |    2 |                  1 |
+------+------+--------------------+

Rating: Good, generated is somewhat simaliar to the gold results

-------------------
Test #18
DB: Academic
-------------------
Question: What is the total number of publications in each journal, ordered by the number of publications in descending order?

Generated Query: SELECT J.name AS journal_name, COUNT(P.pid) AS publication_count FROM publication P JOIN domain_publication DP ON P.pid = DP.pid JOIN domain_journal DJ ON DP.did = DJ.did JOIN journal J ON DJ.jid = J.jid
GROUP BY J.name ORDER BY publication_count DESC;
Generated Result: 
+--------------------------------------+-------------------+
| journal_name                         | publication_count |
+--------------------------------------+-------------------+
| Science                              |                 1 |
| Nature                               |                 1 |
| Journal of Machine Learning Research |                 1 |
+--------------------------------------+-------------------+

Gold Query: SELECT journal.name, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid = journal.jid GROUP BY journal.name ORDER BY total_publications DESC;SELECT journal.jid, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid = journal.jid GROUP BY journal.jid ORDER BY total_publications DESC;SELECT journal.name, journal.jid, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid = journal.jid GROUP BY journal.name, journal.jid ORDER BY total_publications DESC;SELECT journal.name, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid = publication.jid GROUP BY journal.name ORDER BY total_publications DESC;SELECT journal.jid, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid = publication.jid GROUP BY journal.jid ORDER BY total_publications DESC;SELECT journal.name, journal.jid, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid = publication.jid GROUP BY journal.name, journal.jid ORDER BY total_publications DESC;

Gold Result:
+---------------------------------------------+--------------------+
| name                                        | total_publications |
+---------------------------------------------+--------------------+
| Nature                                      |                  3 |
| Journal of Artificial Intelligence Research |                  1 |
| Journal of Machine Learning Research        |                  1 |
+---------------------------------------------+--------------------+

-------------------
Test #19
DB: Academic
-------------------
Question: How many publications were presented at each conference, ordered by the number of publications in descending order? Give the names of the conferences and their corresponding number of publications.

Generated Query: SELECT C.name AS conference_name, COUNT(P.pid) AS publication_count FROM publication P
JOIN domain_publication DP ON P.pid = DP.pid JOIN domain_conference DC ON DP.did = DC.did JOIN
conference C ON DC.cid = C.cid GROUP BY C.name ORDER BY publication_count DESC;
Generated Result:
+-----------------+-------------------+
| conference_name | publication_count |
+-----------------+-------------------+
| AAAS            |                 1 |
| ISA             |                 1 |
| ICML            |                 1 |
+-----------------+-------------------+

Gold Query: SELECT conference.name, COUNT(publication.pid) AS num_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY conference.name, conference.cid ORDER BY num_publications DESC;
Gold Result:
+------+------------------+
| name | num_publications |
+------+------------------+
| ICML |                3 |
| ISA  |                1 |
| AAAS |                1 |
+------+------------------+

Rating: Good

-------------------
Test #20
DB: Academic
-------------------
--Break down this problem into step--
Question: How many publications were published in journals whose names start with the letter "J"?

Generated Query: SELECT J.name AS journal_name, COUNT(P.pid) AS publication_count FROM publication P JOIN domain_publication DP ON P.pid = DP.pid JOIN domain_journal DJ ON DP.did = DJ.did JOIN journal J ON DJ.jid = J.jid WHERE J.name LIKE 'J%'
GROUP BY J.name ORDER BY publication_count DESC;
Generated Result:
+--------------------------------------+-------------------+
| journal_name                         | publication_count |
+--------------------------------------+-------------------+
| Journal of Machine Learning Research |                 1 |
+--------------------------------------+-------------------+

Gold Query: SELECT COUNT(DISTINCT publication.pid) FROM publication JOIN journal ON publication.jid = journal.jid WHERE LOWER(journal.name) LIKE LOWER('J%');
Gold Result:
+---------------------------------+
| count(distinct publication.pid) |
+---------------------------------+
|                               2 |
+---------------------------------+

Result: Bad

-------------------
Test #21
DB: Academic
-------------------
Question: Which organizations have authors who have written publications in the domain "Machine Learning"?

Generated Query: SELECT O.name AS organization_name, A.name AS author_name FROM publication P JOIN writes W ON P.pid = W.pid
JOIN domain_publication DP ON W.pid = DP.pid JOIN domain D ON DP.did = D.did JOIN domain_author DA ON D.did = DA.did
JOIN author A ON DA.aid = A.aid JOIN organization O ON A.oid = O.oid WHERE D.name = 'Machine Learning' GROUP BY O.name, A.name;

Generated Result:
+-------------------+----------------+
| organization_name | author_name    |
+-------------------+----------------+
| Organization 3    | Ashish Vaswani |
| Organization 3    | Noam Shazeer   |
+-------------------+----------------+

Gold Query:
SELECT DISTINCT organization.name FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';SELECT DISTINCT organization.oid FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';SELECT DISTINCT organization.name, organization.oid FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';
Gold Result:
+----------------+
| name           |
+----------------+
| Organization 3 |
+----------------+

Result: Perfect

-------------------
Test #22
DB: Academic
-------------------
Question: Which authors belong to the same domain as Martin?

Generated Query: SELECT A.name AS author_name, DA.did AS domain_id FROM author A JOIN writes W ON A.aid = W.aid JOIN
publication P ON W.pid = P.pid JOIN domain_publication DP ON P.pid = DP.pid JOIN domain_author DA ON DP.did = DA.did
WHERE A.name ILIKE 'Martin%' GROUP BY A.name, DA.did;
Generated Result:
Empty set

Gold Query: SELECT DISTINCT a2.name FROM author AS a1 JOIN domain_author AS da1 ON a1.aid = da1.aid JOIN domain_author AS da2 ON da1.did = da2.did JOIN author AS a2 ON da2.aid = a2.aid WHERE LOWER(LOWER(a1.name)) LIKE LOWER('%martin%');SELECT DISTINCT a2.aid FROM author AS a1 JOIN domain_author AS da1 ON a1.aid = da1.aid JOIN domain_author AS da2 ON da1.did = da2.did JOIN author AS a2 ON da2.aid = a2.aid WHERE LOWER(LOWER(a1.name)) LIKE LOWER('%martin%');SELECT DISTINCT a2.name, a2.aid FROM author AS a1 JOIN domain_author AS da1 ON a1.aid = da1.aid JOIN domain_author AS da2 ON da1.did = da2.did JOIN author AS a2 ON da2.aid = a2.aid WHERE LOWER(LOWER(a1.name)) LIKE LOWER('%martin%');
Gold Result:
+----------------+------+
| name           | aid  |
+----------------+------+
| Ashish Vaswani |    2 |
| Noam Shazeer   |    3 |
| Martin Odersky |    4 |
+----------------+------+

Result: Bad

-------------------
Test #23
DB: Academic
-------------------
Question: Which authors are not part of any organization?

Generated Query: SELECT A.name AS author_name FROM author A WHERE A.oid IS NULL;
Generated Result: 
+-------------+
| author_name |
+-------------+
| Kempinski   |
+-------------+

Gold Query: SELECT DISTINCT name FROM author WHERE oid IS NULL;SELECT DISTINCT aid FROM author WHERE oid IS NULL;SELECT DISTINCT name, aid FROM author WHERE oid IS NULL;
Gold Result:
+-----------+
| name      |
+-----------+
| Kempinski |
+-----------+

Result: Perfect

-------------------
Test #24
DB: Academic
-------------------
Question: What are the publications written by authors from the 'Sociology' domain and presented at conferences in the year 2020?

Generated Query: SELECT DISTINCT p.pid, p.title, p.year, d.name AS domain_name, c.name AS conference_name FROM publication p JOIN
writes w ON p.pid = w.pid JOIN author a ON w.aid = a.aid JOIN domain_author da ON a.aid = da.aid JOIN domain d ON da.did = d.did
JOIN domain_conference dc ON d.did = dc.did JOIN conference c ON dc.cid = c.cid WHERE d.name ILIKE '%Sociology%' AND p.year = 2020;
Generated Result: 
+------+---------------------------------------------------------+------+-------------+-----------------+
| pid  | title                                                   | year | domain_name | conference_name |
+------+---------------------------------------------------------+------+-------------+-----------------+
|    1 | The Effects of Climate Change on Agriculture            | 2020 | Sociology   | AAAS            |
|    2 | A Study on the Effects of Social Media on Mental Health | 2020 | Sociology   | AAAS            |
+------+---------------------------------------------------------+------+-------------+-----------------+

Gold Query: SELECT DISTINCT publication.title FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE LOWER(domain.name) LIKE LOWER('%Sociology%') AND publication.year = 2020 AND publication.cid = domain_conference.cid;SELECT DISTINCT publication.pid FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE LOWER(domain.name) LIKE LOWER('%Sociology%') AND publication.year = 2020 AND publication.cid = domain_conference.cid;SELECT DISTINCT publication.title, publication.pid FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE LOWER(domain.name) LIKE LOWER('%Sociology%') AND publication.year = 2020 AND publication.cid = domain_conference.cid;
Gold Result:
+---------------------------------------------------------+
| title                                                   |
+---------------------------------------------------------+
| A Study on the Effects of Social Media on Mental Health |
+---------------------------------------------------------+

+---------------------------------------------------------+------+
| title                                                   | pid  |
+---------------------------------------------------------+------+
| A Study on the Effects of Social Media on Mental Health |    2 |
+---------------------------------------------------------+------+

Rating: Perfect

-------------------
Test #25
DB: Academic
-------------------
Question: What are the names of the authors who have written publications in the domain "Computer Science"?

Generated Query: SELECT a.name AS author_name FROM author a JOIN domain_author da ON a.aid = da.aid
JOIN domain d ON da.did = d.did WHERE d.name ILIKE '%Computer Science%';
Generated Result: 
+----------------+
| author_name    |
+----------------+
| Ashish Vaswani |
| Noam Shazeer   |
| Martin Odersky |
+----------------+

Gold Query: SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE LOWER(domain.name) LIKE LOWER('%computer%science%');
Gold Result: 
+----------------+
| name           |
+----------------+
| Ashish Vaswani |
| Noam Shazeer   |
+----------------+

Result: Good

-------------------
Test #26
DB: Advising
-------------------
Question: What month were most students admitted? Return the month as a date

Generated Query: SELECT DATE_FORMAT(admit_term, '%Y-%m') AS admit_month, COUNT(*) as num_admissions FROM
student GROUP BY admit_month ORDER BY num_admissions DESC LIMIT 1;
Generated Result: 
+-------------+----------------+
| admit_month | num_admissions |
+-------------+----------------+
| 2018-01     |              2 |
+-------------+----------------+

Gold Query: SELECT DATE_ADD('2000-01-01 00:00:00', INTERVAL TIMESTAMPDIFF(MONTH, '2000-01-01 00:00:00', s.admit_term) MONTH) AS month, COUNT(*) AS total_students FROM student AS s GROUP BY month ORDER BY CASE WHEN total_students IS NULL THEN 1 ELSE 0 END DESC, total_students DESC LIMIT 1;
Gold Result:
+----------------------------+----------------+
| month                      | total_students |
+----------------------------+----------------+
| 2018-01-01 00:00:00.000000 |              2 |
+----------------------------+----------------+

Rating: Perfect

-------------------
Test #27
DB: Advising
-------------------
Question: What's the average predicted time to graduation since admission in no. of days?

Generated Query: SELECT AVG(TIMESTAMPDIFF(DAY, s.admit_term, s.predicted_graduation_semester)) AS avg_time_difference
FROM student s;
Generated Result:
+---------------------+
| avg_time_difference |
+---------------------+
|                1460 |
+---------------------+

Gold Query: SELECT AVG(predicted_graduation_semester - admit_term) AS average_predicted_time_to_graduation FROM student;
Gold Result:
+--------------------------------------+
| average_predicted_time_to_graduation |
+--------------------------------------+
|                                 1460 |
+--------------------------------------+

Rating: Perfect

-------------------
Test #28
DB: Advising
-------------------
Question: How many students were predicted to graduate in the last 10 years?

Generated Query: SELECT COUNT(*) FROM student s WHERE TIMESTAMPDIFF(YEAR, s.admit_term, s.predicted_graduation_semester) <= 10;
Generated Result:
+----------+
| count(*) |
+----------+
|        5 |
+----------+

Gold Query: SELECT COUNT(*) AS num_students_graduated FROM student WHERE predicted_graduation_semester >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR);
Gold Result: 
+------------------------+
| num_students_graduated |
+------------------------+
|                      4 |
+------------------------+

Rating: Bad

-------------------
Test #29
DB: Advising
-------------------
Question: How long has it been in days since the last admitted student? Give the answer as an integer.

Generated Query: SELECT TIMESTAMPDIFF(DAY, MAX(s.admit_term), NOW()) AS time_difference
FROM student s;
Generated Result:
+-----------------+
| time_difference |
+-----------------+
|            2047 |
+-----------------+

Gold Query: SELECT CAST(DATEDIFF(CURRENT_DATE, MAX(admit_term)) AS SIGNED) AS duration_since_last_admitted_student FROM student;
Gold Result:
+--------------------------------------+
| duration_since_last_admitted_student |
+--------------------------------------+
|                                 2047 |
+--------------------------------------+

Rating: Perfect

-------------------
Test #30
DB: Advising
-------------------
Question: Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday

Genearted Query: SELECT DISTINCT co.course_id FROM course_offering co JOIN semester s ON co.semester = s.semester_id
WHERE s.semester IN ('Fall Semester', 'Spring Semester') AND co.end_time < '13:00:00';
Generated Result:
Empty set

Rating: Bad

-------------------
Test #31
DB: Advising
-------------------
Question: What is the total number of students who found the instructor to be hilarious per course id?

Generated Query: SELECT COUNT(DISTINCT sr.student_id) AS total_students, ct.course_id
FROM student_record sr JOIN offering_instructor oi ON sr.offering_id = oi.offering_id JOIN instructor i ON oi.instructor_id = i.instructor_id JOIN course_offering co ON sr.offering_id = co.offering_id JOIN course_tags_count ct ON co.course_id = ct.course_id
WHERE ct.hilarious = 1;
Generated Result: ERROR 1149 (HY000): SQL syntax error: column "ct.course_id" must appear in the GROUP BY clause or be used in an aggregate function

Rating: Bad

-------------------
Test #32
DB: Advising
-------------------
Question: What is the average clarity score for each instructor who taught a course?

Generated Query: SELECT i.name AS instructor_name, AVG(c.clarity_score) AS average_clarity_score FROM course_offering co
JOIN offering_instructor oi ON co.offering_id = oi.offering_id JOIN instructor i ON oi.instructor_id = i.instructor_id
JOIN course c ON i.instructor_id = c.course_id GROUP BY i.name;
Generated Result: 
+-----------------+-----------------------+
| instructor_name | average_clarity_score |
+-----------------+-----------------------+
| John Smith      |                     5 |
| Jane Doe        |                     4 |
| Gilbert Strang  |                     4 |
| Brendan Burns   |                     2 |
+-----------------+-----------------------+

Gold Query: 
+----------------+----------------------+
| name           | avg(c.clarity_score) |
+----------------+----------------------+
| John Smith     |   3.6666666666666665 |
| Jane Doe       |                  4.5 |
| Gilbert Strang |                    4 |
| Brendan Burns  |                    2 |
+----------------+----------------------+

Rating: Good

-------------------
Test #33
DB: Advising
-------------------
Question: How many course offerings have a final exam and how many do not?

Generated Query: SELECT COUNT(CASE WHEN has_final_exam = 1 THEN offering_id END) AS "With Final Exam",
COUNT(CASE WHEN has_final_exam = 0 THEN offering_id END) AS "Without Final Exam" FROM course_offering;
Generated Result: 
+-----------------+--------------------+
| With Final Exam | Without Final Exam |
+-----------------+--------------------+
|               6 |                  2 |
+-----------------+--------------------+

Gold Query: SELECT course_offering.has_final_exam, COUNT(offering_id) AS num_courses FROM course_offering GROUP BY course_offering.has_final_exam;SELECT COUNT(CASE WHEN co.has_final_exam THEN 1 END) AS num_with_final_exam, COUNT(CASE WHEN NOT co.has_final_exam THEN 1 END) AS num_without_final_exam FROM course_offering AS co;
Gold Result:
+---------------------+------------------------+
| num_with_final_exam | num_without_final_exam |
+---------------------+------------------------+
|                   6 |                      2 |
+---------------------+------------------------+

Rating: Perfect

-------------------
Test #34
DB: Advising
-------------------
Question: How many courses does each department offer?

Generated Query: SELECT department, COUNT(*) AS num_courses FROM course GROUP BY department;
Generated Result: 
+------------------+-------------+
| department       | num_courses |
+------------------+-------------+
| Computer Science |           2 |
| Mathematics      |           1 |
| Physics          |           1 |
+------------------+-------------+

Gold Query: SELECT course.department, COUNT(DISTINCT course.course_id) AS num_courses FROM course GROUP BY course.department ORDER BY num_courses DESC;
Gold Result:
+------------------+-------------+
| department       | num_courses |
+------------------+-------------+
| Computer Science |           2 |
| Mathematics      |           1 |
| Physics          |           1 |
+------------------+-------------+

Rating: Perfect

-------------------
Test #35
DB: Advising
-------------------
Question: How many courses are offered for each semester id?

Generated Query: SELECT co.semester, COUNT(*) AS num_courses FROM course_offering co JOIN course c ON co.course_id = c.course_id
GROUP BY co.semester;
Generated Result:
+----------+-------------+
| semester | num_courses |
+----------+-------------+
|        1 |           2 |
|        2 |           2 |
|        3 |           2 |
|        4 |           2 |
+----------+-------------+

Gold Query: SELECT course.name, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;
Gold Result:
+-------------------+--------------+
| name              | num_enrolled |
+-------------------+--------------+
| Advanced Calculus |            5 |
+-------------------+--------------+
+-----------+--------------+
| course_id | num_enrolled |
+-----------+--------------+
|         2 |            5 |
+-----------+--------------+
+---------+--------------+
| number  | num_enrolled |
+---------+--------------+
| MATH201 |            5 |
+---------+--------------+
+-------------------+-----------+--------------+
| name              | course_id | num_enrolled |
+-------------------+-----------+--------------+
| Advanced Calculus |         2 |            5 |
+-------------------+-----------+--------------+

Rating: Bad

-------------------
Test #36
DB: Advising
-------------------
Question: Which course has the highest number of enrolled students, and what is the enrollment number?

Generated Query: SELECT c.name AS course_name, c.num_enrolled AS enrollment_number FROM course c
ORDER BY num_enrolled DESC LIMIT 1;
Generated Result: 
+-------------------+-------------------+
| course_name       | enrollment_number |
+-------------------+-------------------+
| Advanced Calculus |                 5 |
+-------------------+-------------------+

Gold Query: SELECT course.name, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;
Gold Result:
+-------------------+-----------+---------+--------------+
| name              | course_id | number  | num_enrolled |
+-------------------+-----------+---------+--------------+
| Advanced Calculus |         2 | MATH201 |            5 |
+-------------------+-----------+---------+--------------+

Rating: Perfect

-------------------
Test #37
DB: Advising
-------------------
Question: What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?

Generated Query: SELECT c.course_id AS course_id, SUM(sr.count) AS total_participants FROM student_record sr
JOIN course c ON sr.course_id = c.course_id WHERE sr.how = 'active' GROUP BY c.course_id ORDER BY total_participants DESC;
Generated Result: 
ERROR 20301 (HY000): invalid input: column 'sr.count' does not exist

Rating: Bad

-------------------
Test #38
DB: Advising
-------------------
Question: What is the total number of students enrolled in each course, ordered from highest to lowest?

Generated Query: SELECT COALESCE(COUNT(DISTINCT sr.student_id), 0) AS total_students, co.name FROM student_record sr
JOIN course_offering co ON sr.offering_id = co.offering_id GROUP BY co.name ORDER BY total_students DESC;
Generated Result: 
ERROR 20301 (HY000): invalid input: column 'co.name' does not exist

Rating: Bad

-------------------
Test #39
DB: Advising
-------------------
Question: What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.

Generated Query: SELECT s.student_id, s.total_credit AS total_credits FROM student s ORDER BY s.total_credits DESC;
Generated Result: 
ERROR 20301 (HY000): invalid input: column 's.total_credits' does not exist

Rating: Bad

-------------------
Test #40
DB: Advising
-------------------
Question: What is the name of the instructor who has taught the most courses, and how many courses have they taught?

Generated Query: SELECT i.name, COUNT(DISTINCT o.offering_id) AS num_courses_teaching FROM instructor i JOIN offering_instructor oi ON i.instructor_id = oi.instructor_id JOIN course_offering o ON oi.offering_id = o.offering_id GROUP BY i.name ORDER BY num_courses_teaching DESC LIMIT 1;
Generated Result: 
+------------+----------------------+
| name       | num_courses_teaching |
+------------+----------------------+
| John Smith |                    6 |
+------------+----------------------+

Gold Query: SELECT instructor.name, COUNT(offering_instructor.offering_id) AS num_courses FROM offering_instructor JOIN instructor ON offering_instructor.instructor_id = instructor.instructor_id GROUP BY instructor.name ORDER BY CASE WHEN num_courses IS NULL THEN 1 ELSE 0 END DESC, num_courses DESC LIMIT 1;
Gold Result:
+------------+-------------+
| name       | num_courses |
+------------+-------------+
| John Smith |          12 |
+------------+-------------+

Rating: Bad

-------------------
Test #41
DB: Advising
-------------------
Question: What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?

Generated Query: SELECT COUNT(DISTINCT CO.course_id) AS total_courses, SUM(CASE WHEN CO.has_exams = 1 THEN 1 ELSE 0 END) * SR.num_students AS students_with_exams, (SUM(CASE WHEN CO.has_exams = 1 THEN 1 ELSE 0 END) * SR.num_students) /
(COUNT(DISTINCT CO.course_id) * SR.num_students) AS ratio FROM course_offering CO JOIN student_record SR ON CO.offering_id = SR.offering_id;
Generated Result:
ERROR 20301 (HY000): invalid input: column 'co.has_exams' does not exist

Rating: Bad

-------------------
Test #42
DB: Advising
-------------------
Question: What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?

Generated Query: SELECT CC.course_id, CAST(COUNT(CASE WHEN SR.grade = 'A' THEN 1 END) AS FLOAT) * (SELECT COUNT(*) FROM course_tags_count WHERE clear_grading > 0 AND good_feedback > 0) / ((SELECT COUNT(*) FROM student_record WHERE grade = 'A') /
SELECT COUNT(*) FROM course_tags_count WHERE clear_grading > 0 AND good_feedback > 0) FROM course_tags_count CC
JOIN student_record SR ON CC.course_id = SR.course_id WHERE CC.clear_grading > 0 AND CC.good_feedback > 0;
Generated Result: 
ERROR 1064 (HY000): SQL parser error: You have an error in your SQL syntax; check the manual that corresponds to your MatrixOne server version for the right syntax to use. syntax error at line 6 column 12 near

Rating: Bad

-------------------
Test #43
DB: Advising
-------------------
Question: What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?

Generated Query: SELECT CO.semester, CAST(PC.course_id AS SIGNED) / COUNT(CASE WHEN OC.has_exams > 0 THEN 1 END)
FROM course_offering CO JOIN program_course PC ON CO.course_id = PC.course_id WHERE CO.has_projects > 0 AND PC.category != ''
GROUP BY CO.semester;
Generated Result: ERROR 1064 (HY000): SQL parser error: table "program_course" does not exist

Rating: Bad

-------------------
Test #44
DB: Advising
-------------------
Question: What is the ratio of helpfulness scores to clarity scores for each course ID?

Generated Query: SELECT C1.course_id, CAST(C1.helpfulness_score AS FLOAT) / C2.clarity_score AS helpfulness_to_clarity_ratio
FROM course_tags_count C1 JOIN course_tags_count C2 ON C1.course_id = C2.course_id GROUP BY C1.course_id;
Generated Result: ERROR 20301 (HY000): invalid input: column 'c1.helpfulness_score' does not exist

Rating: Bad

-------------------
Test #45
DB: Advising
-------------------
Question: How does the ratio of enrolled students to the number of reviews vary across different courses?

Generated Query: C.name AS 'Course Name', CAST(C.num_enrolled AS FLOAT) / C.num_reviews AS 'Enrolled-to-Reviews Ratio'
FROM course C;
Generated Result: 
+----------------------------------+---------------------------+
| Course Name                      | Enrolled-to-Reviews Ratio |
+----------------------------------+---------------------------+
| Introduction to Computer Science |                       0.3 |
| Advanced Calculus                |                         1 |
| Introduction to Physics          |                     0.125 |
| Distributed Databases            |                      0.75 |
+----------------------------------+---------------------------+

Gold Query: Doesn't work with this schema

Rating: Unknown

-------------------
Test #46
DB: Advising
-------------------
Question: Which courses have been taken by students in the Computer Science program?

Generated Query: SELECT C.name AS 'Course Name' FROM student_record SR JOIN course C ON SR.course_id = C.course_id JOIN
program_course PC ON SR.course_id = PC.course_id AND PC.program_id IN ( SELECT program_id FROM program WHERE name = 'Computer Science' ) WHERE C.name IS NOT NULL;
Generated Result:
ERROR 1064 (HY000): SQL parser error: table "program_course" does not exist

Rating: Bad

-------------------
Test #47
DB: Advising
-------------------
Question: Which courses have a final project and a final exam?

Generated Query: SELECT C.name AS 'Course Name' FROM course_offering CO JOIN course C ON CO.course_id = C.course_id WHERE CO.has_final_project = 1 AND CO.has_final_exam = 1 AND C.name IS NOT NULL;

Generated Result:
+-------------------+
| Course Name       |
+-------------------+
| Advanced Calculus |
| Advanced Calculus |
+-------------------+

Gold Query: SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = TRUE OR course_offering.has_final_exam = TRUE;
Gold Result:
+-------------------+-----------+---------+
| name              | course_id | number  |
+-------------------+-----------+---------+
| Advanced Calculus |         2 | MATH201 |
+-------------------+-----------+---------+

-------------------
Test #48
DB: Advising
-------------------
Question: What is the total number of credits earned by students in each program?

Generated Query: SELECT COUNT(DISTINCT sr.student_id) FROM student_record AS sr JOIN course_offering AS co ON sr.offering_id = co.offering_id WHERE co.has_final_project = '1' OR co.has_final_exam = '1';
Genearted Result:
+-------------------------------+
| count(distinct sr.student_id) |
+-------------------------------+
|                             5 |
+-------------------------------+

Gold Query: SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = TRUE OR course_offering.has_final_exam = TRUE;
Gold Result: 
+----------------+
| total_students |
+----------------+
|              5 |
+----------------+

Rating: Perfect

-------------------
Test #49
DB: Advising
-------------------
Question: How many students have declared a major in each program?

Generated Query: SELECT p.name, COALESCE(SUM(pc.workload), 0) as total_credits FROM program p JOIN program_course pc ON p.program_id = pc.program_id GROUP BY p.name;
Generated Result: SELECT p.name, COALESCE(SUM(pc.workload), 0) as total_credits FROM program p JOIN program_course pc ON p.program_id = pc.program_id GROUP BY p.name;

Rating: Bad

-------------------
Test #50
DB: Advising
-------------------
Question: How many students have declared a major in each program?

Generated Query: SELECT p.name, COUNT(s.student_id) as num_students_declared_major FROM student s JOIN program p ON s.program_id = p.program_id GROUP BY p.name;
Generated Result: 
+------------------+-----------------------------+
| name             | num_students_declared_major |
+------------------+-----------------------------+
| Computer Science |                           3 |
| Mathematics      |                           1 |
| Physics          |                           1 |
+------------------+-----------------------------+

Gold Query: SELECT program.name, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.name ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;SELECT program.program_id, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.program_id ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;SELECT program.name, program.program_id, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.name, program.program_id ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;
Gold Result: 
+------------------+--------------------+
| name             | number_of_students |
+------------------+--------------------+
| Computer Science |                  3 |
| Mathematics      |                  1 |
| Physics          |                  1 |
+------------------+--------------------+

-------------------
Test #51
DB: Advising
-------------------
Question: Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.

Generated Query: SELECT s.firstname, s.lastname FROM student s WHERE s.minor IS NOT NULL ORDER BY s.lastname;
Generated Result: 
+-----------+----------+
| firstname | lastname |
+-----------+----------+
| Sarah     | Brown    |
| David     | Johnson  |
+-----------+----------+

Gold Query: SELECT student.firstname, student.lastname FROM student WHERE NOT student.minor IS NULL ORDER BY CASE WHEN student.lastname IS NULL THEN 1 ELSE 0 END, student.lastname;
Gold Result: 
+-----------+----------+
| firstname | lastname |
+-----------+----------+
| Sarah     | Brown    |
| David     | Johnson  |
+-----------+----------+

-------------------
Test #52
DB: Advising
-------------------
Question: What is the average GPA of students in the program mathematics?

Generated Query: SELECT AVG(s.total_gpa) AS average_gpa FROM student s JOIN program_course pc ON s.program_id = pc.program_id
WHERE pc.category = 'mathematics';
Genearted Result: 
ERROR 1064 (HY000): SQL parser error: table "program_course" does not exist

Rating: Bad

-------------------
Test #53
DB: Advising
-------------------
Question: What are the names of all the courses offered by the department of Computer Science?

Generated Query: SELECT c.name AS course_name FROM student_record sr JOIN course c ON sr.course_id = c.course_id
WHERE c.department ILIKE 'Computer Science';
Generated Result: 
+----------------------------------+
| course_name                      |
+----------------------------------+
| Introduction to Computer Science |
| Distributed Databases            |
| Introduction to Computer Science |
| Distributed Databases            |
| Introduction to Computer Science |
| Distributed Databases            |
+----------------------------------+

Gold Query: SELECT course.name FROM course WHERE LOWER(course.department) LIKE LOWER('%Computer Science%') ORDER BY CASE WHEN course.name IS NULL THEN 1 ELSE 0 END, course.name ASC;
Gold Result:
+----------------------------------+
| name                             |
+----------------------------------+
| Distributed Databases            |
| Introduction to Computer Science |
+----------------------------------+

Rating: Good

-------------------
Test #54
DB: Advising
-------------------
Question: What are the easiness scores for courses in the "Computer Science" department? Show both courses and scores.

Generated Query: SELECT c.name AS CourseName, c.easiness_score AS EasinessScore FROM course AS c 
JOIN area AS a ON c.course_id = a.course_id WHERE a.area = 'Computer Science';
Generated Result: 
+----------------------------------+---------------+
| CourseName                       | EasinessScore |
+----------------------------------+---------------+
| Introduction to Computer Science |             3 |
| Distributed Databases            |             1 |
+----------------------------------+---------------+

Gold Query: SELECT course.name, course.easiness_score FROM course WHERE course.department = 'Computer Science';
Gold Result:
+----------------------------------+----------------+
| name                             | easiness_score |
+----------------------------------+----------------+
| Introduction to Computer Science |              3 |
| Distributed Databases            |              1 |
+----------------------------------+----------------+

Rating: Perfect

-------------------
Test #55
DB: Advising
-------------------
Question: Return the student IDs who have taken an in-person course and have gotten a grade of A or C

Generated Query: SELECT DISTINCT sr.student_id FROM student_record AS sr JOIN course_offering AS co ON sr.offering_id = co.offering_id WHERE sr.grade IN ('A', 'C') AND co.class_address IS NOT NULL;
Generated Result: 
+------------+
| student_id |
+------------+
|          1 |
|          2 |
|          4 |
+------------+

Gold Query: SELECT DISTINCT student_id FROM student_record WHERE student_record.how = 'in-person' AND student_record.grade IN ('A', 'C');
Gold Result:
+------------+
| student_id |
+------------+
|          1 |
|          2 |
|          4 |
+------------+

Rating: Perfect

-------------------
Test #56
DB: Atis
-------------------
Question: Which flight has the shortest duration between departure and arrival times? Convert to integer minutes.

Generated Query: SELECT flight.flight_number, (flight.arrival_time - flight.departure_time) / 60 AS duration_minutes FROM
flight ORDER BY duration_minutes ASC LIMIT 1;
Generated Result: 
ERROR 1064 (HY000): SQL parser error: table "flight" does not exist

Rating: Bad

-------------------
Test #57
DB: Atis
-------------------
Question: What's the average duration between departure and arrival times minus 34 minutes? Convert from UNIX to regular datetime, and return the answer in minutes

Generated Query: SELECT AVG((DATE_FORMAT(TIME_TO_SEC(flight.arrival_time - flight.departure_time), '%H:%i') - 34) / 60 AS duration_minutes) FROM flight;
Generated Result:
ERROR 1064 (HY000): SQL parser error: You have an error in your SQL syntax; check the manual that corresponds to your MatrixOne server version for the right syntax to use. syntax error at line 1 column 104 near " AS duration_minutes) FROM flight"; 

Rating: Bad

-------------------
Test #58
DB: Atis
-------------------
Question: Count the number of flight departures for each month?

Generated Query: SELECT MONTH(TIME_TO_SEC(flight.departure_time)) AS departure_month, COUNT(*) AS num_departures FROM
flight GROUP BY departure_month;
Generated Result: 
ERROR 20105 (HY000): not supported: function or operator 'time_to_sec'

Rating: Unknown

-------------------
Test #59
DB: Atis
-------------------
Question: What's the earliest flight departure time in the day in HH:MM?

Generated Query: SELECT TIME_FORMAT(f.departure_time, '%H:%i') AS earliest_departure FROM flight f ORDER BY f.departure_time ASC
LIMIT 1;
Generated Result: 
ERROR 20105 (HY000): not supported: function or operator 'time_format'

Rating: Bad

-------------------
Test #60
DB: Atis
-------------------
Question: What's the absolute difference in time in days between today and the earliest flight departure? Give the answer as an integer.

Generated Query: SELECT CAST(days_difference AS SIGNED) AS days_difference_integer
FROM (SELECT DATEDIFF(today, earliest_departure_time) AS days_difference FROM (SELECT CURDATE() AS today) t1,
(SELECT MIN(flight.departure_time) AS earliest_departure_time FROM flight) t2);
Generated Result: 
ERROR 20203 (HY000): invalid argument function datediff, bad value [DATE BIGINT]

Rating: Bad

-------------------
Test #61
DB: Atis
-------------------
Question: What is the total cost of round-trip fares for each airline code?

Generated Query: SELECT fa.airline_code, SUM(fa.one_direction_cost * 2) AS total_round_trip_cost
FROM fare fa GROUP BY fa.airline_code;
Generated Result:
ERROR 20301 (HY000): invalid input: column 'fa.airline_code' does not exist

Rating: Bad

-------------------
Test #62
DB: Atis
-------------------
Question: What is the average cost of round-trip fares from Los Angeles (LAX) to Chicago (ORD) for each airline, sorted in descending order by average cost?

Generated Query: SELECT fa.airline_code, AVG(fa.round_trip_cost) AS avg_round_trip_cost FROM fare fa JOIN flight f ON fa.fare_id = f.flight_id WHERE f.from_airport = 'LAX' AND f.to_airport = 'ORD' GROUP BY fa.airline_code ORDER BY avg_round_trip_cost DESC;
Generated Result:
ERROR 20301 (HY000): invalid input: column 'fa.airline_code' does not exist

Rating: Bad

-------------------
Test #63
DB: Atis
-------------------
Question: What is the average cost of a one-way trip for each airport pair in the fare table?

Generated Query: SELECT fa.from_airport, fa.to_airport, AVG(fa.one_direction_cost) AS avg_one_way_cost FROM fare fa
GROUP BY fa.from_airport, fa.to_airport;
Generated Result:
+--------------+------------+------------------+
| from_airport | to_airport | avg_one_way_cost |
+--------------+------------+------------------+
| ORD          | JFK        |              195 |
| ORD          | LAX        |              220 |
| JFK          | ORD        |              200 |
| JFK          | LAX        |              230 |
| LAX          | ORD        |              255 |
+--------------+------------+------------------+

Gold Query: SELECT f.from_airport, f.to_airport, AVG(f.one_direction_cost) AS average_cost FROM fare AS f GROUP BY f.from_airport, f.to_airport ORDER BY CASE WHEN f.from_airport IS NULL THEN 1 ELSE 0 END, f.from_airport, CASE WHEN f.to_airport IS NULL THEN 1 ELSE 0 END, f.to_airport;
Gold Result:
+--------------+------------+--------------+
| from_airport | to_airport | average_cost |
+--------------+------------+--------------+
| JFK          | LAX        |          230 |
| JFK          | ORD        |          200 |
| LAX          | ORD        |          255 |
| ORD          | JFK        |          195 |
| ORD          | LAX        |          220 |
+--------------+------------+--------------+

Rating: Perfect

-------------------
Test #64
DB: Atis
-------------------
Question: How many meals are served in each compartment, sorted by the number of meals in descending order?

Generated Query: SELECT fc.meal_number, s.compartment FROM food_service fc JOIN compartment_class sc ON fc.compartment = sc.compartment ORDER BY fc.meal_number DESC;
Generated Result:
ERROR 20301 (HY000): invalid input: missing FROM-clause entry for table 's'

Rating: Bad 

-------------------
Test #65
DB: Atis
-------------------
Question: How many flights depart from each airport code, excluding departures with connections?

Generated Query: SELECT f.from_airport, COUNT(*) AS num_flights FROM flight f JOIN airport a ON f.from_airport = a.airport_code
WHERE f.connections = 0 GROUP BY f.from_airport;
Generated Result:
Empty set

Rating: Bad

-------------------
Test #66
DB: Atis
-------------------
Question: Which flight ids to Chicago (ORD) have the longest duration from departure to arrival, sorted in ascending order?

Generated Query:
SELECT f.flight_id, (f.arrival_time - f.departure_time) AS duration FROM flight f JOIN airport a ON f.from_airport = 'ORD'
ORDER BY duration ASC;
Generated Result:
Empty set

Rating: Bad

-------------------
Test #67
DB: Atis
-------------------
Question: Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.

Generated Query: SELECT a.airport_code, a.airport_name, a.minimum_connect_time AS min_connect_time
FROM airport a WHERE a.minimum_connect_time = (SELECT MIN(minimum_connect_time) FROM airport) ORDER BY
min_connect_time ASC;
Result:
Empty set

Rating: Bad

-------------------
Test #68
DB: Atis
-------------------
Question: Which aircraft code can carry the highest weight of cargo that any aircraft can carry?

Generated Query: SELECT MAX(a.weight) AS max_weight, a.aircraft_code FROM aircraft a ORDER BY a.weight DESC
LIMIT 1;
Generated Result:
ERROR 20301 (HY000): invalid input: column a_weight does not exist

Rating: Bad

-------------------
Test #69
DB: Atis
-------------------
Question: What are the top 2 airlines with the most flights?

Generated Query: SELECT a.airline_code, COUNT(f.flight_id) AS num_flights FROM flight f JOIN airline a ON f.airline_flight = a.airline_name AND f.airline_code = a.airline_code GROUP BY a.airline_code ORDER BY num_flights DESC LIMIT 2;
Generated Result:
Empty Set

Rating: Bad

-------------------
Test #70
DB: Atis
-------------------
Question: What are the aircraft codes for all aircraft with a cruising speed of over 200 mph? sort the aircraft codes in ascending order.

Generated Query: SELECT a.aircraft_code FROM aircraft a WHERE a.cruising_speed > 200 ORDER BY a.aircraft_code ASC;
Generated Result:
+---------------+
| aircraft_code |
+---------------+
| A320          |
| A330          |
| A350          |
| A380          |
| B737          |
| B747          |
| B777          |
| B787          |
| CRJ200        |
| E190          |
+---------------+

Gold Query: SELECT aircraft.aircraft_code FROM aircraft WHERE aircraft.cruising_speed > 200 ORDER BY CASE WHEN aircraft.aircraft_code IS NULL THEN 1 ELSE 0 END, aircraft.aircraft_code ASC;
Gold Result:
+---------------+
| aircraft_code |
+---------------+
| A320          |
| A330          |
| A350          |
| A380          |
| B737          |
| B747          |
| B777          |
| B787          |
| CRJ200        |
| E190          |
+---------------+

-------------------
Test #71
DB: Atis
-------------------
Question: Calculate the ratio of the maximum range to the maximum payload for each aircraft

Generated Query: SELECT CAST(aircraft.range_miles AS DOUBLE) / NULLIF(aircraft.pay_load, 0) AS range_to_payload_ratio FROM aircraft;
Generated Result:
ERROR 20203 (HY000): invalid argument cast to int, bad value

Rating: Bad

-------------------
Test #72
DB: Atis
-------------------
Question: What is the ratio of one-way trip costs to round-trip costs for each fare?

Generated Query: SELECT CAST(fare.one_direction_cost AS FLOAT) / fare.round_trip_cost, fare.fare_id FROM fare;
Generated Result:
+---------------------------------------------------------------+---------+
| cast(fare.one_direction_cost as float) / fare.round_trip_cost | fare_id |
+---------------------------------------------------------------+---------+
|                                            0.6666666666666666 |       1 |
|                                            0.5357142857142857 |       2 |
|                                                           0.6 |       3 |
|                                            0.7142857142857143 |       4 |
|                                                          0.55 |       5 |
|                                            0.5428571428571428 |       6 |
|                                                         0.525 |       7 |
|                                                         0.575 |       8 |
|                                                           0.6 |       9 |
|                                                          0.54 |      10 |
+---------------------------------------------------------------+---------+

Gold Query: SELECT fare.fare_id, CAST(fare.one_direction_cost AS DOUBLE) / NULLIF(fare.round_trip_cost, 0) AS cost_ratio FROM fare ORDER BY CASE WHEN cost_ratio IS NULL THEN 1 ELSE 0 END, cost_ratio;
Gold Result: 
ERROR 20203 (HY000): invalid argument cast to int, bad value

Rating: Unknown

-------------------
Test #73
DB: Atis
-------------------
Question: What is the ratio of aircraft capacity to its range in miles for each aircraft code?

Generated Query: SELECT CAST(a.capacity AS FLOAT) / a.range_miles, a.aircraft_code FROM aircraft a;
Generated Results:
+-------------------------------------------+---------------+
| cast(a.capacity as float) / a.range_miles | aircraft_code |
+-------------------------------------------+---------------+
|                       0.04862653419053185 | B747          |
|                       0.07272727272727272 | A320          |
|                       0.05974025974025974 | B737          |
|                                  0.106625 | A380          |
|                       0.06428988895382817 | B777          |
|                       0.06929133858267716 | A330          |
|                      0.043824701195219126 | B787          |
|                                     0.055 | A350          |
|                                    0.0475 | E190          |
|                       0.02881844380403458 | CRJ200        |
+-------------------------------------------+---------------+

Gold Query: SELECT aircraft.aircraft_code, CAST(aircraft.capacity AS DOUBLE) / NULLIF(aircraft.range_miles, 0) AS capacity_range_ratio FROM aircraft;
Gold Result: 
ERROR 20203 (HY000): invalid argument cast to int, bad value

Rating: Unknown

-------------------
Test #74
DB: Atis
-------------------
Question: What is the proportion of flights with stops out of all flights for each airline code?

Generated Query: SELECT CAST(f.stops AS FLOAT) / f.total_flight, a.airline_codeFROM
flight f JOIN airline a ON f.airline_code = a.airline_code;
Generated Result:
ERROR 1064 (HY000): SQL parser error: You have an error in your SQL syntax; check the manual that corresponds to your MatrixOne server version for the right syntax to use. syntax error at line 2 column 9 near " f JOIN airline a ON f.airline_code = a.airline_code";

Rating: Bad

-------------------
Test #75
DB: Atis
-------------------
Question: How does the average ratio of the cruising speed to the payload of an aircraft vary across different aircraft manufacturers?

Generated Query: SELECT CAST(a.cruising_speed AS FLOAT) / a.pay_load, a.manufacturer FROM aircraft a;
Generated Result:
+----------------------------------------------+--------------+
| cast(a.cruising_speed as float) / a.pay_load | manufacturer |
+----------------------------------------------+--------------+
|                                       0.0095 | Boeing       |
|                         0.017033333333333334 | Airbus       |
|                         0.014685714285714286 | Boeing       |
|                                        0.004 | Airbus       |
|                                        0.008 | Boeing       |
|                         0.008615384615384615 | Airbus       |
|                         0.010781818181818182 | Boeing       |
|                         0.008114285714285715 | Airbus       |
|                          0.03613333333333334 | Embraer      |
|                          0.08476190476190476 | Bombardier   |
+----------------------------------------------+--------------+

Gold Query:  SELECT aircraft.manufacturer, AVG(CAST(aircraft.cruising_speed AS DOUBLE) / NULLIF(aircraft.pay_load, 0)) AS speed_payload_ratio FROM aircraft GROUP BY aircraft.manufacturer ORDER BY speed_payload_ratio DESC; (Modified for MYSQL)
Gold Result: 
+--------------+----------------------+
| manufacturer | speed_payload_ratio  |
+--------------+----------------------+
| Bombardier   |  0.08476190476190476 |
| Embraer      |  0.03613333333333334 |
| Boeing       | 0.010741883116883118 |
| Airbus       | 0.009440750915750916 |
+--------------+----------------------+

-------------------
Test #76
DB: Atis
-------------------
Question: Which flights serve meals in first class? Give me the flight id and meal description.

Generated Query: SELECT f.flight_id, fs.meal_description FROM flight f JOIN food_service fs ON f.meal_code = fs.meal_code;
Generated Result: 
+-----------+------------------+
| flight_id | meal_description |
+-----------+------------------+
|         1 | Breakfast        |
|         2 | Lunch            |
|         3 | Dinner           |
|         4 | Breakfast        |
|         5 | Breakfast        |
|         6 | Lunch            |
|         7 | Dinner           |
|         8 | Breakfast        |
|         9 | Lunch            |
|        10 | Dinner           |
+-----------+------------------+

Gold Query: SELECT flight.flight_id, food_service.meal_description FROM flight JOIN food_service ON flight.meal_code = food_service.meal_code WHERE LOWER(food_service.compartment) LIKE '%first class%';
Gold Result: 
+-----------+------------------+
| flight_id | meal_description |
+-----------+------------------+
|         1 | Breakfast        |
|         2 | Lunch            |
|         3 | Dinner           |
|         5 | Breakfast        |
|         6 | Lunch            |
|         7 | Dinner           |
+-----------+------------------+

Rating: Perfect

-------------------
Test #77
DB: Atis
-------------------
Question: Which airlines offer flights with a stopover in Dallas?

Generated Query: SELECT DISTINCT a.airline_name FROM flight_stop fs JOIN airport a ON fs.stop_airport = a.airport_code;
Generated Result: 
ERROR 20301 (HY000): invalid input: column 'a.airline_name' does not exist

Rating: Bad

-------------------
Test #78
DB: Atis
-------------------
Question: Which airlines offer flights from LAX to ORD?

Generated Query: SELECT a.airline_name FROM flight f JOIN airline a ON f.airline_code = a.airline_code WHERE
f.from_airport = 'LAX' AND f.to_airport = 'ORD';
Generated Result:
+-------------------+
| airline_name      |
+-------------------+
| Hawaiian Airlines |
| Virgin America    |
+-------------------+

Gold Query: SELECT DISTINCT airline.airline_name FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'LAX' AND flight.to_airport = 'ORD';
Gold Result: 
+-------------------+
| airline_name      |
+-------------------+
| Hawaiian Airlines |
| Virgin America    |
+-------------------+

Rating: Perfect

-------------------
Test #79
DB: Atis
-------------------
Question: Which airlines offer flights from Chicago (ORD) to New York (JFK), and how many stops do they have, sorted by number of stops in ascending order?

Generated Query: SELECT a.airline_name, f.stops FROM flight f JOIN airline a ON f.airline_code = a.airline_code WHERE
f.from_airport = 'ORD' AND f.to_airport = 'JFK' ORDER BY f.stops ASC;
Generated Result:
+--------------------+-------+
| airline_name       | stops |
+--------------------+-------+
| American Airlines  |     0 |
| American Airlines  |     0 |
| United Airlines    |     1 |
| Southwest Airlines |     1 |
+--------------------+-------+

Gold Query: SELECT airline.airline_name, flight.stops FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'ORD' AND flight.to_airport = 'JFK' ORDER BY CASE WHEN flight.stops IS NULL THEN 1 ELSE 0 END, flight.stops;
Gold Result:
+--------------------+-------+
| airline_name       | stops |
+--------------------+-------+
| American Airlines  |     0 |
| American Airlines  |     0 |
| United Airlines    |     1 |
| Southwest Airlines |     1 |
+--------------------+-------+

Rating: Perfect

-------------------
Test #80
DB: Atis
-------------------
Question: Which airlines do not have any flights that either depart from/arrive at JFK, or have one or more stops?

Generated Query: SELECT DISTINCT a.airline_name FROM flight f JOIN airline a ON f.airline_code = a.airline_code WHERE
(f.from_airport = 'JFK' AND f.to_airport <> 'JFK') OR (f.from_airport <> 'JFK' AND f.to_airport = 'JFK')
OR (f.stops > 0) ORDER BY a.airline_name;
Generation Result: 
+--------------------+
| airline_name       |
+--------------------+
| American Airlines  |
| Frontier Airlines  |
| Southwest Airlines |
| United Airlines    |
| Virgin America     |
+--------------------+

Gold Query: SELECT DISTINCT airline.airline_name FROM airline WHERE NOT airline.airline_code IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);SELECT DISTINCT airline.airline_code FROM airline WHERE NOT airline.airline_code IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);SELECT DISTINCT airline.airline_name, airline.airline_code FROM airline WHERE NOT airline.airline_code IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);
Gold Result:
+-------------------+
| airline_name      |
+-------------------+
| Delta Air Lines   |
| Alaska Airlines   |
| JetBlue Airways   |
| Spirit Airlines   |
| Hawaiian Airlines |
+-------------------+

Rating: Bad

-------------------
Test #81
DB: Atis
-------------------
Question: Which state code is Orlando International Airport in?

Generated Query: SELECT a.state_code FROM airport_service as s JOIN airport a ON s.airport_code = a.airport_code JOIN
city c ON s.city_code = c.city_code WHERE LOWER(c.city_name) ILIKE '%orlando%';
Generated Result:
Empty Set

Gold Query: SELECT state_code FROM airport WHERE LOWER(airport_name) LIKE LOWER('%Orlando International Airport%');
Gold Result: 
Empty Set

Rating: Perfect

-------------------
Test #82
DB: Atis
-------------------
Question: Which flights operate on Mondays and Wednesdays? Give me the relevant flight numbers

Generated Query: SELECT f.flight_number FROM flight f WHERE LOWER(f.flight_days) ILIKE '%monday%' AND
LOWER(f.flight_days) ILIKE '%wednesday%';
Generated Result:
Empty Set

Gold Query: SELECT flight.flight_number FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';SELECT flight.flight_id FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';SELECT flight.flight_number, flight.flight_id FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';
Gold Result:
+---------------+
| flight_number |
+---------------+
| AA123         |
| VX890         |
+---------------+

Rating: Bad

-------------------
Test #83
DB: Atis
-------------------
Question: What is the total cost of all round-trip fares from New York (JFK) to Los Angeles?

Generated Query: SELECT f.round_trip_cost FROM fare f WHERE f.from_airport ILIKE 'jfk' AND f.to_airport ILIKE '%los angeles%';
Generated Result: 
Empty Set

Gold Query: SELECT SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare WHERE fare.from_airport = 'JFK' AND fare.to_airport = 'LAX';
Gold Result:
+-----------------------+
| total_round_trip_cost |
+-----------------------+
|                   400 |
+-----------------------+

Rating: Bad

-------------------
Test #84
DB: Atis
-------------------
Question: What is the minimum amount of time required for a connecting flight at JFK Airport?

Generated Query: SELECT f.minimum_connect_time FROM flight f JOIN airport a ON f.from_airport = a.airport_code WHERE
f.from_airport ILIKE 'jfk' AND f.stops > 1;
Generated Result:
ERROR 20301 (HY000): invalid input: column 'f.minimum_connect_time' does not exist

Rating: Bad

-------------------
Test #85
DB: Atis
-------------------
Question: How many flights require a round-trip to purchase the fare?

Generated Query: SELECT COUNT(f.flight_id) AS total_flights FROM flight f JOIN fare ff ON f.flight_number = ff.fare_airline
WHERE ff.round_trip_required = 'Y';
Generated Result: 
+---------------+
| total_flights |
+---------------+
|             0 |
+---------------+

Gold Query: SELECT minimum_connect_time FROM airport WHERE airport_code = 'JFK';
Gold Result:
Empty Set

Rating: Perfect

-------------------
Test #86
DB: Geography
-------------------
Question: What is the total population in cities by country?

Generated Query: SELECT c.country_name, SUM(c.population) AS total_population
FROM city c GROUP BY c.country_name;
Generated Result: 
+----------------+------------------+
| country_name   | total_population |
+----------------+------------------+
| United States  |          9500000 |
| Canada         |           800000 |
| Mexico         |           600000 |
| Brazil         |          3000000 |
| India          |          1200000 |
| United Kingdom |           900000 |
| Japan          |           700000 |
+----------------+------------------+

Gold Query: SELECT city.country_name, SUM(city.population) AS total_population FROM city GROUP BY city.country_name ORDER BY total_population DESC;
Gold Result:   
+----------------+------------------+
| country_name   | total_population |
+----------------+------------------+
| United States  |          9500000 |
| Brazil         |          3000000 |
| India          |          1200000 |
| United Kingdom |           900000 |
| Canada         |           800000 |
| Japan          |           700000 |
| Mexico         |           600000 |
+----------------+------------------+

Rating: Perfect

-------------------
Test #87
DB: Geography
-------------------
Question: What is the average length of rivers in each country?

Generated Query: SELECT r.country_name, AVG(r.length) AS average_length FROM river r
GROUP BY r.country_name;
Generated Result:
+---------------+----------------+
| country_name  | average_length |
+---------------+----------------+
| Egypt         |           1000 |
| Brazil        |            500 |
| China         |            300 |
| United States |            200 |
| Canada        |            400 |
| Russia        |            800 |
| Vietnam       |            600 |
| Germany       |            800 |
| Italy         |            100 |
+---------------+----------------+

Gold Query: SELECT river.country_name, AVG(river.length) AS average_length FROM river GROUP BY river.country_name ORDER BY average_length DESC;
Gold Result: 
+---------------+----------------+
| country_name  | average_length |
+---------------+----------------+
| Egypt         |           1000 |
| Russia        |            800 |
| Germany       |            800 |
| Vietnam       |            600 |
| Brazil        |            500 |
| Canada        |            400 |
| China         |            300 |
| United States |            200 |
| Italy         |            100 |
+---------------+----------------+

Rating: Perfect

-------------------
Test #88
DB: Geography
-------------------
Question: How many rivers flow through each country?

Generated Query: SELECT r.country_name, COUNT(r.river_name) AS num_rivers FROM river r
GROUP BY r.country_name;
Generated Result:
+---------------+------------+
| country_name  | num_rivers |
+---------------+------------+
| Egypt         |          1 |
| Brazil        |          1 |
| China         |          1 |
| United States |          1 |
| Canada        |          1 |
| Russia        |          1 |
| Vietnam       |          1 |
| Germany       |          2 |
| Italy         |          1 |
+---------------+------------+

Gold Query: SELECT river.country_name, COUNT(DISTINCT river.river_name) AS number_of_rivers FROM river GROUP BY river.country_name ORDER BY CASE WHEN number_of_rivers IS NULL THEN 1 ELSE 0 END DESC, number_of_rivers DESC;
Gold Result: 
+---------------+------------------+
| country_name  | number_of_rivers |
+---------------+------------------+
| Germany       |                2 |
| Egypt         |                1 |
| Brazil        |                1 |
| China         |                1 |
| United States |                1 |
| Canada        |                1 |
| Russia        |                1 |
| Vietnam       |                1 |
| Italy         |                1 |
+---------------+------------------+

Rating: Perfect

-------------------
Test #89
DB: Geography
-------------------
Question: How many mountains are there in each country?

Generated Query: SELECT m.country_name, COUNT(m.mountain_name) AS num_mountains FROM mountain m GROUP BY m.country_name;
Generated Result: 
+--------------+---------------+
| country_name | num_mountains |
+--------------+---------------+
| Nepal        |             8 |
| Pakistan     |             2 |
+--------------+---------------+

Gold Query: SELECT mountain.country_name, COUNT(mountain.mountain_name) AS number_of_mountains FROM mountain GROUP BY mountain.country_name ORDER BY CASE WHEN number_of_mountains IS NULL THEN 1 ELSE 0 END DESC, number_of_mountains DESC;
Gold Result: 
+--------------+---------------------+
| country_name | number_of_mountains |
+--------------+---------------------+
| Nepal        |                   8 |
| Pakistan     |                   2 |
+--------------+---------------------+

Rating: Perfect

-------------------
Test #90
DB: Geography
-------------------
Question: How many lakes are there in each state?

Generated Query: SELECT l.state_name, COUNT(l.lake_name) AS num_lakes FROM lake l
GROUP BY l.state_name;
Generated Result: 
+------------+-----------+
| state_name | num_lakes |
+------------+-----------+
| Michigan   |         3 |
| Ohio       |         1 |
| New York   |         1 |
| NULL       |         5 |
+------------+-----------+

Gold Prompt: SELECT lake.state_name, COUNT(lake.lake_name) AS lake_count FROM lake GROUP BY lake.state_name ORDER BY CASE WHEN lake_count IS NULL THEN 1 ELSE 0 END DESC, lake_count DESC;
Gold Result:
+------------+------------+
| state_name | lake_count |
+------------+------------+
| NULL       |          5 |
| Michigan   |          3 |
| Ohio       |          1 |
| New York   |          1 |
+------------+------------+

Rating: Perfect

-------------------
Test #91
DB: Geography
-------------------
Question: Which states have the highest population density in people per square kilometer, ordered from highest to lowest?

Generated Prompt: SELECT s.state_name, CAST(s.population / s.area AS FLOAT) AS density_per_km2 FROM state s
ORDER BY density_per_km2 DESC;
Generated Result:
+-------------+-----------------+
| state_name  | density_per_km2 |
+-------------+-----------------+
| Maharashtra |       16.666666 |
| Michigan    |       13.333333 |
| California  |              10 |
| Texas       |              10 |
| Florida     |              10 |
| New York    |              10 |
| Ontario     |              10 |
| Sao Paulo   |        8.333333 |
| Ohio        |        8.181818 |
| Guangdong   |       6.6666665 |
| Tokyo       |             1.4 |
| England     |             0.9 |
+-------------+-----------------+

Gold Query:  SELECT state.state_name, state.density FROM state ORDER BY state.density DESC;
Gold Result:
+-------------+---------+
| state_name  | density |
+-------------+---------+
| California  |    1000 |
| Texas       |    1000 |
| Florida     |    1000 |
| New York    |    1000 |
| Ontario     |    1000 |
| Sao Paulo   |    1000 |
| Guangdong   |    1000 |
| Maharashtra |    1000 |
| England     |    1000 |
| Tokyo       |    1000 |
| Ohio        |    1000 |
| Michigan    |    1000 |
+-------------+---------+ 

Rating: Bad

-------------------
Test #92
DB: Geography
-------------------
Question: Which lakes have the largest areas in square kilometers, ordered from largest to smallest?

Generated Query: SELECT l.lake_name, CAST(l.area / 1000000 AS FLOAT) * 1.00 AS area_in_sq_km FROM lake l
ORDER BY area_in_sq_km DESC;
Generated Result:
+-----------------+---------------+
| lake_name       | area_in_sq_km |
+-----------------+---------------+
| Lake Qinghai    |        0.0012 |
| Lake Superior   |         0.001 |
| Lake Baikal     |        0.0009 |
| Lake Victoria   |        0.0008 |
| Lake Malawi     |        0.0007 |
| Lake Tanganyika |        0.0006 |
| Lake Michigan   |        0.0005 |
| Lake Ontario    |        0.0004 |
| Lake Huron      |        0.0003 |
| Lake Erie       |        0.0002 |
+-----------------+---------------+

Gold Query: SELECT lake.lake_name, lake.area FROM lake ORDER BY lake.area DESC;
Gold Result:
+-----------------+------+
| lake_name       | area |
+-----------------+------+
| Lake Qinghai    | 1200 |
| Lake Superior   | 1000 |
| Lake Baikal     |  900 |
| Lake Victoria   |  800 |
| Lake Malawi     |  700 |
| Lake Tanganyika |  600 |
| Lake Michigan   |  500 |
| Lake Ontario    |  400 |
| Lake Huron      |  300 |
| Lake Erie       |  200 |
+-----------------+------+

Rating: Perfect

-------------------
Test #93
DB: Geography
-------------------
Quesiton: What are the top 5 cities with the highest population? Give both city names and the population.

Generated Query: SELECT c.city_name, c.population FROM city c ORDER BY population DESC LIMIT 5;
Generated Result:
+-------------+------------+
| city_name   | population |
+-------------+------------+
| Los Angeles |    5000000 |
| Sao Paulo   |    3000000 |
| Houston     |    2000000 |
| Chicago     |    1500000 |
| Mumbai      |    1200000 |
+-------------+------------+

Gold Query: SELECT city.city_name, city.population FROM city ORDER BY city.population DESC LIMIT 5;
Gold Result:
+-------------+------------+
| city_name   | population |
+-------------+------------+
| Los Angeles |    5000000 |
| Sao Paulo   |    3000000 |
| Houston     |    2000000 |
| Chicago     |    1500000 |
| Mumbai      |    1200000 |
+-------------+------------+

-------------------
Test #94
DB: Geography
-------------------
Quesiton: What are the longest rivers in meters, ordered from longest to shortest?

Generated Query: SELECT river.length FROM river ORDER BY length DESC;
Generated Result:
+--------+
| length |
+--------+
|   1000 |
|    900 |
|    800 |
|    700 |
|    600 |
|    500 |
|    400 |
|    300 |
|    200 |
|    100 |
+--------+

Gold Query: SELECT river.river_name, river.length FROM river ORDER BY river.length DESC;
Gold Result:
+-------------+--------+
| river_name  | length |
+-------------+--------+
| Nile        |   1000 |
| Rhine       |    900 |
| Volga       |    800 |
| Danube      |    700 |
| Mekong      |    600 |
| Amazon      |    500 |
| Yukon       |    400 |
| Yangtze     |    300 |
| Mississippi |    200 |
| Po          |    100 |
+-------------+--------+

Rating: Good

-------------------
Test #95
DB: Geography
-------------------
Question: What are the highest mountains in meters, ordered from highest to lowest altitude?

Generated Query: SELECT mountain.mountain_altitude AS altitude FROM mountain ORDER BY mountain_altitude DESC;
Generated Result:
+----------+
| altitude |
+----------+
|    10000 |
|     9000 |
|     8000 |
|     7000 |
|     6000 |
|     5000 |
|     4000 |
|     3000 |
|     2000 |
|     1000 |
+----------+

Gold Query: SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain ORDER BY mountain.mountain_altitude DESC;
Gold Result:
+---------------+-------------------+
| mountain_name | mountain_altitude |
+---------------+-------------------+
| Mount Everest |             10000 |
| Nanga Parbat  |              9000 |
| Cho Oyu       |              8000 |
| Manaslu       |              7000 |
| Dhaulagiri    |              6000 |
| K2            |              5000 |
| Makalu        |              4000 |
| Kangchenjunga |              3000 |
| Lhotse        |              2000 |
| Annapurna     |              1000 |
+---------------+-------------------+

Rating: Good

-------------------
Test #96
DB: Geography
-------------------
Question: What is the ratio of the population of the United States to the population of California?

Generated Query: SELECT CAST(state1.population AS FLOAT) / state2.population AS ratio FROM state AS state1 JOIN state AS state2 ON state1.state_name = 'United States' AND state2.state_name = 'California';
Generated Result: 
Empty Set

Gold Query: SELECT mountain.country_name, COUNT(mountain.mountain_name) AS number_of_mountains FROM mountain GROUP BY mountain.country_name ORDER BY CASE WHEN number_of_mountains IS NULL THEN 1 ELSE 0 END DESC, number_of_mountains DESC;
Gold Result:
+--------------+---------------------+
| country_name | number_of_mountains |
+--------------+---------------------+
| Nepal        |                   8 |
| Pakistan     |                   2 |
+--------------+---------------------+

Rating: Bad

-------------------
Test #97
DB: Geography
-------------------
Question: What is the ratio of the length of the Mississippi River to the length of the Rhine River?

Generated Query: SELECT CAST(river1.length AS FLOAT) / river2.length AS length_ratio FROM river AS river1 JOIN river AS river2 ON
river1.river_name = 'Mississippi River' AND river2.river_name = 'Rhine River';
Generated Result: 
Empty Set

Rating: Bad

-------------------
Test #98
DB: Geography
-------------------
Question: What is the ratio of the altitude of 'Mount Everest' to the altitude of 'Dhaulagiri'? Match strings exactly

Generated Query: SELECT CAST(mountain1.mountain_altitude AS FLOAT) / mountain2.mountain_altitude AS altitude_ratio
FROM mountain AS mountain1 JOIN mountain AS mountain2 ON mountain1.mountain_name = 'Mount Everest' AND
mountain2.mountain_name = 'Dhaulagiri';
Generated Result:
+--------------------+
| altitude_ratio     |
+--------------------+
| 1.6666666666666667 |
+--------------------+

Gold Query: SELECT (CAST(everest.mountain_altitude AS DOUBLE) / NULLIF(dhaulagiri.mountain_altitude, 0)) AS altitude_ratio FROM (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Mount Everest') AS everest, (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Dhaulagiri') AS dhaulagiri;
Gold Result:
ERROR 20101 (HY000): internal error: Can't cast column from DECIMAL128 type to CHAR type because of one or more values in that column. 6000.0 is larger than Dest length 0

Rating: Unknown

-------------------
Test #99
DB: Geography
-------------------
Question: How does the population of each city vary in relation to the population of its corresponding state? Return the city name, and the proportion of each city's population relative to the state.

Generated Query: SELECT c.city_name AS city, (c.population / s.population) AS proportion FROM city AS c JOIN state AS s ON c.state_name = s.state_name;
Generated Result:
+-------------+------------+
| city        | proportion |
+-------------+------------+
| Los Angeles |         50 |
| Houston     |         40 |
| New York    |          5 |
| Toronto     |         10 |
| Sao Paulo   |         60 |
| Mumbai      |          6 |
| London      |        100 |
| Tokyo       |         10 |
+-------------+------------+

Gold Query: SELECT state_name, population / NULLIF(area, 0) AS population_density FROM state;
Gold Result: 
+-------------+--------------------+
| state_name  | population_density |
+-------------+--------------------+
| California  |    10.000000000000 |
| Texas       |    10.000000000000 |
| Florida     |    10.000000000000 |
| New York    |    10.000000000000 |
| Ontario     |    10.000000000000 |
| Sao Paulo   |     8.333333333333 |
| Guangdong   |     6.666666666667 |
| Maharashtra |    16.666666666667 |
| England     |     0.900000000000 |
| Tokyo       |     1.400000000000 |
| Ohio        |     8.181818181818 |
| Michigan    |    13.333333333333 |
+-------------+--------------------+

Rating: Bad

-------------------
Test #100
DB: Geography
-------------------
Question: Get the ratio of population per area for each state

Generated Query: SELECT s.state_name AS state, (s.population / s.area) AS ratio FROM state AS s;
Generated Result: 
+-------------+--------------------+
| state       | ratio              |
+-------------+--------------------+
| California  |                 10 |
| Texas       |                 10 |
| Florida     |                 10 |
| New York    |                 10 |
| Ontario     |                 10 |
| Sao Paulo   |  8.333333333333334 |
| Guangdong   |  6.666666666666667 |
| Maharashtra | 16.666666666666668 |
| England     |                0.9 |
| Tokyo       |                1.4 |
| Ohio        |  8.181818181818182 |
| Michigan    | 13.333333333333334 |
+-------------+--------------------+

Gold Query: SELECT state_name, population / NULLIF(area, 0) AS population_density FROM state;
Gold Result: 
ERROR 1105 (HY000): strconv.ParseFloat: parsing "": invalid syntax

Rating: Unknown

-------------------
Test #101
DB: Geography
-------------------
Question: Which countries have both lakes and rivers?

Generated Query: SELECT l.country_name AS country FROM lake AS l JOIN river AS r ON l.country_name = r.country_name;
Generated Result: 
+---------------+
| country       |
+---------------+
| China         |
| United States |
| United States |
| United States |
| United States |
| United States |
| Russia        |
+---------------+

Gold Query: SELECT DISTINCT lake.country_name FROM lake JOIN river ON lake.country_name = river.country_name;
Gold Result: 
+---------------+
| country_name  |
+---------------+
| China         |
| United States |
| Russia        |
+---------------+

Rating: Good

-------------------
Test #102
DB: Geography
-------------------
Question: Which states border the state where lake ontario is?

Generated Query: SELECT l.state_name AS lake_state FROM lake AS l WHERE l.lake_name = 'Ontario';
Generated Result: 
Empty Set

Gold Query: SELECT border_info.border FROM border_info JOIN lake ON border_info.state_name = lake.state_name WHERE LOWER(lake.lake_name) LIKE LOWER('%Ontario%');
Gold Result:
+---------------+
| border        |
+---------------+
| Pennsylvania  |
| Connecticut   |
| Massachusetts |
+---------------+

Rating: Bad

-------------------
Test #103
DB: Geography
-------------------
Question: Which lakes have a name that starts with "Lake"? They should be located in states with an area greater than 1000 square kilometers.

Generated Query: SELECT l.lake_name AS lake_name, s.state_name AS state_name FROM lake AS l JOIN state AS s ON l.state_name = s.state_name WHERE l.lake_name LIKE 'Lake%' AND s.area > 1000;
Generated Result:
+---------------+------------+
| lake_name     | state_name |
+---------------+------------+
| Lake Ontario  | New York   |
| Lake Erie     | Ohio       |
| Lake Superior | Michigan   |
| Lake Michigan | Michigan   |
| Lake Huron    | Michigan   |
+---------------+------------+

Gold Query: 
SELECT lake.lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.area > 1000 AND LOWER(lake.lake_name) LIKE LOWER('Lake%') ORDER BY CASE WHEN lake.lake_name IS NULL THEN 1 ELSE 0 END, lake.lake_name;
Gold Result:
+---------------+
| lake_name     |
+---------------+
| Lake Erie     |
| Lake Huron    |
| Lake Michigan |
| Lake Ontario  |
| Lake Superior |
+---------------+

-------------------
Test #104
DB: Geography
-------------------
Question: What is the highest point in each state and what is the population density of that state?

Generated Query: SELECT h.highest_elevation AS highest_point, s.state_name AS state_name, (s.population / s.area) AS population_density FROM highlow AS h JOIN state AS s ON h.state_name = s.state_name GROUP BY s.state_name;
Generated Result: 
ERROR 1149 (HY000): SQL syntax error: column "h.highest_elevation" must appear in the GROUP BY clause or be used in an aggregate function

Rating: Bad

-------------------
Test #105
DB: Geography
-------------------
Quesiton: What is the average length of rivers per country in countries with a lake?

Generated Query: SELECT c.country_name, AVG(r.length * 1.0) AS average_length_of_rivers
FROM river r JOIN lake l ON r.country_name = l.country_name JOIN (SELECT DISTINCT country_name FROM lake)
c ON r.country_name = c.country_name WHERE l.lake_name IS NOT NULL GROUP BY c.country_name
+---------------+-------------+
|         China | 300.0000000 |
| United States | 200.0000000 |
|        Russia | 800.0000000 |
+---------------+-------------+

Gold Query: SELECT l.country_name, AVG(r.length) AS average_length FROM river AS r JOIN lake AS l ON r.country_name = 
l.country_name GROUP BY l.country_name;
Gold Result: 
+---------------+------+
|         China |  300 |
| United States |  200 |
|        Russia |  800 |
+---------------+------+

Rating: Perfect

-------------------
Test #106
DB: Geography
-------------------
Question: Which states have fewer than a hundred thousand people?

Generated Query: SELECT state_name, CAST(population AS FLOAT) / 1000.0 AS population_in_thousands FROM
state WHERE CAST(population AS FLOAT) < 100000;
Generated Result:
+-----------+------+
|     Texas |   50 |
|   Ontario |   80 |
| Sao Paulo |   50 |
|   England |    9 |
|     Tokyo |   70 |
|      Ohio |   90 |
+-----------+------+

Gold Query: SELECT state_name FROM state WHERE population < 100000;
Gold Result:
+-----------+
|     Texas |
|   Ontario |
| Sao Paulo |
|   England |
|     Tokyo |
|      Ohio |
+-----------+

Rating: Perfect

-------------------
Test #107
DB: Geography
-------------------
Question: Which rivers traverse at least 3 cities/landmarks?

Generated Query: SELECT r.river_name, COUNT(DISTINCT c.city_name) + COUNT(DISTINCT h.state_name) + COUNT(DISTINCT l.lake_name) 
+ COUNT(DISTINCT m.mountain_name) + COUNT(DISTINCT b.border) FROM river r LEFT JOIN city c ON r.traverse = c.city_name
LEFT JOIN highlow h ON r.traverse = h.state_name LEFT JOIN lake l ON r.traverse = l.lake_name LEFT JOIN mountain m ON r.traverse = m.mountain_name
LEFT JOIN border_info b ON r.river_name = b.borderGROUP BY r.river_name HAVING COUNT(DISTINCT c.city_name) + COUNT(DISTINCT h.state_name) +
COUNT(DISTINCT l.lake_name) +  COUNT(DISTINCT m.mountain_name) + COUNT(DISTINCT b.border) >= 3;
Generated Result:
Empty Set

Gold Query: SELECT river_name FROM river WHERE traverse LIKE '%,%,%';
Gold Result:
+-------------+
|        Nile |
|     Yangtze |
| Mississippi |
|       Volga |
|      Danube |
|       Rhine |
|          Po |
+-------------+

Rating: Bad

-------------------
Test #108
DB: Geography
-------------------
Question: What are the names and areas of the lakes in Michigan?

Generated Query: SELECT l.lake_name, l.area FROM lake AS l 
INNER JOIN state AS s ON l.state_name = s.state_name WHERE s.state_name ILIKE 'Michigan%';
Generated Result: 
+---------------+------+
| Lake Superior | 1000 |
| Lake Michigan |  500 |
|    Lake Huron |  300 |
+---------------+------+

Gold Query: SELECT lake_name, area FROM lake WHERE LOWER(state_name) LIKE LOWER('%Michigan%');
Gold Result: 
+---------------+------+
| Lake Superior | 1000 |
| Lake Michigan |  500 |
|    Lake Huron |  300 |
+---------------+------+

Rating: Perfect

-------------------
Test #109
DB: Geography
-------------------
Question: What are the names and altitudes of the mountains in Nepal?

Generated Question: SELECT m.mountain_name, m.mountain_altitude FROM mountain AS m INNER JOIN state AS s ON m.state_name = s.state_name INNER JOIN country AS c ON
s.country_name = c.country_name WHERE c.country_name ILIKE 'Nepal%';
Generated Result: 
ERROR 1064 (HY000): SQL parser error: table "country" does not exist

Rating: Bad

-------------------
Test #110
DB: Geography
-------------------
Question: Get the cities in the United States and their population

Generated Question: SELECT c.city_name, c.population FROM city AS c INNER JOIN state AS s ON c.state_name
= s.state_name WHERE s.country_name ILIKE 'United States%';
Generated Result: 
+-------------+---------+
| Los Angeles | 5000000 |
|     Houston | 2000000 |
|    New York | 1000000 |
+-------------+---------+

Gold Query: SELECT city_name, population FROM city WHERE LOWER(country_name) LIKE LOWER('%United States%');
Gold Result: 
+-------------+---------+
|    New York | 1000000 |
| Los Angeles | 5000000 |
|     Chicago | 1500000 |
|     Houston | 2000000 |
+-------------+---------+

Rating: Good

-------------------
Test #111
DB: Restaurant
-------------------
Quesiton: What is the total number of restaurants serving each type of food?

Generated Query: SELECT COUNT(food_type) FROM restaurant GROUP BY food_type;
Generated Result: 
+------+
|    2 |
|    3 |
|    2 |
|    1 |
|    1 |
|    2 |
+------+

Gold Query: SELECT restaurant.food_type, COUNT(DISTINCT restaurant.id) AS total_number_of_restaurants FROM restaurant GROUP BY restaurant.food_type;
Gold Result:
+----------+------+
|  Italian |    2 |
| American |    3 |
| Japanese |    2 |
|  Mexican |    1 |
|    Vegan |    1 |
|  Seafood |    2 |
+----------+------+

Rating: Good

-------------------
Test #112
DB: Restaurant
-------------------
Question: What is the total count of restaurants in each city?

Generated Query: SELECT COUNT(r.id), l.city_name FROM 
restaurant AS r INNER JOIN location AS l ON r.city_name = l.city_name GROUP BY l.city_name;
Generated Result:
+------+---------------+
|    9 |   Los Angeles |
|    9 |      New York |
|    9 | San Francisco |
|    4 |         Miami |
+------+---------------+

Gold Query: SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS total_count FROM LOCATION GROUP BY location.city_name;
Gold Result:
+---------------+------+
|   Los Angeles |    3 |
|      New York |    3 |
| San Francisco |    3 |
|         Miami |    2 |
+---------------+------+

Rating: Bad

-------------------
Test #113
DB: Restaurant
-------------------
Question: What is the average rating of restaurants serving each type of food?

Generated Query: SELECT r.food_type, AVG(r.rating) FROM restaurant AS r GROUP BY r.food_type;
Generated Result: 
+----------+--------------------+
|  Italian |                4.6 |
| American | 3.7999999999999994 |
| Japanese |               4.25 |
|  Mexican |                4.1 |
|    Vegan |                4.6 |
|  Seafood |                4.5 |
+----------+--------------------+

Gold Query: SELECT restaurant.food_type, AVG(restaurant.rating) AS average_rating FROM restaurant GROUP BY restaurant.food_type ORDER BY average_rating DESC;
Gold Result:
+----------+--------------------+
|  Italian |                4.6 |
|    Vegan |                4.6 |
|  Seafood |                4.5 |
| Japanese |               4.25 |
|  Mexican |                4.1 |
| American | 3.7999999999999994 |
+----------+--------------------+

Rating: Perfect

-------------------
Test #114
DB: Restaurant
-------------------
Question: How many restaurants serve Italian food in each city?

Generated Query: SELECT r.city_name AS City, COUNT(r.id) AS CountOfItalianRestaurants FROM restaurant r
JOIN location l ON r.city_name = l.city_name WHERE r.food_type = 'Italian' GROUP BY r.city_name;
Generated Result: 
+-------------+------+
| Los Angeles |    3 |
|    New York |    3 |
+-------------+------+

Gold Query: SELECT restaurant.city_name, COUNT(*) AS number_of_restaurants FROM restaurant WHERE LOWER(restaurant.food_type) LIKE LOWER('%Italian%') GROUP BY restaurant.city_name ORDER BY number_of_restaurants DESC;
Gold Result: 
+-------------+------+
| Los Angeles |    1 |
|    New York |    1 |
+-------------+------+

-------------------
Test #115
DB: Restaurant
-------------------
Question: How many restaurants are there in each city? Order the results by the number of restaurants in descending order.

Generated Query: SELECT l.city_name AS City, COUNT(r.id) AS NumberOfRestaurants FROM location l JOIN restaurant r ON 
l.city_name = r.city_name GROUP BY l.city_name ORDER BY NumberOfRestaurants DESC;
Generated Result: 
+---------------+------+
|   Los Angeles |    9 |
|      New York |    9 |
| San Francisco |    9 |
|         Miami |    4 |
+---------------+------+

Gold Query: SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS number_of_restaurants FROM LOCATION GROUP BY location.city_name ORDER BY number_of_restaurants DESC;
Gold Result:
+---------------+------+
|   Los Angeles |    3 |
|      New York |    3 |
| San Francisco |    3 |
|         Miami |    2 |
+---------------+------+

Rating: Bad


-------------------
Test #116
DB: Restaurant
-------------------
Quesiton: Which street has the most number of restaurants?

Generated Query: SELECT street_name AS Street, COUNT(restaurant_id) AS NumberOfRestaurants FROM location
GROUP BY street_name ORDER BY NumberOfRestaurants DESC LIMIT 1;
Generated Result:
+----------+------+
| Pine Ave |    2 |
+----------+------+

Gold Query: SELECT street_name FROM location GROUP BY street_name ORDER BY CASE WHEN COUNT(restaurant_id) IS NULL THEN 1 ELSE 0 END DESC, COUNT(restaurant_id) DESC LIMIT 1;
Gold Result:
+----------+
| Pine Ave |
+----------+

Rating: Perfect

-------------------
Test #117
DB: Restaurant
-------------------
Question: Which restaurants serve Italian cuisine or are located in New York? Order the results by the restaurant name.

Generated Query: SELECT r.id, r.name, r.food_type, l.city_name AS LocationCity FROM restaurant r JOIN location l ON r.city_name = l.city_name
WHERE r.food_type = 'Italian' OR r.city_name = 'New York' ORDER BY r.name; 
Generated Result:
+------+-----------------+----------+-------------+
|    1 | The Pasta House |  Italian | Los Angeles |
|    1 | The Pasta House |  Italian | Los Angeles |
|    1 | The Pasta House |  Italian | Los Angeles |
|    4 | The Pizza Place |  Italian |    New York |
|    4 | The Pizza Place |  Italian |    New York |
|    4 | The Pizza Place |  Italian |    New York |
|    6 |  The Ramen Shop | Japanese |    New York |
|    6 |  The Ramen Shop | Japanese |    New York |
|    6 |  The Ramen Shop | Japanese |    New York |
|    5 |  The Steakhouse | American |    New York |
|    5 |  The Steakhouse | American |    New York |
|    5 |  The Steakhouse | American |    New York |
+------+-----------------+----------+-------------+

Gold Query: SELECT name FROM restaurant WHERE LOWER(food_type) LIKE LOWER('%Italian%') OR LOWER(city_name) LIKE LOWER('%New York%') ORDER BY CASE WHEN name IS NULL THEN 1 ELSE 0 END, name;
Gold Result: 
+-----------------+
| The Pasta House |
| The Pizza Place |
|  The Ramen Shop |
|  The Steakhouse |
+-----------------+

Rating: Perfect

-------------------
Test #118
DB: Restaurant
-------------------
Question: What is the average rating of restaurants in each region? Order the results by the region name.

Generated Query: SELECT g.region AS Region, AVG(r.rating) AS Average_Rating FROM restaurant r JOIN location l ON r.id = l.restaurant_id
JOIN geographic g ON l.city_name = g.city_name GROUP BY g.region ORDER BY g.region;
Generated Result: 
+------------+------+
| California | 4.15 |
|    Florida |  4.5 |
|   New York |  4.3 |
+------------+------+

Gold Query: SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name GROUP BY geographic.region ORDER BY CASE WHEN geographic.region IS NULL THEN 1 ELSE 0 END, geographic.region;
Gold Result:
+------------+------+
| California | 4.15 |
|    Florida |  4.5 |
|   New York |  4.3 |
+------------+------+

Rating: Perfect

-------------------
Test #119
DB: Restaurant
-------------------
Question: What are the names of the top 3 restaurants with the highest ratings?

Generated Query: SELECT r.name FROM restaurant r ORDER BY r.rating DESC LIMIT 3;
Generated Result:
+-------------------+
|   The Pizza Place |
| The Seafood Shack |
|    The Vegan Cafe |
+-------------------+

Gold Query: SELECT restaurant.name FROM restaurant ORDER BY restaurant.rating DESC LIMIT 3;
Gold Result: 
+-------------------+
|   The Pizza Place |
| The Seafood Shack |
|    The Vegan Cafe |
+-------------------+

Rating: Perfect

-------------------
Test #120
DB: Restaurant
-------------------
Question: List the restaurants starting from the best ratings to the lowest

Generated Query: SELECT r.name FROM restaurant r ORDER BY r.rating DESC;
Generated Result:
+----------------------+
|      The Pizza Place |
|       The Vegan Cafe |
|    The Seafood Shack |
|      The Pasta House |
|    The Seafood Shack |
|       The Ramen Shop |
|        The Sushi Bar |
| The Tacos & Burritos |
|       The Steakhouse |
|     The Burger Joint |
|        The BBQ Joint |
+----------------------+

Gold Query: SELECT name, rating FROM restaurant ORDER BY CASE WHEN rating IS NULL THEN 1 ELSE 0 END DESC, rating DESC;SELECT id, rating FROM restaurant ORDER BY CASE WHEN rating IS NULL THEN 1 ELSE 0 END DESC, rating DESC;SELECT name, id, rating FROM restaurant ORDER BY CASE WHEN rating IS NULL THEN 1 ELSE 0 END DESC, rating DESC;
Gold Result:
+----------------------+------+------+
|      The Pizza Place |    4 |  4.7 |
|       The Vegan Cafe |    8 |  4.6 |
|    The Seafood Shack |   11 |  4.6 |
|      The Pasta House |    1 |  4.5 |
|    The Seafood Shack |   10 |  4.4 |
|       The Ramen Shop |    6 |  4.3 |
|        The Sushi Bar |    3 |  4.2 |
| The Tacos & Burritos |    7 |  4.1 |
|       The Steakhouse |    5 |  3.9 |
|     The Burger Joint |    2 |  3.8 |
|        The BBQ Joint |    9 |  3.7 |
+----------------------+------+------+

Rating: Perfect

-------------------
Test #121
DB: Restaurant
------------------- 
Question: What is the ratio of restaurants with rating > 4.5 to the total number of restaurants in the database.

Generated Query: SELECT CAST(COUNT(CASE WHEN r.rating > 4.5 THEN 1 END) AS FLOAT) / COUNT(r.id)
FROM restaurant r;
Generated Result:
+--------------------+
| 0.2727272727272727 |
+--------------------+

Gold Query:SELECT COUNT(*) / (SELECT COUNT(*) FROM restaurant) AS rating_ratio  FROM restaurant 
WHERE rating > 4.5;
Gold Result: 
+--------------------+
| 0.2727272727272727 |
+--------------------+

Rating: Perfect

-------------------
Test #122
DB: Restaurant
-------------------
Question: What is the ratio of restaurants with a rating above 4.0 to restaurants with a rating below 4.0 overall?

Generated Query: SELECT (SELECT COUNT(*) FROM restaurant WHERE rating > 4.0) AS num_high, (SELECT COUNT(*) FROM restaurant WHERE rating < 4.0) AS num_low,
CAST((SELECT COUNT(*) FROM restaurant WHERE rating > 4.0) AS FLOAT) / (CAST((SELECT COUNT(*) FROM restaurant WHERE rating < 4.0) AS FLOAT)) AS ratio
FROM DUAL;
Generated Result:
+------+------+-----------+
|    8 |    3 | 2.6666667 |
+------+------+-----------+

Gold Query:
+--------------------+
| 2.6666666666666665 |
+--------------------+

Rating: Perfect

-------------------
Test #123
DB: Restaurant
-------------------
Question: What is the ratio of restaurants with a rating above 4 to restaurants with a rating below 4 in New York?

Generated Query: SELECT CAST((SELECT COUNT(*) FROM restaurant r WHERE r.rating > 4 AND r.city_name = 'New York') AS FLOAT) /
(SELECT COUNT(*) FROM restaurant r WHERE r.rating < 4 AND r.city_name = 'New York')
FROM DUAL;
Generated Result: 
+------+
|    2 |
+------+

Gold Query: SELECT COUNT(CASE WHEN rating > 4 THEN 1 END) /  IF(COUNT(CASE WHEN rating < 4 THEN 1 END) = 0, 1,
COUNT(CASE WHEN rating < 4 THEN 1 END)) AS ratio FROM restaurant
WHERE LOWER(city_name) = LOWER('New York');
Gold Result:
+------+
|    2 |
+------+

Rating: Perfect

-------------------
Test #124
DB: Restaurant
-------------------
Quesiton: What is the ratio of restaurants serving vegan food to restaurants serving non-vegan food in San Francisco? Match food_type case insensitively

Generated Query: SELECT CAST(COUNT(CASE WHEN LOWER(food_type) = 'vegan' THEN 1 END) AS FLOAT) / (SELECT COUNT(*) FROM restaurant WHERE LOWER(city_name) = 'san francisco' AND LOWER(food_type) != 'vegan')
FROM restaurant WHERE LOWER(city_name) = 'san francisco';
Genrated Result:
+------+
|  0.5 |
+------+

Gold Query: SELECT CAST(SUM(CASE WHEN LOWER(restaurant.food_type) LIKE '%vegan%' THEN 1 ELSE 0 END) AS DOUBLE) / NULLIF(SUM(CASE WHEN NOT LOWER(restaurant.food_type) LIKE '%vegan%' THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant WHERE LOWER(LOWER(restaurant.city_name)) LIKE LOWER('%san francisco%');
Gold Result:
+------+
|  0.5 |
+------+

Rating: Perfect


-------------------
Test #125
DB: Restaurant
-------------------
Question: What is the ratio of Italian restaurants out of all restaurants in Los Angeles?

Generated Query: SELECT CAST(COUNT(CASE WHEN r.food_type = 'italian' THEN 1 END) AS FLOAT) / COUNT(*) AS ratio
FROM restaurant r WHERE r.city_name = 'los angeles';
Generated Result: 
ERROR 1365 (HY000): division by zero

Rating: Bad

-------------------
Test #126
DB: Restaurant
-------------------
Question: What cities have more than one restaurants with the same name, and how many of them are there? Return the city name, restaurant name, and restaurant count

Generated Query: SELECT r.city_name, r.name, COUNT(l.restaurant_id) AS restaurant_count
FROM restaurant r JOIN location l ON r.id = l.restaurant_id GROUP BY r.city_name, r.name HAVING COUNT(l.restaurant_id) > 1;
Generated Result:
+-------+-------------------+------+
| Miami | The Seafood Shack |    2 |
+-------+-------------------+------+

Gold Query: SELECT r.city_name, r.name, COUNT(r.id) AS restaurant_count FROM restaurant AS r GROUP BY r.city_name, r.name HAVING COUNT(r.id) > 1;
Gold Result: 
+-------+-------------------+------+
| Miami | The Seafood Shack |    2 |
+-------+-------------------+------+

Rating: Perfect

-------------------
Test #127
DB: Restaurant
-------------------
Question: What is the average rating of restaurants that serve Mexican food in each city?

Generated Query: SELECT location.city_name, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(restaurant.food_type) LIKE
'%mexican%' GROUP BY location.city_name;
Generated Result:
+---------------+------+
| San Francisco |  4.1 |
+---------------+------+

Gold Query: SELECT location.city_name, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(restaurant.food_type) LIKE '%mexican%' GROUP BY location.city_name;
Gold Result:
+---------------+------+
| San Francisco |  4.1 |
+---------------+------+

Rating: Perfect

-------------------
Test #128
DB: Restaurant
-------------------
Question: What is the average rating of restaurants in each region?

Generated Query: SELECT g.region, AVG(r.rating) AS average_rating FROM restaurant r JOIN location l ON r.id = l.restaurant_id
JOIN geographic g ON l.city_name = g.city_name GROUP BY g.region;
Generated Result: 
+------------+------+
| California | 4.15 |
|   New York |  4.3 |
|    Florida |  4.5 |
+------------+------+

Gold Query: SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM geographic JOIN 
restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region;
Gold Result:
+------------+------+
| California | 4.15 |
|   New York |  4.3 |
|    Florida |  4.5 |
+------------+------+

Rating: Perfect

-------------------
Test #129
DB: Restaurant
-------------------
Question: How many restaurants serve Italian food in each region?

Generated Query: SELECT g.region, COUNT(r.id) AS num_restaurants FROM restaurant r
JOIN location l ON r.id = l.restaurant_id JOIN geographic g ON l.city_name = g.city_name WHERE LOWER(r.food_type) = 'italian'
GROUP BY g.region;
Generated Result:
+------------+------+
| California |    1 |
|   New York |    1 |
+------------+------+

Gold Query: SELECT geographic.region, COUNT(restaurant.id) AS number_of_restaurants FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name WHERE LOWER(restaurant.food_type) LIKE '%italian%' GROUP BY geographic.region ORDER BY number_of_restaurants DESC;
Gold Result:
+------------+------+
| California |    1 |
|   New York |    1 |
+------------+------+

Rating: Perfect

-------------------
Test #130
DB: Restaurant
-------------------
Question: How many restaurants are there in each region?

Generated Query: SELECT g.region, COUNT(l.restaurant_id) AS 
num_restaurants FROM location l JOIN geographic g ON l.city_name = g.city_name GROUP BY g.region;
Generated Result:
+------------+------+
| California |    6 |
|   New York |    3 |
|    Florida |    2 |
+------------+------+

Gold Query: SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants
FROM geographic JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY CASE WHEN number_of_restaurants IS NULL THEN 1 ELSE 0 END DESC, number_of_restaurants DESC;SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic LEFT JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY CASE WHEN number_of_restaurants IS NULL THEN 1 ELSE 0 END DESC, number_of_restaurants DESC;
Gold Result:
+------------+------+
| California |    6 |
|   New York |    3 |
|    Florida |    2 |
+------------+------+

Rating: Perfect

-------------------
Test #131
DB: Restaurant
-------------------
Question: Which city has the highest-rated restaurant?

Generated Query: SELECT r.city_name FROM restaurant r ORDER BY r.rating DESC LIMIT 1;
Generated Result:
+----------+
| New York |
+----------+

Gold Query: SELECT DISTINCT restaurant.city_name FROM restaurant WHERE rating = (SELECT MAX(rating) FROM restaurant);
Gold Result: 
+----------+
| New York |
+----------+

Rating: Perfect

-------------------
Test #132
DB: Restaurant
-------------------
Question: What's the name and rating of all the restaurants that have a rating greater than 4 and are located in the city of New York?

Generated Query: SELECT r.name, r.rating FROM restaurant r WHERE LOWER(r.city_name) = 'new york' AND r.rating > 4;
Generated Result:
+-----------------+------+
| The Pizza Place |  4.7 |
|  The Ramen Shop |  4.3 |
+-----------------+------+

Gold Query: SELECT restaurant.name, restaurant.rating FROM restaurant WHERE restaurant.rating > 4 AND LOWER(restaurant.city_name) LIKE LOWER('%New York%');
Gold Result:
+-----------------+------+
| The Pizza Place |  4.7 |
|  The Ramen Shop |  4.3 |
+-----------------+------+

-------------------
Test #133
DB: Restaurant
-------------------
Question: What's the name and food type of all the restaurants located on Market St in San Francisco?

Generated Query: SELECT r.name, r.food_type FROM restaurant r 
WHERE LOWER(r.city_name) = 'san francisco' AND r.city_name IN (SELECT city_name FROM location WHERE street_name = 'market st');
Generated Result:
Empty Set

Gold Query: SELECT restaurant.name, restaurant.food_type FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(location.street_name) LIKE LOWER('%Market St%') AND LOWER(location.city_name) LIKE LOWER('%San Francisco%');
Gold Result:
+----------------------+---------+
| The Tacos & Burritos | Mexican |
+----------------------+---------+

Rating: Bad

-------------------
Test #134
DB: Restaurant
-------------------
Question: What are the names of the restaurants that serve Italian food?

Generated Query: SELECT r.name FROM restaurant r WHERE LOWER(r.food_type) = 'italian';
Generated Result:
+-----------------+
| The Pasta House |
| The Pizza Place |
+-----------------+

Gold Query: SELECT restaurant.name FROM restaurant WHERE LOWER(LOWER(restaurant.food_type)) LIKE LOWER('%italian%');
Gold Result:
+-----------------+
| The Pasta House |
| The Pizza Place |
+-----------------+

Rating: Perfect


-------------------
Test #135
DB: Restaurant
-------------------
Question: What are the names of the restaurants in Los Angeles that have a rating higher than 4?

Generated Query: SELECT r.name FROM restaurant r WHERE LOWER(r.city_name) = 'los angeles' AND r.rating > 4;
Generated Result:
+-----------------+
| The Pasta House |
|   The Sushi Bar |
+-----------------+

Gold Query: SELECT DISTINCT restaurant.name, CASE WHEN restaurant.name IS NULL THEN 1 ELSE 0 END AS name_null_flag
FROM restaurant  WHERE LOWER(restaurant.city_name) LIKE LOWER('%Los Angeles%') 
AND restaurant.rating > 4  ORDER BY name_null_flag, restaurant.name;
Gold Result:
+-----------------+------+
| The Pasta House |    0 |
|   The Sushi Bar |    0 |
+-----------------+------+

Rating: Perfect

-------------------
Test #136
DB: Scholar
-------------------
Question: What is the total number of papers published per year?

Generated Query: SELECT p.year AS "year", COUNT(p.paperid) AS "total_papers" FROM paper p GROUP BY p.year;
Generated Result:
+------+------+
| 2020 |    3 |
| 2019 |    2 |
+------+------+

Gold Query: SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY CASE WHEN paper.year IS NULL THEN 1 ELSE 0 END, paper.year;
Gold Result:
+------+------+
| 2019 |    2 |
| 2020 |    3 |
+------+------+

Rating: Perfect


-------------------
Test #137
DB: Scholar
-------------------
Question: What is the total number of papers published in each year?

Generated Queries: SELECT p.year AS "year", COUNT(p.paperid) AS "total_papers" FROM paper p GROUP BY p.year;
Generated Result: 
+------+------+
| 2020 |    3 |
| 2019 |    2 |
+------+------+

Gold Query: SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY CASE WHEN paper.year IS NULL THEN 1 ELSE 0 END, paper.year;
Gold Result:
+------+------+
| 2019 |    2 |
| 2020 |    3 |
+------+------+

Rating: Perfect

-------------------
Test #138
DB: Scholar
-------------------
Question: What is the total number of papers associated with each dataset?

Generated Query: SELECT d.datasetname AS "dataset", COUNT(p.paperid) AS "total_papers" FROM paper p JOIN paperdataset pd ON p.paperid = pd.paperid JOIN dataset d ON pd.datasetid = d.datasetid GROUP
BY d.datasetname;
Generated Result:
+---------------------------+------+
| Machine Learning Datasets |    2 |
|       Climate Change Data |    2 |
|     Social Media Analysis |    1 |
|         COVID-19 Research |    1 |
+---------------------------+------+

Gold Query: SELECT dataset.datasetname, COUNT(paperdataset.paperid) AS total_papers FROM paperdataset JOIN dataset ON paperdataset.datasetid = dataset.datasetid GROUP BY dataset.datasetname;
Gold Result: 
+---------------------------+------+
| Machine Learning Datasets |    2 |
|       Climate Change Data |    2 |
|     Social Media Analysis |    1 |
|         COVID-19 Research |    1 |
+---------------------------+------+

Rating: Perfect

-------------------
Test #139
DB: Scholar
-------------------
Question: How many keyphrases are associated with each paper?

Generated Query: SELECT dataset.datasetname, COUNT(paperdataset.paperid) AS 
total_papers FROM paperdataset JOIN dataset ON paperdataset.datasetid = dataset.datasetid GROUP BY dataset.datasetname;
Generated Result:
+---------------------------+------+
| Machine Learning Datasets |    2 |
|       Climate Change Data |    2 |
|     Social Media Analysis |    1 |
|         COVID-19 Research |    1 |
+---------------------------+------+

Gold Query: SELECT p.title, COUNT(pk.keyphraseid) AS num_keyphrases FROM paper AS p JOIN paperkeyphrase AS pk ON p.paperid = pk.paperid GROUP BY p.title ORDER BY num_keyphrases DESC;
Gold Result:
+----------------------------------------------+------+
|               Social Media and Mental Health |    2 |
|  Machine Learning in Tackling Climate Change |    2 |
|       A Study on Machine Learning Algorithms |    1 |
| The Effects of Climate Change on Agriculture |    1 |
|                   COVID-19 Impact on Society |    1 |
+----------------------------------------------+------+

Rating: Good

-------------------
Test #140
DB: Scholar
-------------------
Question: How many authors have published more than 2 papers?

Generated Query: SELECT COUNT(DISTINCT w.authorid) AS "num_authors" FROM writes w GROUP BY w.paperid HAVING COUNT(w.paperid) > 2;
Generated Result:
+------+
|    3 |
|    6 |
|    4 |
+------+

Gold Query: SELECT COUNT(*) AS number_of_authors FROM (SELECT writes.authorid FROM writes GROUP BY writes.authorid HAVING COUNT(writes.paperid) > 2) AS subquery;
Gold Result:
+------+
|    2 |
+------+

Rating: Bad

-------------------
Test #141
DB: Scholar
-------------------
Question: Which papers have the highest number of authors, ordered by the number of authors in descending order?

Generated Query: SELECT COUNT(DISTINCT w.authorid) AS num_authors FROM writes w GROUP BY w.authorid HAVING COUNT(w.paperid) > 2;
Generated Result:
+------+
|    2 |
|    4 |
|    1 |
|    5 |
|    3 |
+------+

Gold Query: SELECT paper.paperid, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY paper.paperid ORDER BY CASE WHEN num_authors IS NULL THEN 1 ELSE 0 END DESC, num_authors DESC;SELECT paper.title, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY paper.title ORDER BY CASE WHEN num_authors IS NULL THEN 1 ELSE 0 END DESC, num_authors DESC;SELECT paper.paperid, paper.title, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY paper.paperid, paper.title ORDER BY CASE WHEN num_authors IS NULL THEN 1 ELSE 0 END DESC, num_authors DESC;
Gold Result:
+----------------------------------------------+------+
| The Effects of Climate Change on Agriculture |    6 |
|                   COVID-19 Impact on Society |    4 |
|       A Study on Machine Learning Algorithms |    3 |
|  Machine Learning in Tackling Climate Change |    2 |
|               Social Media and Mental Health |    1 |
+----------------------------------------------+------+

Rating: Bad

-------------------
Test #142
DB: Scholar
-------------------
Question: What is the total number of keyphrases associated with each paper, ordered by the paper ID in ascending order?

Generated Query: SELECT pk.paperid, COUNT(pk.keyphraseid) AS num_keyphrases FROM paperkeyphrase AS pk GROUP BY pk.paperid ORDER BY pk.paperid ASC;
Generated Result:
+------+------+
|    1 |    1 |
|    2 |    1 |
|    3 |    2 |
|    4 |    1 |
|    5 |    2 |
+------+------+

Gold Query: SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS total_keyphrases FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY CASE WHEN paperkeyphrase.paperid IS NULL THEN 1 ELSE 0 END, paperkeyphrase.paperid ASC;
Gold Result:
+------+------+
|    1 |    1 |
|    2 |    1 |
|    3 |    2 |
|    4 |    1 |
|    5 |    2 |
+------+------+

Rating: Perfect

-------------------
Test #143
DB: Scholar
-------------------
Question: What are the titles of the papers published in the year 2020, ordered alphabetically?

Generated Query: SELECT p.title FROM paper AS p WHERE p.year = 2020 ORDER BY p.title ASC;
Generated Result:
+----------------------------------------------+
|       A Study on Machine Learning Algorithms |
|                   COVID-19 Impact on Society |
| The Effects of Climate Change on Agriculture |
+----------------------------------------------+

Gold Query: SELECT paper.title FROM paper WHERE paper.year = 2020 ORDER BY CASE WHEN paper.title IS NULL THEN 1 ELSE 0 END, paper.title ASC;
Gold Result:
+----------------------------------------------+
|       A Study on Machine Learning Algorithms |
|                   COVID-19 Impact on Society |
| The Effects of Climate Change on Agriculture |
+----------------------------------------------+

Rating: Perfect

-------------------
Test #144
DB: Scholar
-------------------
Question: What are the names of the journals in the database, ordered by the length of the journal name from shortest to longest?

Generated Query: SELECT j.journalname FROM journal AS j ORDER BY LENGTH(j.journalname) ASC;
Generated Result:
+----------------------------------------------------------------+
|                                                         Nature |
|                                                        Science |
|                         International Journal of Mental Health |
| IEEE Transactions on Pattern Analysis and Machine Intelligence |
+----------------------------------------------------------------+

Gold Query: SELECT journal.journalname FROM journal ORDER BY CASE WHEN LENGTH(journal.journalname) IS NULL THEN 1 ELSE 0 END, LENGTH(journal.journalname) ASC;
Gold Result:
+----------------------------------------------------------------+
|                                                         Nature |
|                                                        Science |
|                         International Journal of Mental Health |
| IEEE Transactions on Pattern Analysis and Machine Intelligence |
+----------------------------------------------------------------+

Rating: Perfect

-------------------
Test #145
DB: Scholar
-------------------
Question: For each paper that cites other papers, how many other papers does it cite? Sort by the number of papers cited in descending order

Generated Query: SELECT p.numcitedby FROM paper AS p JOIN cite AS c ON p.paperid = c.citingpaperid GROUP BY p.paperid ORDER BY COUNT(p.paperid) DESC;
Generated Result:
ERROR 20301 (HY000): invalid input: missing FROM-clause entry for table 'p'

Rating: Bad

-------------------
Test #146
DB: Scholar
-------------------
Question: What is the ratio of papers that have more than 1 keyphrases to papers that have 1 keyphrase?

Generated Query: SELECT (SUM(CASE WHEN COUNT(DISTINCT pk.keyphraseid) > 1 THEN 1 ELSE 0 END) * 1.0) / SUM(CASE WHEN COUNT(DISTINCT pk.keyphraseid) = 1 THEN 1 ELSE 0 END) AS ratio FROM paper AS p JOIN
paperkeyphrase AS pk ON p.paperid = pk.paperid;
Generated Result:
ERROR 1149 (HY000): SQL syntax error: aggregate function count calls cannot be nested

Rating: Bad

-------------------
Test #147
DB: Scholar
-------------------
Quesiton: What is the ratio of papers that have been cited by 2 or more papers to papers that have been cited by less than 2 papers?

Generated Query: SELECT COUNT(CASE WHEN numcitedby IS NOT NULL AND numcitedby >= 2 THEN paperid END) /
COUNT(DISTINCT CASE WHEN numcitedby < 2 OR numcitedby IS NULL THEN paperid ELSE NULL END) FROM paper;
Generated Result:
+------+
|    4 |
+------+


Gold Query: SELECT COUNT(CASE WHEN paper.numcitedby > 1 THEN 1 END) /  IF(COUNT(CASE WHEN paper.numcitedby < 2 THEN 1 END) = 0, 1,
COUNT(CASE WHEN paper.numcitedby < 2 THEN 1 END)) AS ratio FROM paper;
Gold Result:
+------+
|    4 |
+------+

Rating: Perfect

-------------------
Test #148
DB: Scholar
-------------------
Question: What is the ratio of papers published in the year 2020 to the total number of papers in the database?

Generated Query: SELECT COUNT(CASE WHEN year = 2020 THEN paperid END) * 1.0 / COUNT(paperid)
FROM paper;
Generated Result: 
+-----------+
| 0.6000000 |
+-----------+

Gold Query: SELECT ROUND(COUNT(CASE WHEN paper.year = 2020 THEN 1 END) / IF(COUNT(paper.paperid) = 0, 1, COUNT(paper.paperid)), 4
) AS ratio
FROM paper;
Gold Result:
+------+
|  0.6 |
+------+

Rating: Perfect

-------------------
Test #149
DB: Scholar
-------------------
Question: What is the ratio of authors who have written 3 or more papers to authors who have written less than 3 papers?

Generated Query: SELECT SUM(CASE WHEN write_count >= 3 THEN 1 ELSE 0 END) AS num_authors_three_papers, SUM(CASE WHEN write_count < 3 THEN 1 ELSE 0 END) AS num_authors_less_than_three_papers
FROM (SELECT authorid, COUNT(paperid) as write_count FROM writes GROUP BY authorid) t;
Generated Result:
+------+------+
|    2 |    7 |
+------+------+

Gold Query: SELECT CAST(COUNT(DISTINCT CASE WHEN paper_count >= 3 THEN subquery.authorid END) AS DOUBLE) / NULLIF(COUNT(DISTINCT CASE WHEN paper_count < 3 THEN subquery.authorid END), 0) AS ratio FROM (SELECT writes.authorid, COUNT(writes.paperid) AS paper_count FROM writes GROUP BY writes.authorid) AS subquery;
Gold Result:
+--------+
| 0.2857 |
+--------+

Rating: Perfect

-------------------
Test #150
DB: Scholar
-------------------
Question: What is the proportion of papers that belong to more than 1 dataset to papers that belong to 1 dataset?

Generated Query: SELECT CAST(SUM(CASE WHEN COUNT(DISTINCT t2.datasetid) > 1 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN COUNT(DISTINCT
t2.datasetid) = 1 THEN 1 ELSE 0 END), 0) FROM writes AS t1 INNER JOIN paperdataset AS t2 ON t1.paperid = t2.paperid;
Generated Result:
ERROR 1149 (HY000): SQL syntax error: aggregate function count calls cannot be nested

Rating: Bad

-------------------
Test #151
DB: Scholar
-------------------
Question: Which papers are associated with the keyphrase "Machine Learning"?

Generated Query: SELECT t3.paperid FROM keyphrase AS t1 INNER JOIN paperkeyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid INNER JOIN paper AS t3 ON
t2.paperid = t3.paperid WHERE t1.keyphrasename = "Machine Learning";
Generated Result: 
+------+
|    1 |
|    5 |
+------+

Gold Query: SELECT paper.title, paper.paperid FROM paper JOIN paperkeyphrase ON paper.paperid =
paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE LOWER(keyphrase.keyphrasename) LIKE LOWER('%Machine Learning%');
Gold Result:
+---------------------------------------------+------+
|      A Study on Machine Learning Algorithms |    1 |
| Machine Learning in Tackling Climate Change |    5 |
+---------------------------------------------+------+

Rating: Perfect

-------------------
Test #152
DB: Scholar
-------------------
Question: Which authors have published the most papers, ordered by the number of papers they have published in descending order?

Generated Query: SELECT t1.authorname
FROM writes AS t1 INNER JOIN author AS t2 ON t1.authorid = t2.authorid WHERE t1.authorid IN (SELECT t3.authorid
FROM writes AS t3 GROUP BY t3.authorid ORDER BY COUNT(t3.paperid) DESC LIMIT 1);
Generated Result: ERROR 1064 (HY000): SQL parser error: table "writes" does not exist

Rating: Bad

-------------------
Test #153
DB: Scholar
-------------------
Question: What is the total number of unique keyphrases associated with papers published in the journal with "IEEE Transactions" in its name?

Generated Query: SELECT COUNT(DISTINCT kp.keyphrasename) FROM paper p JOIN journal j ON p.journalid = j.journalid
JOIN paperkeyphrase pkp ON p.paperid = pkp.paperid JOIN keyphrase kp ON pkp.keyphraseid = kp.keyphraseid
WHERE j.journalname LIKE '%IEEE Transactions%';
Generated Result:
+------+
|    2 |
+------+

Gold Query: SELECT COUNT(DISTINCT paperkeyphrase.keyphraseid) AS total_keyphrases FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid WHERE LOWER(journal.journalname) LIKE LOWER('%IEEE Transactions%');
Gold Result:
+------+
|    2 |
+------+

-------------------
Test #154
DB: Scholar
-------------------
Question: What is the total number of papers published in each journal, ordered by the journal name?

Generated Query: SELECT j.journalname, COUNT(p.paperid) AS total_papers FROM paper p JOIN journal j ON p.journalid = j.journalid
GROUP BY j.journalname ORDER BY j.journalname;
Generated Result:
+----------------------------------------------------------------+------+
| IEEE Transactions on Pattern Analysis and Machine Intelligence |    2 |
|                         International Journal of Mental Health |    1 |
|                                                         Nature |    1 |
|                                                        Science |    1 |
+----------------------------------------------------------------+------+

Gold Query: SELECT journal.journalname, COUNT(DISTINCT paper.paperid) AS total_papers FROM paper JOIN journal ON paper.journalid = journal.journalid GROUP BY journal.journalname ORDER BY CASE WHEN journal.journalname IS NULL THEN 1 ELSE 0 END, journal.journalname;
Gold Result:
+----------------------------------------------------------------+------+
| IEEE Transactions on Pattern Analysis and Machine Intelligence |    2 |
|                         International Journal of Mental Health |    1 |
|                                                         Nature |    1 |
|                                                        Science |    1 |
+----------------------------------------------------------------+------+


Rating: Perfect

-------------------
Test #155
DB: Scholar
-------------------
Quesiton: How many papers cite each paper in the dataset named "COVID-19 Research"?

Generated Query: SELECT p.paperid, COUNT(c.citingpaperid) AS num_citations FROM paper p JOIN cite c ON p.paperid = c.citedpaperid
JOIN paperdataset pd ON p.paperid = pd.paperid JOIN dataset d ON pd.datasetid = d.datasetid
WHERE d.datasetname = "COVID-19 Research" GROUP BY p.paperid;
Generated Result: 
+------+------+
|    4 |    2 |
+------+------+

Gold Query: SELECT paperdataset.paperid, COUNT(cite.citedpaperid) AS citation_count 
FROM paperdataset JOIN cite ON paperdataset.paperid = cite.citedpaperid WHERE paperdataset.datasetid = (SELECT datasetid FROM dataset WHERE LOWER(datasetname) LIKE LOWER('%COVID-19 Research%')) GROUP BY paperdataset.paperid ORDER BY CASE WHEN citation_count IS NULL THEN 1 ELSE 0 END DESC, citation_count DESC;SELECT p.title, COUNT(c.citingpaperid) AS num_citing_papers FROM paper AS p JOIN paperdataset AS pd ON p.paperid = pd.paperid JOIN cite AS c ON p.paperid = c.citedpaperid JOIN dataset AS d ON pd.datasetid = d.datasetid WHERE d.datasetname = 'COVID-19 Research' GROUP BY p.title ORDER BY num_citing_papers DESC;
Gold Result:
+----------------------------+------+
| COVID-19 Impact on Society |    2 |
+----------------------------+------+

Rating: Bad

-------------------
Test #156
DB: Scholar
-------------------
Question: What is the name of the venue where the paper with paper ID 2 was published, and how many papers were published in total in that venue?

Generated Query: SELECT v.venuename, COUNT(p.paperid) AS total_papers_published FROM paper p JOIN venue v ON p.venueid = v.venueid
WHERE p.paperid = 2 AND v.venuename ILIKE "exact name of the venue" GROUP BY v.venuename;
Generated Result:
Empty Set

Rating: Bad

-------------------
Test #157
DB: Scholar
-------------------
Quesiton: What are the names of the authors who wrote the paper with the title "The Effects of Climate Change on Agriculture"?

Generated Query: SELECT a.authorname FROM paper p JOIN writes w ON p.paperid = w.paperid JOIN author a ON w.authorid = a.authorid
WHERE p.title ILIKE "The Effects of Climate Change on Agriculture";
Generated Result:
+------------------+
|    Emily Johnson |
|    Michael Brown |
|       John Smith |
|     Robert Moore |
|     Linda Taylor |
| William Anderson |
+------------------+

Gold Query: SELECT author.authorname FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.title = 'The Effects of Climate Change on Agriculture';
Gold Result:
+------------------+
|    Emily Johnson |
|    Michael Brown |
|       John Smith |
|     Robert Moore |
|     Linda Taylor |
| William Anderson |
+------------------+

Rating: Perfect


-------------------
Test #158
DB: Scholar
-------------------
Question: How many papers were published in the journal "nature" in the year 2020?

Generated Query: SELECT COUNT(p.paperid) FROM paper p JOIN journal j ON p.journalid = j.journalid
WHERE j.journalname ILIKE "%nature%" AND p.year = 2020;
Generated Result:
+------+
|    1 |
+------+

Gold Query: SELECT COUNT(paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid WHERE paper.year = 2020 AND LOWER(journal.journalname) LIKE LOWER('%nature%');
Gold Result:
+------+
|    1 |
+------+

Rating: Perfect

-------------------
Test #159
DB: Scholar
-------------------
Question: How many papers are associated with the keyphrase "machine learning" and were published in the journal named "IEEE Transactions on Pattern Analysis and Machine Intelligence"?

Generated Query: SELECT COUNT(DISTINCT p.paperid) FROM paper p JOIN journal j ON p.journalid = j.journalid
JOIN paperkeyphrase pk ON p.paperid = pk.paperid JOIN keyphrase k ON pk.keyphraseid = k.keyphraseid
WHERE LOWER(k.keyphrasename) LIKE '%machine learning%' AND j.journalname = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';
Generated Result:
+------+
|    2 |
+------+

Gold Query: SELECT COUNT(DISTINCT paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE LOWER(keyphrase.keyphrasename) LIKE LOWER('%machine learning%') AND journal.journalname = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';
Gold Result:
+------+
|    2 |
+------+

Rating: Perfect

-------------------
Test #160
DB: Scholar
-------------------
Question: How many authors wrote papers that were published in the journal "Science" in the year 2020?

Generated Query: SELECT COUNT(DISTINCT w.authorid) FROM writes w JOIN paper p ON w.paperid = p.paperid
JOIN journal j ON p.journalid = j.journalid WHERE LOWER(j.journalname) LIKE '%science%' AND p.year = 2020;
Generated Result:
+------+
|    4 |
+------+

Gold Query: SELECT COUNT(DISTINCT writes.authorid) AS number_of_authors FROM writes JOIN paper ON writes.paperid = paper.paperid JOIN journal ON paper.journalid = journal.journalid WHERE LOWER(journal.journalname) LIKE LOWER('%Science%') AND paper.year = 2020;
Gold Result:
+------+
|    4 |
+------+

Rating: Perfect

-------------------
Test #161
DB: Yelp
-------------------
Question: How many reviews were written for businesses located in California in the last 10 months?

Generated Query: SELECT COUNT(r.rid) FROM review r JOIN business b ON r.business_id = b.business_id
WHERE SUBSTR(b.state, 1, 2) = 'CA' AND MONTH(r.month) > (MONTH(CURRENT_DATE) - 10);
Generated Result: 
ERROR 20203 (HY000): invalid argument parsedate, bad value January

Rating: Bad

-------------------
Test #162
DB: Yelp
-------------------
Question: What is the total number of check-ins on the 2 days before Saturday?

Generated Query: SELECT COUNT(c.cid)
FROM checkin c WHERE DAYNAME(STR_TO_DATE(c.day, '%Y-%m-%d')) NOT IN ('Saturday', 'Sunday') AND STR_TO_DATE(c.day, '%Y-%m-%d') = DATE_SUB(CURDATE(), INTERVAL 2 DAY);
Generated Result:
ERROR 20105 (HY000): not supported: function or operator 'dayname'

Rating: Bad

-------------------
Test #163
DB: Yelp
-------------------
Question: How many reviews were there 2 months before the review with id 3?

Generated Query: SELECT COUNT(r.rid) FROM review r JOIN review q ON r.year = q.year AND r.month = (q.month - 2) WHERE r.rid != 3;
Generated Result:
ERROR 20203 (HY000): invalid argument cast to int, bad value January

Rating: Bad

-------------------
Test #164
DB: Yelp
-------------------
Question: What was the message that came with the tip made exactly 2 months after March 2021?

Generated Query: SELECT t.text
FROM tip t WHERE STR_TO_DATE(t.month, '%Y-%m') = (STR_TO_DATE('2021-03', '%Y-%m') + INTERVAL 2 MONTH);
Generated Result:
Empty Set

Rating: Bad

-------------------
Test #165
DB: Yelp
-------------------
Question: How many months between June 2021 and December 2021 had reviews?

Generated Query: SELECT COUNT(DISTINCT STR_TO_DATE(r.month, '%Y-%m'))
FROM review r WHERE YEAR(STR_TO_DATE(r.month, '%Y-%m')) BETWEEN 2021 AND 2021;
Generated Result:
+------+
|    0 |
+------+

Gold Query: SELECT COUNT(DISTINCT MONTH) AS num_months FROM review WHERE YEAR = 2021 AND CASE MONTH WHEN 'January' THEN 1 WHEN 'February' THEN 2 WHEN 'March' THEN 3 WHEN 'April' THEN 4 WHEN 'May' THEN 5 WHEN 'June' THEN 6 WHEN 'July' THEN 7 WHEN 'August' THEN 8 WHEN 'September' THEN 9 WHEN 'October' THEN 10 WHEN 'November' THEN 11 WHEN 'December' THEN 12 END BETWEEN 6 AND 12;
Gold Result:
+------+
|    2 |
+------+

Rating: Bad

-------------------
Test #166
DB: Yelp
-------------------
Question: Which neighbourhoods have the highest number of businesses, and how many businesses are located in each neighbourhood?

Generated Query: SELECT n.neighbourhood_name, COUNT(business_id) AS num_businesses
FROM business b JOIN neighbourhood n ON b.business_id = n.id GROUP BY n.neighbourhood_name ORDER BY num_businesses DESC;
Generated Result: 
ERROR 20301 (HY000): invalid input: ambiguouse column reference to 'business_id'

Rating: Perfect

-------------------
Test #167
DB: Yelp
-------------------
Question: What is the total number of check-ins for each day of the week for the business with ID "abc123"?

Generated Query: SELECT c.day, SUM(c.count) FROM checkin c JOIN business b ON c.business_id = b.business_id
WHERE b.business_id = "abc123" GROUP BY c.day;
Generated Result:
+---------+------+
|  Monday |   10 |
| Tuesday |   13 |
+---------+------+

Gold Query: SELECT neighbourhood.neighbourhood_name, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY neighbourhood.neighbourhood_name ORDER BY business_count DESC;SELECT neighbourhood.id, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY neighbourhood.id ORDER BY business_count DESC;SELECT neighbourhood.neighbourhood_name, neighbourhood.id, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY neighbourhood.neighbourhood_name, neighbourhood.id ORDER BY business_count DESC;
Gold Result:
+---------+------+
| Tuesday |   13 |
|  Monday |   10 |
+---------+------+

Rating: Perfect

-------------------
Test #168
DB: Yelp
-------------------
Quesiton: What is the total count of check-ins for each business id?

Generated Query: SELECT c.business_id, SUM(c.count) AS total_checkins FROM checkin c
GROUP BY c.business_id; 
Generated Result: 
+--------+------+
| abc123 |   23 |
| def456 |   34 |
| ghi789 |   23 |
| jkl012 |   51 |
| mno345 |   49 |
| xyz123 |   10 |
| uvw456 |    2 |
+--------+------+

Gold Query: SELECT checkin.business_id, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.business_id ORDER BY total_checkins DESC;
Gold Result:
+--------+------+
| jkl012 |   51 |
| mno345 |   49 |
| def456 |   34 |
| abc123 |   23 |
| ghi789 |   23 |
| xyz123 |   10 |
| uvw456 |    2 |
+--------+------+

Rating: Perfect

-------------------
Test #169
DB: Yelp
-------------------
Quesiton: Return the name and average rating for each business in new york

Generated Query: SELECT b.name, AVG(r.rating) AS avg_rating FROM business b JOIN review r ON b.business_id = r.business_id
WHERE b.city = 'new york' GROUP BY b.name;
Generated Result: 
Empty Set

Rating: Bad

-------------------
Test #170
DB: Yelp
-------------------
Question: How many check-ins occurred on each day of the week?

Generated Query: SELECT c.day, COUNT(*) AS count FROM checkin c GROUP BY c.day;
Generated Result:
+-----------+------+
|    Monday |    2 |
|   Tuesday |    2 |
| Wednesday |    2 |
|  Thursday |    2 |
|    Friday |    2 |
|  Saturday |    2 |
+-----------+------+

Gold Query: SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.day ORDER BY total_checkins DESC;
Gold Result:
+-----------+------+
|    Friday |   49 |
|  Thursday |   38 |
|   Tuesday |   33 |
|  Saturday |   31 |
| Wednesday |   29 |
|    Monday |   12 |
+-----------+------+

Rating: Bad

-------------------
Test #171
DB: Yelp
-------------------
Quesiton: Please provide a list of business names in New York and their average ratings ordered by the highest average rating first.

Generated Query: SELECT b.name, AVG(r.rating) AS avg_rating FROM business b JOIN review r ON b.business_id = r.business_id
WHERE b.city = 'New York' GROUP BY b.name
ORDER BY avg_rating DESC;
Generated Result:
+-----------------+--------------------+
|   Lily’s Bakery |                4.6 |
|    Sashays Cafe |                  4 |
|    Peter’s Cafe | 3.7750000000000004 |
+-----------------+--------------------+

Gold Query: SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE LOWER(business.city) LIKE LOWER('%New York%') GROUP BY business.name, business.business_id ORDER BY average_rating DESC;
Gold Result:
+-----------------+--------------------+
|   Lily’s Bakery |                4.6 |
|    Sashays Cafe |                  4 |
|    Peter’s Cafe | 3.7750000000000004 |
+-----------------+--------------------+

Rating: Perfect

-------------------
Test #172
DB: Yelp
-------------------
Question: What is the latitude and longitude of the business with the highest rating?

Generated Query: SELECT b.latitude, b.longitude FROM (SELECT r.business_id, AVG(r.rating) AS avg_rating FROM 
review r GROUP BY r.business_id ORDER BY avg_rating DESC LIMIT 1) t JOIN business b ON t.business_id = b.business_id;
Genereated Result:
+------------+--------------+
| 37.7749295 | -122.4194155 |
+------------+--------------+

Gold Query: SELECT business.latitude, business.longitude FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id, business.latitude, business.longitude ORDER BY CASE WHEN AVG(review.rating) IS NULL THEN 1 ELSE 0 END DESC, AVG(review.rating) DESC LIMIT 1;
Gold Result:
+------------+--------------+
| 37.7749295 | -122.4194155 |
+------------+--------------+

Rating: Perfect

-------------------
Test #173
DB: Yelp
-------------------
Quesiton: What are the top 3 businesses in terms of review count?

Generated Query: SELECT b.business_id, b.review_count FROM business AS b ORDER BY b.review_count DESC LIMIT 3;
Generated Result: 
+--------+------+
| ghi789 |    5 |
| jkl012 |    4 |
| def456 |    4 |
+--------+------+

Gold Query: SELECT business.name, business.review_count FROM business ORDER BY business.review_count DESC LIMIT 3;
Gold Result:
+-----------------+--------+------+
|    Anna’s Diner | ghi789 |    5 |
|   Mark’s Bistro | jkl012 |    4 |
|    Peter’s Cafe | def456 |    4 |
+-----------------+--------+------+

Rating: Perfect

-------------------
Test #174
DB: Yelp
-------------------
Question: What are the names of the businesses in the database, ordered alphabetically?

Generated Query: SELECT b.name FROM business AS b ORDER BY b.name ASC;
Generated Result:
+-----------------+
|    Anna’s Diner |
|    Izza’s Pizza |
|     Joe’s Pizza |
|   Lily’s Bakery |
|   Mark’s Bistro |
|    Peter’s Cafe |
|    Sashays Cafe |
+-----------------+

Gold Query: SELECT business.name FROM business ORDER BY CASE WHEN business.name IS NULL THEN 1 ELSE 0 END, business.name ASC;
Gold Result:
+-----------------+
|    Anna’s Diner |
|    Izza’s Pizza |
|     Joe’s Pizza |
|   Lily’s Bakery |
|   Mark’s Bistro |
|    Peter’s Cafe |
|    Sashays Cafe |
+-----------------+

Rating: Perfect

-------------------
Test #175
DB: Yelp
-------------------
Question: How many reviews were posted in each month of the year 2021, ordered by the month?

Generated Query: SELECT r.month, COUNT(*) AS review_count FROM review AS r WHERE r.year = 2021 GROUP BY r.month ORDER BY r.month ASC;
Generated Result:
+----------+------+
|    April |    2 |
| February |    1 |
|  January |    2 |
|     July |    1 |
|     June |    1 |
|    March |    1 |
|      May |    1 |
+----------+------+

Gold Query: SELECT review.month, COUNT(review.rid) AS review_count FROM yelp.review WHERE review.year = 2021 GROUP BY review.month ORDER BY STR_TO_DATE(CONCAT('1 ', review.month, ' 2021'), '%d %M %Y');
Gold Result: 
+----------+------+
|  January |    2 |
| February |    1 |
|    March |    1 |
|    April |    2 |
|      May |    1 |
|     June |    1 |
|     July |    1 |
+----------+------+

Rating: Perfect

-------------------
Test #176
DB: Yelp
-------------------
Question: What is the ratio of the number of businesses in each state to the total number of businesses in the database?

Generated Query: SELECT b.state, COUNT(*) AS state_count, 
SUM(state_count) OVER () AS total_businesses FROM business AS b GROUP BY b.state ORDER BY b.state ASC;
Generated Result:
ERROR 20301 (HY000): invalid input: column state_count does not exist

Rating: Bad

-------------------
Test #177
DB: Yelp
-------------------
Question: What is the ratio of open businesses to closed businesses in the city of San Francisco?

Generated Query: SELECT CAST(SUM(CASE WHEN b.is_open = 1 THEN 1 ELSE 0 END) AS FLOAT) / CAST(SUM(CASE WHEN b.is_open = 0 
THEN 1 ELSE 0 END) AS FLOAT) FROM business AS b WHERE b.city = 'San Francisco';
Generated Result: 
+------+
|    2 |
+------+

Gold Query: SELECT SUM(CASE WHEN business.is_open = 1 THEN 1 ELSE 0 END) / IF(SUM(CASE WHEN business.is_open = 0 THEN 1 ELSE 0 END) = 0, 1,
SUM(CASE WHEN business.is_open = 0 THEN 1 ELSE 0 END)) AS ratio FROM business
WHERE LOWER(business.city) LIKE LOWER('%san francisco%');
Gold Result: 
+------+
|    2 |
+------+

Rating: Perfect

-------------------
Test #178
DB: Yelp
-------------------
Question: What is the ratio of check-ins on weekends to check-ins on weekdays for the business named "Mark's Bistro"?

Generated Query: SELECT CAST(SUM(CASE WHEN c.day IN ('Saturday', 'Sunday') THEN 1 ELSE 0 END) AS FLOAT) /
CAST(SUM(CASE WHEN c.day IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday') THEN 1 ELSE 0 END) AS FLOAT)
FROM checkin AS c JOIN business AS b ON c.business_id = b.bid WHERE b.name = 'Mark''s Bistro';
Generated Result: 
+------+
| NULL |
+------+

Rating: Bad

-------------------
Test #179
DB: Yelp
-------------------
Question: What is the ratio of businesses in the state of California to businesses in the state of New York?

Generated Query: SELECT (COUNT(CASE WHEN T1.state = 'California' THEN 1 END) * 1.0 / COUNT(CASE WHEN T1.state = 'New York' 
THEN 1 END)) AS ratio FROM business as T1;
Generated Result:
ERROR 20301 (HY000): invalid input: Decimal128 Div by Zero: 0/0

Rating: Bad

-------------------
Test #180
DB: Yelp
-------------------
Question: How does the ratio of positive reviews (rating > 3) to negative reviews (rating < 3) vary across different categories of businesses, ordered by descending ratio?

Generated Query: SELECT c.category_name AS Category, COUNT(r.rid) / (SELECT COUNT(rid) FROM review WHERE rating < 3) AS ratio
FROM category c JOIN business b ON c.business_id = b.business_id JOIN review r ON b.business_id = r.business_id
WHERE r.rating > 3 GROUP BY c.category_name ORDER BY ratio DESC;
Generated Result:
+--------+--------------------+
|  Pizza | 1.3333333333333333 |
|   Cafe | 1.3333333333333333 |
| Bistro | 1.3333333333333333 |
|  Diner |                  1 |
| Bakery |                  1 |
+--------+--------------------+

Gold Query: SELECT  category.category_name, SUM(CASE WHEN review.rating > 3 THEN 1 ELSE 0 END) / IF(SUM(CASE WHEN review.rating < 3 THEN 1 ELSE 0 END) = 0, 1,
SUM(CASE WHEN review.rating < 3 THEN 1 ELSE 0 END)) AS ratio FROM review  JOIN category ON review.business_id = category.business_id GROUP BY category.category_name
ORDER BY ratio DESC;
Gold Result:
+--------+------+
|  Pizza |    4 |
|   Cafe |    4 |
| Bistro |    4 |
| Bakery |    3 |
|  Diner |  1.5 |
+--------+------+

Rating: Bad

-------------------
Test #181
DB: Yelp
-------------------
Question: Which users have posted reviews for businesses located in the neighbourhood of "Downtown" and how many reviews have they posted?

Generated Query: SELECT u.name AS User, COUNT(r.rid) AS Review_Count FROM users u JOIN review r ON u.user_id = r.user_id
JOIN business b ON r.business_id = b.business_id JOIN neighbourhood n ON b.business_id = n.business_id
WHERE n.neighbourhood_name = 'Downtown' GROUP BY u.name;
Generated Result:
+----------------+------+
|       John Doe |    2 |
|  David Johnson |    3 |
| Sarah Williams |    2 |
|  Michael Brown |    2 |
+----------------+------+

Gold Query: SELECT users.name, COUNT(review.rid) AS review_count FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id JOIN users ON review.user_id = users.user_id WHERE LOWER(neighbourhood.neighbourhood_name) LIKE LOWER('%Downtown%') GROUP BY users.name ORDER BY review_count DESC;
Gold Result:
+----------------+------+
|  David Johnson |    3 |
|       John Doe |    2 |
| Sarah Williams |    2 |
|  Michael Brown |    2 |
+----------------+------+

Rating: Perfect

-------------------
Test #182
DB: Yelp
-------------------
Question: What is the total number of reviews for each category in the state of "California"?

Generated Query: SELECT c.category_name AS Category, COUNT(r.rid) AS Total_Reviews FROM category c JOIN business b ON c.business_id = b.business_id
JOIN review r ON b.business_id = r.business_id WHERE b.state = 'California' GROUP BY c.category_name;
Generated Result:
Empty Set

Rating: Perfect

-------------------
Test #183
DB: Yelp
-------------------
Question: What is the total number of reviews for each business category?

Generated Query: SELECT c.category_name, COUNT(r.rid) AS total_reviews FROM category c JOIN review r ON c.business_id = r.business_id
GROUP BY c.category_name;
Generated Result:
+--------+------+
|  Pizza |    5 |
|   Cafe |    6 |
|  Diner |    5 |
| Bistro |    4 |
| Bakery |    3 |
+--------+------+

Gold Query: SELECT category.category_name, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY category.category_name ORDER BY total_reviews DESC;SELECT category.id, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY category.id ORDER BY total_reviews DESC;SELECT category.category_name, category.id, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY category.category_name, category.id ORDER BY total_reviews DESC;
Gold Result: 
+--------+------+
|   Cafe |    6 |
|  Pizza |    5 |
|  Diner |    5 |
| Bistro |    4 |
| Bakery |    3 |
+--------+------+

Rating: Perfect

-------------------
Test #184
DB: Yelp
-------------------
Question: What is the total number of check-ins for each business in the state of California?

Generated Query: SELECT b.bid, SUM(c.count) AS total_checkins FROM business b JOIN 
checkin c ON b.business_id = c.business_id WHERE b.state = 'California' GROUP BY b.bid;
Generated Result:
Empty Set

Rating: Bad

-------------------
Test #185
DB: Yelp
-------------------
Question: What are the top 2 categories of businesses with the highest average rating?

Generated Query: SELECT c.category_name, AVG(r.rating) AS avg_rating FROM category c JOIN business b ON c.business_id = b.business_id JOIN review r ON b.business_id = r.business_id GROUP BY c.category_name ORDER BY
avg_rating DESC LIMIT 2;
Generated Result:
+--------+-------+
| Bistro | 4.775 |
| Bakery |   4.6 |
+--------+-------+

Gold Query: SELECT category.category_name FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY category.category_name ORDER BY AVG(business_rating.average_rating) DESC LIMIT 2;SELECT category.id FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY category.id ORDER BY AVG(business_rating.average_rating) DESC LIMIT 2
SELECT category.category_name, category.id FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY category.category_name, category.id ORDER BY AVG(business_rating.average_rating) DESC LIMIT 2;
Gold Result:
+--------+------+
| Bistro |    4 |
| Bakery |    5 |
+--------+------+

Rating: Perfect

-------------------
Test #186
DB: Yelp
-------------------
Question: What is the total number of reviews posted in the year 2021 for businesses in the category "Cafe"?

Generated Query: SELECT COUNT(r.rid) AS total_reviews FROM category c JOIN business b ON c.business_id = b.business_id JOIN review r ON b.business_id = r.business_id WHERE b.state = 'CA' AND r.year = 2021 AND
c.category_name ILIKE '%Cafe%';
Generated Result:
+------+
|    0 |
+------+

Gold Query: SELECT COUNT(review.rid) AS total_reviews FROM review JOIN category ON review.business_id = category.business_id WHERE review.year = 2021 AND LOWER(category.category_name) LIKE LOWER('%Cafe%');
Gold Result:
+------+
|    3 |
+------+

Rating: Bad

-------------------
Test #187
DB: Yelp
-------------------
Question: What is the average rating of businesses in the city of San Francisco?

Generated Query: SELECT AVG(r.rating) AS avg_rating FROM review r JOIN business b ON r.business_id = b.bid WHERE b.city ILIKE '%San Francisco%';
Generated Result:
ERROR 20203 (HY000): invalid argument cast to int, bad value abc123

Rating: Bad

-------------------
Test #188
DB: Yelp
-------------------
Question: How many reviews were posted for each business id in the year 2021?

Generated Query: SELECT b.business_id, COUNT(r.rid) AS num_reviews FROM review r JOIN business b ON 
r.business_id = b.bid WHERE r.year = 2021 GROUP BY b.business_id;
Generated Result: ERROR 20203 (HY000): invalid argument cast to int, bad value abc123

Rating: Bad

-------------------
Test #189
DB: Yelp
-------------------
Question: How many reviews were posted by users with the name "Sarah Williams" in the month of April 2021?

Generated Query: SELECT COUNT(r.rid) AS num_reviews FROM review r JOIN users 
u ON r.user_id = u.uid WHERE u.name ILIKE '%Sarah Williams%' AND r.month ILIKE 'April' AND r.year = 2021;
Generated Result:
+------+
|    1 |
+------+

Gold Query: SELECT COUNT(*) FROM review JOIN users ON review.user_id = users.user_id WHERE LOWER(users.name) LIKE LOWER('%Sarah Williams%') AND review.month = 'April' AND review.year = 2021;
Gold Result:
+------+
|    1 |
+------+

Rating: Perfect

-------------------
Test #190
DB: Yelp
-------------------
Question: How many check-ins occurred on Mondays at businesses in the state of California?

Generated Query: SELECT COUNT(cid) FROM checkin AS c JOIN business AS b ON c.business_id = b.business_id
WHERE DAY(c.day) = 1 AND b.state = 'CALIFORNIA';
Generated Result:
ERROR 20203 (HY000): invalid argument parsedate, bad value Monday

Rating: Bad

-------------------
Test #191
DB: broker
-------------------
Question: Return the customer who made the most sell transactions on 2023-04-01. Return the id, name and number of transactions.

Generated Query: SELECT c.sbCustId, c.sbCustName, COUNT(*) AS transaction_count FROM sbCustomer AS c JOIN sbTransaction AS t ON c.sbCustId = t.sbTxCustId
WHERE t.sbTxType = 'sell' AND DATE(sbTxDateTime) = '2023-04-01' GROUP BY c.sbCustId, c.sbCustName ORDER BY transaction_count DESC
LIMIT 1;
Generated Result:
+------+------------+------+
| C002 | Jane Smith |    3 |
+------+------------+------+

Gold Query: WITH SellTransactions AS (SELECT sbTxCustId, COUNT(*) AS num_tx FROM sbTransaction WHERE CAST(sbTxDateTime AS DATE) = '2023-04-01' AND sbTxType = 'sell' GROUP BY sbTxCustId) SELECT c.sbCustId, c.sbCustName, st.num_tx FROM sbCustomer AS c JOIN SellTransactions AS st ON c.sbCustId = st.sbTxCustId ORDER BY CASE WHEN st.num_tx IS NULL THEN 1 ELSE 0 END DESC, st.num_tx DESC LIMIT 1;
Gold Result:
+------+------------+------+
| C002 | Jane Smith |    3 |
+------+------------+------+

Rating: Perfect

-------------------
Test #192
DB: Broker
-------------------
Question: What is the monthly average transaction price for successful transactions in the 1st quarter of 2023?

Generated Query: SELECT AVG(sbTxPrice) as 'avg_transaction_price' FROM sbTransaction st JOIN
sbCustomer sc ON st.sbTxCustId = sc.sbCustId WHERE YEAR(sbTxDateTime) = 2023 AND QUARTER(sbTxDateTime) = 1 AND sbTxStatus = 'success';
Generated Result:
ERROR 20105 (HY000): not supported: function or operator 'quarter'

Rating: Bad

-------------------
Test #193
DB: Broker
-------------------
Question: Lowest daily closest price for symbol `VTI` in the past 7 days

Generated Query: SELECT MIN(sbDpClose) as 'lowest_daily_close' FROM sbDailyPrice d JOIN sbTicker t ON d.sbDpTickerId = t.sbTickerId
WHERE t.sbTickerSymbol = 'VTI' AND DATE(d.sbDpDate) >= CURDATE() - INTERVAL 7 DAY;
Generated Result:
+--------+
| 206.25 |
+--------+

Gold Query: SELECT MIN(sdp.sbDpClose) AS lowest_price FROM sbDailyPrice AS sdp JOIN sbTicker AS st ON sdp.sbDpTickerId = st.sbTickerId WHERE st.sbTickerSymbol = 'VTI' AND sdp.sbDpDate >= CURRENT_DATE - INTERVAL '7' DAY;
Gold Result:
+--------+
| 206.25 |
+--------+

Rating: Perfect

-------------------
Test #194
DB: Broker
-------------------
Question: Return the customer id and the difference between their time from joining to their first transaction. Ignore customers who haven't made any transactions.

Generated Query: SELECT sc.sbCustId, TIMESTAMPDIFF(DAY, sc.sbCustJoinDate, COALESCE(st.sbTxDateTime, '9999-12-31')) as 'time_diff'
FROM sbCustomer sc LEFT JOIN sbTransaction st ON sc.sbCustId = st.sbTxCustId AND st.sbTxStatus = 'success' AND st.sbTxType = 'buy'
WHERE st.sbTxId IS NOT NULL;
Generated Result:
+------+------+
| C001 | 1186 |
| C003 |  304 |
| C003 |  304 |
| C003 |  306 |
| C003 |  790 |
| C003 |  789 |
| C004 | 1653 |
| C005 |  762 |
| C005 |  764 |
| C005 | 1250 |
| C006 |  991 |
| C007 |  149 |
| C007 |  637 |
| C008 | 1462 |
| C009 |  587 |
| C009 |  589 |
| C009 | 1079 |
| C010 | 1118 |
| C012 |   10 |
| C013 |   16 |
| C014 |    5 |
| C015 |    1 |
| C017 |    3 |
| C019 |    5 |
+------+------+

Gold Query: SELECT c.sbCustId, DATEDIFF(t.FirstTxDate, c.sbCustJoinDate) AS DaysFromJoinToFirstTransaction FROM broker.sbCustomer AS c INNER JOIN (SELECT sbTxCustId, MIN(sbTxDateTime) AS FirstTxDate FROM broker.sbTransaction GROUP BY sbTxCustId) AS t ON c.sbCustId = t.sbTxCustId;
Gold Result:
+------+------+
| C001 | 1186 |
| C002 | 1478 |
| C003 |  304 |
| C004 | 1653 |
| C005 |  762 |
| C006 |  991 |
| C007 |  148 |
| C008 | 1462 |
| C009 |  587 |
| C010 | 1118 |
| C012 |   10 |
| C013 |    8 |
| C014 |    5 |
| C015 |    1 |
| C016 |    2 |
| C017 |    3 |
| C018 |    4 |
| C019 |    5 |
+------+------+

Rating: Bad

-------------------
Test #195
DB: Broker
-------------------
Question: number of transactions by users who joined in the past 70 days

Generated Query: SELECT COUNT(DISTINCT st.sbTxId) as 'num_transactions' FROM sbCustomer sc JOIN
sbTransaction st ON sc.sbCustId = st.sbTxCustId AND TIMESTAMPDIFF(DAY, sc.sbCustJoinDate, st.sbTxDateTime) <= 70;
Generated Result:
+------+
| 11   |
+------+

Gold Query: SELECT COUNT(t.sbTxCustId) AS transaction_count FROM sbTransaction AS t JOIN sbCustomer AS c ON t.sbTxCustId = c.sbCustId WHERE c.sbCustJoinDate >= CURRENT_DATE - INTERVAL '70' DAY;
Gold Result:
+------+
| 1    |
+------+

Rating: Bad

-------------------
Test #196
DB: Derm Treatment
-------------------
Question: Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment

Generated Query: SELECT t.treatment_id, t.start_dt AS 'treatment_start_date', ae.reported_dt AS 'adverse_event_date', ae.description
FROM treatments t JOIN adverse_events ae ON t.treatment_id = ae.treatment_id AND DATEDIFF(ae.reported_dt, t.start_dt) <= 10;
Generated Result:
+------+------------+------------+----------------------------------------------------+
| 4    | 2022-04-01 | 2022-04-10 | Severe allergic reaction, hospitalization required |
| 14   | 2023-02-01 | 2023-02-05 |                                     Mild skin rash |
+------+------------+------------+----------------------------------------------------+

Gold Query: SELECT t.treatment_id, t.start_dt, ae.reported_dt, ae.description FROM adverse_events AS ae JOIN treatments AS t ON ae.treatment_id = t.treatment_id WHERE ae.reported_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '10' DAY;
Gold Result:
+------+------------+------------+----------------------------------------------------+
| 4    | 2022-04-01 | 2022-04-10 | Severe allergic reaction, hospitalization required |
| 14   | 2023-02-01 | 2023-02-05 |                                     Mild skin rash |
+------+------------+------------+----------------------------------------------------+

Rating: Perfect

-------------------
Test #197
DB: Derm Treatment
-------------------
Question: List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.

Generated Query: SELECT d.last_name, d.year_reg, t.start_dt AS 'first_treatment_date', t.treatment_id AS 'treatment_id' FROM
doctors d JOIN treatments t ON d.doc_id = t.doc_id AND DATEDIFF(t.start_dt, d.date_of_registration) <= 2 ORDER BY
year_reg DESC;
Generated Result:
ERROR 20301 (HY000): invalid input: column 'd.date_of_registration' does not exist

Rating: Bad

-------------------
Test #198
DB: Derm Treatment
-------------------
Question: what is average age of all registered male patients with private insurance currently?

Generated Query: SELECT CAST(YEAR(CURDATE()) - YEAR(p.date_of_birth) AS FLOAT) / 100 * 365.25 FROM
patients p WHERE p.gender = 'Male' AND p.ins_type = 'private' ORDER BY (CAST(YEAR(CURDATE()) - YEAR(p.date_of_birth) AS FLOAT) / 100 * 365.25) DESC;
Generated Result:
+--------+
| 160.71 |
| 131.49 |
+--------+

Gold Query: SELECT AVG(YEAR(CURRENT_DATE) - YEAR(date_of_birth)) AS avg_age FROM derm_treatment.patients WHERE gender = 'Male' AND ins_type = 'private';
Gold Result:
+------+
| 40   |
+------+

Rating: Bad

-------------------
Test #199
DB: Derm Treatment
-------------------
Question: show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.

Generated Query: SELECT t1.treatment_id, t1.start_dt, t1.end_dt, c2.start_dt AS cm_start_date, c2.end_dt AS cm_end_date FROM
treatments t1 JOIN concomitant_meds c2 ON t1.treatment_id = c2.treatment_id JOIN (SELECT treatment_id, start_dt, end_dt, CASE
WHEN TIMESTAMPDIFF(WEEK, start_dt, end_dt) <= 2 THEN TRUE ELSE FALSE END AS `within_two_weeks` FROM concomitant_meds)
c3 ON t1.treatment_id = c3.treatment_id AND c3.within_two_weeks = 'TRUE' WHERE t1.is_placebo = '1' AND c3.within_two_weeks = 'TRUE';
Generated Result:
+------+------------+------------+------------+------------+
| 7    | 2022-07-01 | 2022-12-31 | 2022-07-15 | 2022-07-21 |
+------+------------+------------+------------+------------+

Gold Query: SELECT t.treatment_id, t.start_dt AS treatment_start_date, t.end_dt AS treatment_end_date, cm.start_dt AS concomitant_med_start_date, cm.end_dt AS concomitant_med_end_date FROM derm_treatment.treatments AS t JOIN derm_treatment.concomitant_meds AS cm ON t.treatment_id = cm.treatment_id WHERE t.is_placebo = TRUE AND cm.start_dt BETWEEN t.start_dt AND DATE_ADD(t.start_dt, INTERVAL 14 DAY) ORDER BY CASE WHEN t.treatment_id IS NULL THEN 1 ELSE 0 END, t.treatment_id;
Gold Result:
+------+------------+------------+------------+------------+
| 2    | 2022-02-15 | 2022-08-14 | 2022-02-15 | 2022-03-15 |
| 7    | 2022-07-01 | 2022-12-31 | 2022-07-15 | 2022-07-21 |
+------+------------+------------+------------+------------+

Rating: Good

-------------------
Test #200
DB: Derm Treatment
-------------------
Question: How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?

Generated Query: SELECT COUNT(*) FROM (SELECT t1.treatment_id, d2.diag_name FROM treatments t1 JOIN diagnoses d2 ON t1.diag_id = d2.diag_id
WHERE (d2.diag_name LIKE '%psoriasis%') AND (t1.end_dt BETWEEN CURDATE() - INTERVAL 6 MONTH AND NOW()) AND d3.fda_appr_dt IS NOT NULL AND
EXISTS (SELECT 1 FROM drugs d4 WHERE d4.drug_id = t1.drug_id AND d3.drug_name LIKE CONCAT('%', d4.drug_name, '%'))) AS subquery;
Generated Result:
ERROR 20301 (HY000): invalid input: missing FROM-clause entry for table 'd3'

Rating: Bad

-------------------
Test #201
DB: Ewallet
-------------------
Question: What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?

Generated Query: SELECT CAST(SUM(tx_limit_daily) AS FLOAT) / COUNT(*), CAST(SUM(tx_limit_monthly) AS FLOAT) / COUNT(*)
FROM consumer_div_user_setting_snapshot WHERE snapshot_date = '2023-01-01';
Generated Result:
+------+------+
| NULL | NULL |
+------+------+

Gold Query: SELECT AVG(tx_limit_daily) AS avg_daily_limit, AVG(tx_limit_monthly) AS avg_monthly_limit FROM consumer_div_user_setting_snapshot WHERE snapshot_date
= (SELECT MIN(snapshot_date) FROM consumer_div_user_setting_snapshot WHERE snapshot_date >= '2023-01-01' AND snapshot_date < '2024-01-01');
Gold Result:
+--------------+---------------+
| 501.00000000 | 1750.00000000 |
+--------------+---------------+

Rating: Perfect

-------------------
Test #202
DB: Ewallet
-------------------
Question: Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.

Generated Query: SELECT u.username, u.email, u.created_at FROM users AS u
LEFT JOIN notifications AS n ON u.uid = n.user_id AND DATE_SUB(CURDATE(), INTERVAL 1 YEAR) <= n.created_at WHERE n.id IS NULL;
Generated Result:
+---------------+----------------------------+---------------------+
| bizuser       |        contact@business.co | 2021-06-01 09:15:00 |
| david_miller  |        dave@personal.email | 2023-03-20 18:45:00 |
| emily_wilson  |          emily.w@gmail.com | 2021-11-03 22:10:00 |
| techcorp      |        orders@techcorp.com | 2018-05-20 11:35:00 |
| shopsmart     | customerserv@shopsmart.biz | 2020-09-15 06:25:00 |
| michael_brown |     mike.brown@outlook.com | 2019-07-22 16:40:00 |
| alex_taylor   |      ataylo@university.edu | 2022-08-30 09:15:00 |
| huang2143     |      huang2143@example.com | 2023-12-10 08:00:00 |
| lisa_jones    |       lisa.jones@email.com | 2023-09-05 15:20:00 |
+---------------+----------------------------+---------------------+

Gold Query: 
Gold Result:
+---------------+----------------------------+---------------------+
| bizuser       |        contact@business.co | 2021-06-01 09:15:00 |
| emily_wilson  |          emily.w@gmail.com | 2021-11-03 22:10:00 |
| techcorp      |        orders@techcorp.com | 2018-05-20 11:35:00 |
| shopsmart     | customerserv@shopsmart.biz | 2020-09-15 06:25:00 |
| michael_brown |     mike.brown@outlook.com | 2019-07-22 16:40:00 |
| huang2143     |      huang2143@example.com | 2023-12-10 08:00:00 |
| lisa_jones    |       lisa.jones@email.com | 2023-09-05 15:20:00 |
+---------------+----------------------------+---------------------+

Rating: Bad

-------------------
Test #203
DB: Ewallet
-------------------
Question: what was the average user session duration in seconds split by device_type?

Generated Query: SELECT device_type, AVG(TIMESTAMPDIFF(SECOND, session_end_ts, session_start_ts)) AS avg_session_duration FROM
user_sessions GROUP BY device_type;
Generated Result:
+------------+--------------------+
| mobile_app |           1765.875 |
| web_app    |  1351.3333333333333|
+------------+--------------------+

Gold Query: SELECT device_type, AVG(UNIX_TIMESTAMP((session_end_ts - session_start_ts))) AS avg_session_duration_seconds FROM user_sessions WHERE NOT session_end_ts IS NULL GROUP BY device_type;
Gold Result: 
+------------+--------------------+
| mobile_app |           1765.875 |
| web_app    | 1351.3333333333333 |
+------------+--------------------+

Rating: Perfect

-------------------
Test #204
DB: Ewallet
-------------------
Quesiton: Give me today's median merchant wallet balance for all active merchants whose category contains 'retail'

Generated Query: SELECT CAST(SUM(balance) AS FLOAT) / COUNT(*) FROM (SELECT balance FROM wallet_merchant_balance_daily 
WHERE updated_at = CURDATE() AND merchant_id IN (SELECT mid FROM merchants WHERE status = 'active' AND category LIKE '%retail%')) t;
Generated Result:
+------+
| NULL |
+------+

Gold Query: WITH retail_merchants AS (SELECT mid FROM merchants WHERE LOWER(category) LIKE LOWER('%retail%') AND status = 'active'), merchant_balances AS (SELECT balance FROM wallet_merchant_balance_daily AS wmbd JOIN retail_merchants AS rm ON wmbd.merchant_id = rm.mid WHERE DATE(wmbd.updated_at) = CURRENT_DATE), ranked_balances AS (SELECT balance, ROW_NUMBER() OVER (ORDER BY balance) as `row_number`, COUNT(*) OVER () as total_rows FROM merchant_balances) SELECT AVG(balance) AS median_balance FROM ranked_balances WHERE `row_number` IN (FLOOR((total_rows + 1) / 2), CEIL((total_rows + 1) / 2));
Gold Result:
ERROR 20101 (HY000): internal error: panic runtime error: invalid memory address or nil pointer dereference:
runtime.panicmem
        /snap/go/10660/src/runtime/panic.go:261
runtime.sigpanic
        /snap/go/10660/src/runtime/signal_unix.go:881
github.com/matrixorigin/matrixone/pkg/container/batch.(*Batch).RowCount
        /root/matrixorigin/matrixone/pkg/container/batch/batch.go:155
github.com/matrixorigin/matrixone/pkg/sql/colexec.(*FixedVectorExpressionExecutor).Eval
        /root/matrixorigin/matrixone/pkg/sql/colexec/evalExpression.go:591

Rating: Unknown

-------------------
Test #205
DB: Ewallet
-------------------
Question: Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date

Generated Query: SELECT m.mid AS merchant_id, m.created_at AS registration_date, COALESCE(c.cid, 'N/A') AS earliest_coupon_id,
COALESCE(c.start_date, 'N/A') AS earliest_coupon_start_date FROM merchants m LEFT JOIN coupons c ON m.mid = c.merchant_id AND c.status = 'active'
WHERE DATEDIFF(m.created_at, (SELECT MIN(start_date) FROM coupons WHERE merchant_id = m.mid)) <= 365;
Generated Result:
ERROR 20203 (HY000): invalid argument cast to int, bad value N/A

Rating: Bad

-------------------
Test #206
DB: Car Dealership
-------------------
Question: Return the name and phone number of the salesperson with the shortest time from being hired to getting fired. Return the number of days he/she was employed for.

Generated Query: SELECT s.first_name AS name, s.phone AS phone_number, DATEDIFF(s.termination_date, s.hire_date) AS employment_duration_days
FROM salespersons s ORDER BY DATEDIFF(termination_date, hire_date) LIMIT 1;
Generated Result:
+------+----------------+------+
| John | (555)-123-4567 | NULL |
+------+----------------+------+

Gold Query: SELECT s.first_name, s.last_name, s.phone, s.termination_date - s.hire_date AS days_employed FROM salespersons AS s ORDER BY CASE WHEN days_employed IS NULL THEN 1 ELSE 0 END, days_employed ASC LIMIT 1;
Gold Result:
+--------+--------+----------------+------+
| Olivia | Thomas | (333)-415-0000 |  181 |
+--------+--------+----------------+------+

Rating: Bad

-------------------
Test #207
DB: Car Dealership
-------------------
Question: Return the number of payments made on weekends to the vendor named 'Utility Company'

Generated Query: SELECT COUNT(*) FROM payments_made pm JOIN DAYSOFWEEK(pd.date) AS dow ON DAYOFWEEK(pm.payment_date) = dow.dow
WHERE pm.vendor_name = 'Utility Company' AND dow.dow IN (0,6);
Generated Result:
ERROR 20301 (HY000): invalid input: missing FROM-clause entry for table 'pd'

Rating: Bad

-------------------
Test #208
DB: Car Dealership
-------------------
Question: show me the daily total amount of payments received in the whole of the previous ISO week not including the current week, split by the payment_method

Generated Query: SELECT pm.payment_method, SUM(CAST(pr.payment_amount AS FLOAT))
FROM payments_received pr WHERE WEEKOFYEAR(pr.payment_date) != 
WEEKOFYEAR(CURDATE()) AND YEARWEEK(pr.payment_date, 1) = YEARWEEK(DATE_SUB(CURDATE(), INTERVAL 7 DAY), 1) GROUP BY pm.payment_method;
Generated Result:
ERROR 20105 (HY000): not supported: function or operator 'weekofyear'

Rating: Bad

-------------------
Test #209
DB: Car Dealership
-------------------
Question: Which cars were in inventory in the latest snapshot for march 2023? Return the car id, make, model, and year. Cars are considered to be in inventory" if is_in_inventory is True."

Generated Query: SELECT c.id, c.make, c.model, c.year
FROM cars AS c JOIN inventory_snapshots AS is ON c.id = is.car_id
WHERE YEAR(is.snapshot_date) = '2023' AND MONTH(is.snapshot_date) = 3 GROUP BY c.id
HAVING SUM(if(is.is_in_inventory, 1, 0)) > 0;
Generated Result:
ERROR 1064 (HY000): SQL parser error: You have an error in your SQL syntax; check the manual that corresponds to your MatrixOne server version for the right syntax to use. syntax error at line 3 column 31 near " is ON c.id = is.car_id
WHERE YEAR(is.snapshot_date) = '2023' AND MONTH(is.snapshot_date) = 3
GROUP BY c.id
HAVING SUM(if(is.is_in_inventory, 1, 0)) > 0";

Rating: Bad

-------------------
Test #210
DB: Car Dealership
-------------------
Question: What were the total quarterly sales in 2023 grouped by customer's state? Represent each quarter as the first date in the quarter.

Generated Query: SELECT QUARTER(s.sale_date) AS quarter, c.state, SUM(s.sale_price) AS total_sales FROM sales AS s
JOIN customers AS c ON s.customer_id = c.id WHERE YEAR(s.sale_date) = 2023 GROUP BY QUARTER(s.sale_date), c.state;
Generated Result:
ERROR 20105 (HY000): not supported: function or operator 'quarter'