Ratings:
Perfect- 10
Good- 6
Bad- 15
Unknown- 1 
-------------------
Test #26
DB: Advising
-------------------
Question: What month were most students admitted? Return the month as a date

Generated Query: SELECT DATE_FORMAT(admit_term, '%Y-%m') AS admit_month, COUNT(*) as num_admissions FROM
student GROUP BY admit_month ORDER BY num_admissions DESC LIMIT 1;
Generated Result: 
+-------------+----------------+
| admit_month | num_admissions |
+-------------+----------------+
| 2018-01     |              2 |
+-------------+----------------+

Gold Query: SELECT DATE_ADD('2000-01-01 00:00:00', INTERVAL TIMESTAMPDIFF(MONTH, '2000-01-01 00:00:00', s.admit_term) MONTH) AS month, COUNT(*) AS total_students FROM student AS s GROUP BY month ORDER BY CASE WHEN total_students IS NULL THEN 1 ELSE 0 END DESC, total_students DESC LIMIT 1;
Gold Result:
+----------------------------+----------------+
| month                      | total_students |
+----------------------------+----------------+
| 2018-01-01 00:00:00.000000 |              2 |
+----------------------------+----------------+

Rating: Perfect

-------------------
Test #27
DB: Advising
-------------------
Question: What's the average predicted time to graduation since admission in no. of days?

Generated Query: SELECT AVG(TIMESTAMPDIFF(DAY, s.admit_term, s.predicted_graduation_semester)) AS avg_time_difference
FROM student s;
Generated Result:
+---------------------+
| avg_time_difference |
+---------------------+
|                1460 |
+---------------------+

Gold Query: SELECT AVG(predicted_graduation_semester - admit_term) AS average_predicted_time_to_graduation FROM student;
Gold Result:
+--------------------------------------+
| average_predicted_time_to_graduation |
+--------------------------------------+
|                                 1460 |
+--------------------------------------+

Rating: Perfect

-------------------
Test #28
DB: Advising
-------------------
Question: How many students were predicted to graduate in the last 10 years?

Generated Query: SELECT COUNT(*) FROM student s WHERE TIMESTAMPDIFF(YEAR, s.admit_term, s.predicted_graduation_semester) <= 10;
Generated Result:
+----------+
| count(*) |
+----------+
|        5 |
+----------+

Gold Query: SELECT COUNT(*) AS num_students_graduated FROM student WHERE predicted_graduation_semester >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR);
Gold Result: 
+------------------------+
| num_students_graduated |
+------------------------+
|                      4 |
+------------------------+

Rating: Bad

-------------------
Test #29
DB: Advising
-------------------
Question: How long has it been in days since the last admitted student? Give the answer as an integer.

Generated Query: SELECT TIMESTAMPDIFF(DAY, MAX(s.admit_term), NOW()) AS time_difference
FROM student s;
Generated Result:
+-----------------+
| time_difference |
+-----------------+
|            2047 |
+-----------------+

Gold Query: SELECT CAST(DATEDIFF(CURRENT_DATE, MAX(admit_term)) AS SIGNED) AS duration_since_last_admitted_student FROM student;
Gold Result:
+--------------------------------------+
| duration_since_last_admitted_student |
+--------------------------------------+
|                                 2047 |
+--------------------------------------+

Rating: Perfect

-------------------
Test #30
DB: Advising
-------------------
Question: Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday

Genearted Query: SELECT DISTINCT co.course_id FROM course_offering co JOIN semester s ON co.semester = s.semester_id
WHERE s.semester IN ('Fall Semester', 'Spring Semester') AND co.end_time < '13:00:00';
Generated Result:
Empty set

Rating: Bad

-------------------
Test #31
DB: Advising
-------------------
Question: What is the total number of students who found the instructor to be hilarious per course id?

Generated Query: SELECT COUNT(DISTINCT sr.student_id) AS total_students, ct.course_id
FROM student_record sr JOIN offering_instructor oi ON sr.offering_id = oi.offering_id JOIN instructor i ON oi.instructor_id = i.instructor_id JOIN course_offering co ON sr.offering_id = co.offering_id JOIN course_tags_count ct ON co.course_id = ct.course_id
WHERE ct.hilarious = 1;
Generated Result: ERROR 1149 (HY000): SQL syntax error: column "ct.course_id" must appear in the GROUP BY clause or be used in an aggregate function

Rating: Bad

-------------------
Test #32
DB: Advising
-------------------
Question: What is the average clarity score for each instructor who taught a course?

Generated Query: SELECT i.name AS instructor_name, AVG(c.clarity_score) AS average_clarity_score FROM course_offering co
JOIN offering_instructor oi ON co.offering_id = oi.offering_id JOIN instructor i ON oi.instructor_id = i.instructor_id
JOIN course c ON i.instructor_id = c.course_id GROUP BY i.name;
Generated Result: 
+-----------------+-----------------------+
| instructor_name | average_clarity_score |
+-----------------+-----------------------+
| John Smith      |                     5 |
| Jane Doe        |                     4 |
| Gilbert Strang  |                     4 |
| Brendan Burns   |                     2 |
+-----------------+-----------------------+

Gold Query: 
+----------------+----------------------+
| name           | avg(c.clarity_score) |
+----------------+----------------------+
| John Smith     |   3.6666666666666665 |
| Jane Doe       |                  4.5 |
| Gilbert Strang |                    4 |
| Brendan Burns  |                    2 |
+----------------+----------------------+

Rating: Good

-------------------
Test #33
DB: Advising
-------------------
Question: How many course offerings have a final exam and how many do not?

Generated Query: SELECT COUNT(CASE WHEN has_final_exam = 1 THEN offering_id END) AS "With Final Exam",
COUNT(CASE WHEN has_final_exam = 0 THEN offering_id END) AS "Without Final Exam" FROM course_offering;
Generated Result: 
+-----------------+--------------------+
| With Final Exam | Without Final Exam |
+-----------------+--------------------+
|               6 |                  2 |
+-----------------+--------------------+

Gold Query: SELECT course_offering.has_final_exam, COUNT(offering_id) AS num_courses FROM course_offering GROUP BY course_offering.has_final_exam;SELECT COUNT(CASE WHEN co.has_final_exam THEN 1 END) AS num_with_final_exam, COUNT(CASE WHEN NOT co.has_final_exam THEN 1 END) AS num_without_final_exam FROM course_offering AS co;
Gold Result:
+---------------------+------------------------+
| num_with_final_exam | num_without_final_exam |
+---------------------+------------------------+
|                   6 |                      2 |
+---------------------+------------------------+

Rating: Perfect

-------------------
Test #34
DB: Advising
-------------------
Question: How many courses does each department offer?

Generated Query: SELECT department, COUNT(*) AS num_courses FROM course GROUP BY department;
Generated Result: 
+------------------+-------------+
| department       | num_courses |
+------------------+-------------+
| Computer Science |           2 |
| Mathematics      |           1 |
| Physics          |           1 |
+------------------+-------------+

Gold Query: SELECT course.department, COUNT(DISTINCT course.course_id) AS num_courses FROM course GROUP BY course.department ORDER BY num_courses DESC;
Gold Result:
+------------------+-------------+
| department       | num_courses |
+------------------+-------------+
| Computer Science |           2 |
| Mathematics      |           1 |
| Physics          |           1 |
+------------------+-------------+

Rating: Perfect

-------------------
Test #35
DB: Advising
-------------------
Question: How many courses are offered for each semester id?

Generated Query: SELECT co.semester, COUNT(*) AS num_courses FROM course_offering co JOIN course c ON co.course_id = c.course_id
GROUP BY co.semester;
Generated Result:
+----------+-------------+
| semester | num_courses |
+----------+-------------+
|        1 |           2 |
|        2 |           2 |
|        3 |           2 |
|        4 |           2 |
+----------+-------------+

Gold Query: SELECT course.name, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;
Gold Result:
+-------------------+--------------+
| name              | num_enrolled |
+-------------------+--------------+
| Advanced Calculus |            5 |
+-------------------+--------------+
+-----------+--------------+
| course_id | num_enrolled |
+-----------+--------------+
|         2 |            5 |
+-----------+--------------+
+---------+--------------+
| number  | num_enrolled |
+---------+--------------+
| MATH201 |            5 |
+---------+--------------+
+-------------------+-----------+--------------+
| name              | course_id | num_enrolled |
+-------------------+-----------+--------------+
| Advanced Calculus |         2 |            5 |
+-------------------+-----------+--------------+

Rating: Bad

-------------------
Test #36
DB: Advising
-------------------
Question: Which course has the highest number of enrolled students, and what is the enrollment number?

Generated Query: SELECT c.name AS course_name, c.num_enrolled AS enrollment_number FROM course c
ORDER BY num_enrolled DESC LIMIT 1;
Generated Result: 
+-------------------+-------------------+
| course_name       | enrollment_number |
+-------------------+-------------------+
| Advanced Calculus |                 5 |
+-------------------+-------------------+

Gold Query: SELECT course.name, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;
Gold Result:
+-------------------+-----------+---------+--------------+
| name              | course_id | number  | num_enrolled |
+-------------------+-----------+---------+--------------+
| Advanced Calculus |         2 | MATH201 |            5 |
+-------------------+-----------+---------+--------------+

Rating: Perfect

-------------------
Test #37
DB: Advising
-------------------
Question: What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?

Generated Query: SELECT c.course_id AS course_id, SUM(sr.count) AS total_participants FROM student_record sr
JOIN course c ON sr.course_id = c.course_id WHERE sr.how = 'active' GROUP BY c.course_id ORDER BY total_participants DESC;
Generated Result: 
ERROR 20301 (HY000): invalid input: column 'sr.count' does not exist

Rating: Bad

-------------------
Test #38
DB: Advising
-------------------
Question: What is the total number of students enrolled in each course, ordered from highest to lowest?

Generated Query: SELECT COALESCE(COUNT(DISTINCT sr.student_id), 0) AS total_students, co.name FROM student_record sr
JOIN course_offering co ON sr.offering_id = co.offering_id GROUP BY co.name ORDER BY total_students DESC;
Generated Result: 
ERROR 20301 (HY000): invalid input: column 'co.name' does not exist

Rating: Bad

-------------------
Test #39
DB: Advising
-------------------
Question: What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.

Generated Query: SELECT s.student_id, s.total_credit AS total_credits FROM student s ORDER BY s.total_credits DESC;
Generated Result: 
ERROR 20301 (HY000): invalid input: column 's.total_credits' does not exist

Rating: Bad

-------------------
Test #40
DB: Advising
-------------------
Question: What is the name of the instructor who has taught the most courses, and how many courses have they taught?

Generated Query: SELECT i.name, COUNT(DISTINCT o.offering_id) AS num_courses_teaching FROM instructor i JOIN offering_instructor oi ON i.instructor_id = oi.instructor_id JOIN course_offering o ON oi.offering_id = o.offering_id GROUP BY i.name ORDER BY num_courses_teaching DESC LIMIT 1;
Generated Result: 
+------------+----------------------+
| name       | num_courses_teaching |
+------------+----------------------+
| John Smith |                    6 |
+------------+----------------------+

Gold Query: SELECT instructor.name, COUNT(offering_instructor.offering_id) AS num_courses FROM offering_instructor JOIN instructor ON offering_instructor.instructor_id = instructor.instructor_id GROUP BY instructor.name ORDER BY CASE WHEN num_courses IS NULL THEN 1 ELSE 0 END DESC, num_courses DESC LIMIT 1;
Gold Result:
+------------+-------------+
| name       | num_courses |
+------------+-------------+
| John Smith |          12 |
+------------+-------------+

Rating: Bad

-------------------
Test #41
DB: Advising
-------------------
Question: What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?

Generated Query: SELECT COUNT(DISTINCT CO.course_id) AS total_courses, SUM(CASE WHEN CO.has_exams = 1 THEN 1 ELSE 0 END) * SR.num_students AS students_with_exams, (SUM(CASE WHEN CO.has_exams = 1 THEN 1 ELSE 0 END) * SR.num_students) /
(COUNT(DISTINCT CO.course_id) * SR.num_students) AS ratio FROM course_offering CO JOIN student_record SR ON CO.offering_id = SR.offering_id;
Generated Result:
ERROR 20301 (HY000): invalid input: column 'co.has_exams' does not exist

Rating: Bad

-------------------
Test #42
DB: Advising
-------------------
Question: What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?

Generated Query: SELECT CC.course_id, CAST(COUNT(CASE WHEN SR.grade = 'A' THEN 1 END) AS FLOAT) * (SELECT COUNT(*) FROM course_tags_count WHERE clear_grading > 0 AND good_feedback > 0) / ((SELECT COUNT(*) FROM student_record WHERE grade = 'A') /
SELECT COUNT(*) FROM course_tags_count WHERE clear_grading > 0 AND good_feedback > 0) FROM course_tags_count CC
JOIN student_record SR ON CC.course_id = SR.course_id WHERE CC.clear_grading > 0 AND CC.good_feedback > 0;
Generated Result: 
ERROR 1064 (HY000): SQL parser error: You have an error in your SQL syntax; check the manual that corresponds to your MatrixOne server version for the right syntax to use. syntax error at line 6 column 12 near

Rating: Bad

-------------------
Test #43
DB: Advising
-------------------
Question: What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?

Generated Query: SELECT CO.semester, CAST(PC.course_id AS SIGNED) / COUNT(CASE WHEN OC.has_exams > 0 THEN 1 END)
FROM course_offering CO JOIN program_course PC ON CO.course_id = PC.course_id WHERE CO.has_projects > 0 AND PC.category != ''
GROUP BY CO.semester;
Generated Result: ERROR 1064 (HY000): SQL parser error: table "program_course" does not exist

Rating: Bad

-------------------
Test #44
DB: Advising
-------------------
Question: What is the ratio of helpfulness scores to clarity scores for each course ID?

Generated Query: SELECT C1.course_id, CAST(C1.helpfulness_score AS FLOAT) / C2.clarity_score AS helpfulness_to_clarity_ratio
FROM course_tags_count C1 JOIN course_tags_count C2 ON C1.course_id = C2.course_id GROUP BY C1.course_id;
Generated Result: ERROR 20301 (HY000): invalid input: column 'c1.helpfulness_score' does not exist

Rating: Bad

-------------------
Test #45
DB: Advising
-------------------
Question: How does the ratio of enrolled students to the number of reviews vary across different courses?

Generated Query: C.name AS 'Course Name', CAST(C.num_enrolled AS FLOAT) / C.num_reviews AS 'Enrolled-to-Reviews Ratio'
FROM course C;
Generated Result: 
+----------------------------------+---------------------------+
| Course Name                      | Enrolled-to-Reviews Ratio |
+----------------------------------+---------------------------+
| Introduction to Computer Science |                       0.3 |
| Advanced Calculus                |                         1 |
| Introduction to Physics          |                     0.125 |
| Distributed Databases            |                      0.75 |
+----------------------------------+---------------------------+

Gold Query: Doesn't work with this schema

Rating: Unknown

-------------------
Test #46
DB: Advising
-------------------
Question: Which courses have been taken by students in the Computer Science program?

Generated Query: SELECT C.name AS 'Course Name' FROM student_record SR JOIN course C ON SR.course_id = C.course_id JOIN
program_course PC ON SR.course_id = PC.course_id AND PC.program_id IN ( SELECT program_id FROM program WHERE name = 'Computer Science' ) WHERE C.name IS NOT NULL;
Generated Result:
ERROR 1064 (HY000): SQL parser error: table "program_course" does not exist

Rating: Bad

-------------------
Test #47
DB: Advising
-------------------
Question: Which courses have a final project and a final exam?

Generated Query: SELECT C.name AS 'Course Name' FROM course_offering CO JOIN course C ON CO.course_id = C.course_id WHERE CO.has_final_project = 1 AND CO.has_final_exam = 1 AND C.name IS NOT NULL;

Generated Result:
+-------------------+
| Course Name       |
+-------------------+
| Advanced Calculus |
| Advanced Calculus |
+-------------------+

Gold Query: SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = TRUE OR course_offering.has_final_exam = TRUE;
Gold Result:
+-------------------+-----------+---------+
| name              | course_id | number  |
+-------------------+-----------+---------+
| Advanced Calculus |         2 | MATH201 |
+-------------------+-----------+---------+

-------------------
Test #48
DB: Advising
-------------------
Question: What is the total number of credits earned by students in each program?

Generated Query: SELECT COUNT(DISTINCT sr.student_id) FROM student_record AS sr JOIN course_offering AS co ON sr.offering_id = co.offering_id WHERE co.has_final_project = '1' OR co.has_final_exam = '1';
Genearted Result:
+-------------------------------+
| count(distinct sr.student_id) |
+-------------------------------+
|                             5 |
+-------------------------------+

Gold Query: SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = TRUE OR course_offering.has_final_exam = TRUE;
Gold Result: 
+----------------+
| total_students |
+----------------+
|              5 |
+----------------+

Rating: Perfect

-------------------
Test #49
DB: Advising
-------------------
Question: How many students have declared a major in each program?

Generated Query: SELECT p.name, COALESCE(SUM(pc.workload), 0) as total_credits FROM program p JOIN program_course pc ON p.program_id = pc.program_id GROUP BY p.name;
Generated Result: SELECT p.name, COALESCE(SUM(pc.workload), 0) as total_credits FROM program p JOIN program_course pc ON p.program_id = pc.program_id GROUP BY p.name;

Rating: Bad

-------------------
Test #50
DB: Advising
-------------------
Question: How many students have declared a major in each program?

Generated Query: SELECT p.name, COUNT(s.student_id) as num_students_declared_major FROM student s JOIN program p ON s.program_id = p.program_id GROUP BY p.name;
Generated Result: 
+------------------+-----------------------------+
| name             | num_students_declared_major |
+------------------+-----------------------------+
| Computer Science |                           3 |
| Mathematics      |                           1 |
| Physics          |                           1 |
+------------------+-----------------------------+

Gold Query: SELECT program.name, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.name ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;SELECT program.program_id, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.program_id ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;SELECT program.name, program.program_id, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.name, program.program_id ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;
Gold Result: 
+------------------+--------------------+
| name             | number_of_students |
+------------------+--------------------+
| Computer Science |                  3 |
| Mathematics      |                  1 |
| Physics          |                  1 |
+------------------+--------------------+

-------------------
Test #51
DB: Advising
-------------------
Question: Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.

Generated Query: SELECT s.firstname, s.lastname FROM student s WHERE s.minor IS NOT NULL ORDER BY s.lastname;
Generated Result: 
+-----------+----------+
| firstname | lastname |
+-----------+----------+
| Sarah     | Brown    |
| David     | Johnson  |
+-----------+----------+

Gold Query: SELECT student.firstname, student.lastname FROM student WHERE NOT student.minor IS NULL ORDER BY CASE WHEN student.lastname IS NULL THEN 1 ELSE 0 END, student.lastname;
Gold Result: 
+-----------+----------+
| firstname | lastname |
+-----------+----------+
| Sarah     | Brown    |
| David     | Johnson  |
+-----------+----------+

-------------------
Test #52
DB: Advising
-------------------
Question: What is the average GPA of students in the program mathematics?

Generated Query: SELECT AVG(s.total_gpa) AS average_gpa FROM student s JOIN program_course pc ON s.program_id = pc.program_id
WHERE pc.category = 'mathematics';
Genearted Result: 
ERROR 1064 (HY000): SQL parser error: table "program_course" does not exist

Rating: Bad

-------------------
Test #53
DB: Advising
-------------------
Question: What are the names of all the courses offered by the department of Computer Science?

Generated Query: SELECT c.name AS course_name FROM student_record sr JOIN course c ON sr.course_id = c.course_id
WHERE c.department ILIKE 'Computer Science';
Generated Result: 
+----------------------------------+
| course_name                      |
+----------------------------------+
| Introduction to Computer Science |
| Distributed Databases            |
| Introduction to Computer Science |
| Distributed Databases            |
| Introduction to Computer Science |
| Distributed Databases            |
+----------------------------------+

Gold Query: SELECT course.name FROM course WHERE LOWER(course.department) LIKE LOWER('%Computer Science%') ORDER BY CASE WHEN course.name IS NULL THEN 1 ELSE 0 END, course.name ASC;
Gold Result:
+----------------------------------+
| name                             |
+----------------------------------+
| Distributed Databases            |
| Introduction to Computer Science |
+----------------------------------+

Rating: Good

-------------------
Test #54
DB: Advising
-------------------
Question: What are the easiness scores for courses in the "Computer Science" department? Show both courses and scores.

Generated Query: SELECT c.name AS CourseName, c.easiness_score AS EasinessScore FROM course AS c 
JOIN area AS a ON c.course_id = a.course_id WHERE a.area = 'Computer Science';
Generated Result: 
+----------------------------------+---------------+
| CourseName                       | EasinessScore |
+----------------------------------+---------------+
| Introduction to Computer Science |             3 |
| Distributed Databases            |             1 |
+----------------------------------+---------------+

Gold Query: SELECT course.name, course.easiness_score FROM course WHERE course.department = 'Computer Science';
Gold Result:
+----------------------------------+----------------+
| name                             | easiness_score |
+----------------------------------+----------------+
| Introduction to Computer Science |              3 |
| Distributed Databases            |              1 |
+----------------------------------+----------------+

Rating: Perfect

-------------------
Test #55
DB: Advising
-------------------
Question: Return the student IDs who have taken an in-person course and have gotten a grade of A or C

Generated Query: SELECT DISTINCT sr.student_id FROM student_record AS sr JOIN course_offering AS co ON sr.offering_id = co.offering_id WHERE sr.grade IN ('A', 'C') AND co.class_address IS NOT NULL;
Generated Result: 
+------------+
| student_id |
+------------+
|          1 |
|          2 |
|          4 |
+------------+

Gold Query: SELECT DISTINCT student_id FROM student_record WHERE student_record.how = 'in-person' AND student_record.grade IN ('A', 'C');
Gold Result:
+------------+
| student_id |
+------------+
|          1 |
|          2 |
|          4 |
+------------+

Rating: Perfect
