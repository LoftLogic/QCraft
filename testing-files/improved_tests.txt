Test #1
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which authors have written publications in both the domain "Machine Learning" and the domain "Data Science"?`:

"""

Test #2
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of citations received by each author?`:

"""

Test #3
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of publications published in each year?`:

"""

Test #4
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average number of references cited by publications in each domain name?`:

"""

Test #5
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average number of citations received by publications in each year?`:

"""

Test #6
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the title of the publication that has received the highest number of citations?`:

"""

Test #7
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the top 5 domains with the highest number of authors associated with them?`:

"""

Test #8
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the top 3 titles of the publications that have the highest number of references cited, ordered by the number of references cited in descending order?`:

"""

Test #9
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the top 3 publications with the highest number of citations?`:

"""

Test #10
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the titles of all publications ordered alphabetically?`:

"""

Test #11
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of publications to authors in the database?`:

"""

Test #12
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of publications presented in conferences to publications published in journals?`:

"""

Test #13
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of the total number of publications to the total number of keywords within each domain ID? Show all domain IDs.`:

"""

Test #14
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How does the ratio of publications to journals change over the years? Return the annual numbers of publications and journals as well.`:

"""

Test #15
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How does the ratio of authors to organizations differ by continent?`:

"""

Test #16
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which author had the most publications in the year 2021 and how many publications did he/she have that year?`:

"""

Test #17
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of publications presented in each conference?`:

"""

Test #18
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of publications in each journal, ordered by the number of publications in descending order?`:

"""

Test #19
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many publications were presented at each conference, ordered by the number of publications in descending order? Give the names of the conferences and their corresponding number of publications.`:

"""

Test #20
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many publications were published in journals whose names start with the letter "J"?`:

"""

Test #21
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using an exact match
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which organizations have authors who have written publications in the domain "Machine Learning"?`:

"""

Test #22
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using ILIKE with percent sign wildcards
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which authors belong to the same domain as Martin?`:

"""

Test #23
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using ILIKE
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which authors are not part of any organization?`:

"""

Test #24
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id. Finally, to see which ones were presented at conferences, you must join the domain table with the domain_conference table. You must also filter names using ILIKE.
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the publications written by authors from the 'Sociology' domain and presented at conferences in the year 2020?`:

"""

Test #25
Database : academic
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id. You must also filter names using ILIKE.
### Input: 
CREATE TABLE author (
    aid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT, 
    oid BIGINT
);


CREATE TABLE cite (
    cited BIGINT,
    citing BIGINT
);


CREATE TABLE conference (
    cid BIGINT NOT NULL,
    homepage TEXT,
    name TEXT
);


CREATE TABLE domain (
    did BIGINT NOT NULL,
    name TEXT
);

CREATE TABLE domain_author (
    aid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_conference (
    cid BIGINT NOT NULL,
    did BIGINT NOT NULL
);


CREATE TABLE domain_journal (
    did BIGINT NOT NULL,
    jid BIGINT NOT NULL
);


CREATE TABLE domain_keyword (
    did BIGINT NOT NULL,
    kid BIGINT NOT NULL
);


CREATE TABLE domain_publication (
    did BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



CREATE TABLE journal (
    homepage TEXT,
    jid BIGINT NOT NULL,
    name TEXT
);


CREATE TABLE keyword (
    keyword TEXT,
    kid BIGINT NOT NULL
);


CREATE TABLE organization (
    continent TEXT,
    homepage TEXT,
    name TEXT,
    oid BIGINT NOT NULL
);


CREATE TABLE publication (
    abstract TEXT,
    cid BIGINT,
    citation_num BIGINT,
    jid BIGINT,
    pid BIGINT NOT NULL,
    reference_num BIGINT,
    title TEXT,
    year BIGINT
);


CREATE TABLE publication_keyword (
    pid BIGINT NOT NULL,
    kid BIGINT NOT NULL
);



CREATE TABLE writes (
    aid BIGINT NOT NULL,
    pid BIGINT NOT NULL
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names of the authors who have written publications in the domain "Computer Science"?`:

"""

Test #26
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What month were most students admitted? Return the month as a date`:

"""

Test #27
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What's the average predicted time to graduation since admission in no. of days?`:

"""

Test #28
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many students were predicted to graduate in the last 10 years?`:

"""

Test #29
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How long has it been in days since the last admitted student? Give the answer as an integer.`:

"""

Test #30
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday`:

"""

Test #31
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of students who found the instructor to be hilarious per course id?`:

"""

Test #32
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average clarity score for each instructor who taught a course?`:

"""

Test #33
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many course offerings have a final exam and how many do not?`:

"""

Test #34
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many courses does each department offer?`:

"""

Test #35
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many courses are offered for each semester id?`:

"""

Test #36
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which course has the highest number of enrolled students, and what is the enrollment number?`:

"""

Test #37
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?`:

"""

Test #38
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of students enrolled in each course, ordered from highest to lowest?`:

"""

Test #39
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.`:

"""

Test #40
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the name of the instructor who has taught the most courses, and how many courses have they taught?`:

"""

Test #41
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?`:

"""

Test #42
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?`:

"""

Test #43
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?`:

"""

Test #44
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of helpfulness scores to clarity scores for each course ID?`:

"""

Test #45
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How does the ratio of enrolled students to the number of reviews vary across different courses?`:

"""

Test #46
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which courses have been taken by students in the Computer Science program?`:

"""

Test #47
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which courses have a final project and a final exam?`:

"""

Test #48
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of students who have taken a course with a final project or exam?`:

"""

Test #49
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of credits earned by students in each program?`:

"""

Test #50
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many students have declared a major in each program?`:

"""

Test #51
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;student.declare_major is null for students who have not declared their major.
student.minor is null for students who have not declared a minor program.
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.`:

"""

Test #52
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Match strings case-insensitively
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average GPA of students in the program mathematics?`:

"""

Test #53
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter strings using ILIKE.
Use the student_record table for all information relating to students' choices and their course.
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names of all the courses offered by the department of Computer Science?`:

"""

Test #54
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using exact string matching
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the easiness scores for courses in the "Computer Science" department? Show both courses and scores.`:

"""

Test #55
Database : advising
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter strings with an exact match.
When asked for specific students or courses, do not return duplicates.
### Input: CREATE TABLE area (
    course_id BIGINT,
    area TEXT
);


CREATE TABLE comment_instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    student_id BIGINT DEFAULT '0' NOT NULL,
    score BIGINT,
    comment_text TEXT
);


CREATE TABLE course (
    course_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    department TEXT,
    number TEXT,
    credits TEXT,
    advisory_requirement TEXT,
    enforced_requirement TEXT,
    description TEXT,
    num_semesters BIGINT,
    num_enrolled BIGINT,
    has_discussion TINYINT(1),
    has_lab TINYINT(1),
    has_projects TINYINT(1),
    has_exams TINYINT(1),
    num_reviews BIGINT,
    clarity_score BIGINT,
    easiness_score BIGINT,
    helpfulness_score BIGINT
);


CREATE TABLE course_offering (
    offering_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT,
    semester BIGINT,
    section_number BIGINT,
    start_time time,
    end_time time,
    monday TEXT,
    tuesday TEXT,
    wednesday TEXT,
    thursday TEXT,
    friday TEXT,
    saturday TEXT,
    sunday TEXT,
    has_final_project TINYINT(1),
    has_final_exam TINYINT(1),
    textbook TEXT,
    class_address TEXT,
    allow_audit TEXT DEFAULT 'false'
);


CREATE TABLE course_prerequisite (
    pre_course_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL
);


CREATE TABLE course_tags_count (
    course_id BIGINT DEFAULT '0' NOT NULL,
    clear_grading BIGINT DEFAULT '0',
    pop_quiz BIGINT DEFAULT '0',
    group_projects BIGINT DEFAULT '0',
    inspirational BIGINT DEFAULT '0',
    long_lectures BIGINT DEFAULT '0',
    extra_credit BIGINT DEFAULT '0',
    few_tests BIGINT DEFAULT '0',
    good_feedback BIGINT DEFAULT '0',
    tough_tests BIGINT DEFAULT '0',
    heavy_papers BIGINT DEFAULT '0',
    cares_for_students BIGINT DEFAULT '0',
    heavy_assignments BIGINT DEFAULT '0',
    respected BIGINT DEFAULT '0',
    participation BIGINT DEFAULT '0',
    heavy_reading BIGINT DEFAULT '0',
    tough_grader BIGINT DEFAULT '0',
    hilarious BIGINT DEFAULT '0',
    would_take_again BIGINT DEFAULT '0',
    good_lecture BIGINT DEFAULT '0',
    no_skip BIGINT DEFAULT '0'
);


CREATE TABLE instructor (
    instructor_id BIGINT DEFAULT '0' NOT NULL,
    name TEXT,
    uniqname TEXT
);


CREATE TABLE offering_instructor (
    offering_instructor_id BIGINT DEFAULT '0' NOT NULL,
    offering_id BIGINT,
    instructor_id BIGINT
);


CREATE TABLE program (
    program_id BIGINT NOT NULL,
    name TEXT,
    college TEXT,
    introduction TEXT
);


CREATE TABLE program_course (
    program_id BIGINT DEFAULT '0' NOT NULL,
    course_id BIGINT DEFAULT '0' NOT NULL,
    workload BIGINT,
    category TEXT DEFAULT '' NOT NULL
);


CREATE TABLE program_requirement (
    program_id BIGINT NOT NULL,
    category TEXT NOT NULL,
    min_credit BIGINT,
    additional_req TEXT
);


CREATE TABLE semester (
    semester_id BIGINT NOT NULL,
    semester TEXT,
    year BIGINT
);


CREATE TABLE student (
    student_id BIGINT NOT NULL,
    lastname TEXT,
    firstname TEXT,
    program_id BIGINT,
    declare_major TEXT,
    total_credit BIGINT,
    total_gpa numeric,
    entered_as TEXT DEFAULT 'firstyear',
    admit_term date,
    predicted_graduation_semester date,
    degree TEXT,
    minor TEXT,
    internship TEXT
);


CREATE TABLE student_record (
    student_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    semester BIGINT NOT NULL,
    grade TEXT,
    how TEXT,
    transfer_source TEXT,
    earn_credit TEXT DEFAULT 'y' NOT NULL,
    repeat_term TEXT,
    test_id TEXT,
    offering_id BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Return the student IDs who have taken an in-person course and have gotten a grade of A or C.`:

"""

Test #56
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which flight has the shortest duration between departure and arrival times? Convert to integer minutes.`:

"""

Test #57
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What's the average duration between departure and arrival times minus 34 minutes? Convert from UNIX to regular datetime, and return the answer in minutes`:

"""

Test #58
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Count the number of flight departures for each month?`:

"""

Test #59
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What's the earliest flight departure time in the day in HH:MM?`:

"""

Test #60
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What's the absolute difference in time in days between today and the earliest flight departure? Give the answer as an integer.`:

"""

Test #61
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total cost of round-trip fares for each airline code?`:

"""

Test #62
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average cost of round-trip fares from Los Angeles (LAX) to Chicago (ORD) for each airline, sorted in descending order by average cost?`:

"""

Test #63
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average cost of a one-way trip for each airport pair in the fare table?`:

"""

Test #64
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many meals are served in each compartment, sorted by the number of meals in descending order?`:

"""

Test #65
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many flights depart from each airport code, excluding departures with connections?`:

"""

Test #66
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which flight ids to Chicago (ORD) have the longest duration from departure to arrival, sorted in ascending order?`:

"""

Test #67
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.`:

"""

Test #68
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which aircraft code can carry the highest weight of cargo that any aircraft can carry?`:

"""

Test #69
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the top 2 airlines with the most flights?`:

"""

Test #70
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the aircraft codes for all aircraft with a cruising speed of over 200 mph? sort the aircraft codes in ascending order.`:

"""

Test #71
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Calculate the ratio of the maximum range to the maximum payload for each aircraft`:

"""

Test #72
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of one-way trip costs to round-trip costs for each fare?`:

"""

Test #73
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of aircraft capacity to its range in miles for each aircraft code?`:

"""

Test #74
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the proportion of flights with stops out of all flights for each airline code?`:

"""

Test #75
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How does the average ratio of the cruising speed to the payload of an aircraft vary across different aircraft manufacturers?`:

"""

Test #76
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which flights serve meals in first class? Give me the flight id and meal description.`:

"""

Test #77
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which airlines offer flights with a stopover in Dallas?`:

"""

Test #78
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which airlines offer flights from LAX to ORD?`:

"""

Test #79
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which airlines offer flights from Chicago (ORD) to New York (JFK), and how many stops do they have, sorted by number of stops in ascending order?`:

"""

Test #80
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which airlines do not have any flights that either depart from/arrive at JFK, or have one or more stops?`:

"""

Test #81
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE and wildcards for each of the days separately, since they are not necessarily ordered.
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which state code is Orlando International Airport in?`:

"""

Test #82
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE for each of the days separately, since they are not necessarily ordered.
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which flights operate on Mondays and Wednesdays? Give me the relevant flight numbers`:

"""

Test #83
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
fare.round_trip_required is not needed when getting the round trip cost.
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total cost of all round-trip fares from New York (JFK) to Los Angeles?`:

"""

Test #84
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the minimum amount of time required for a connecting flight at JFK Airport?`:

"""

Test #85
Database : atis
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.
### Input: CREATE TABLE aircraft (
    aircraft_code TEXT,
    aircraft_description TEXT,
    manufacturer TEXT,
    basic_type TEXT,
    engines BIGINT,
    propulsion TEXT,
    wide_body TEXT,
    wing_span BIGINT,
    length BIGINT,
    weight BIGINT,
    capacity BIGINT,
    pay_load BIGINT,
    cruising_speed BIGINT,
    range_miles BIGINT,
    pressurized TEXT
);


CREATE TABLE airline (
    airline_code TEXT,
    airline_name TEXT,
    note TEXT
);


CREATE TABLE airport (
    airport_code TEXT,
    airport_name TEXT,
    airport_location TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT,
    minimum_connect_time BIGINT
);


CREATE TABLE airport_service (
    city_code TEXT,
    airport_code TEXT,
    miles_distant BIGINT,
    direction TEXT,
    minutes_distant BIGINT
);


CREATE TABLE city (
    city_code TEXT,
    city_name TEXT,
    state_code TEXT,
    country_name TEXT,
    time_zone_code TEXT
);


CREATE TABLE class_of_service (
    booking_class TEXT DEFAULT '' NOT NULL,
    tier BIGINT,
    class_description TEXT
);


CREATE TABLE code_description (
    code TEXT DEFAULT '' NOT NULL,
    description TEXT
);


CREATE TABLE compartment_class (
    compartment TEXT,
    class_type TEXT
);


CREATE TABLE days (
    days_code TEXT,
    day_name TEXT
);


CREATE TABLE dual_carrier (
    main_airline TEXT,
    low_flight_number BIGINT,
    high_flight_number BIGINT,
    dual_airline TEXT,
    service_name TEXT
);


CREATE TABLE equipment_sequence (
    aircraft_code_sequence TEXT,
    aircraft_code TEXT
);


CREATE TABLE fare (
    fare_id BIGINT DEFAULT '0' NOT NULL,
    from_airport TEXT,
    to_airport TEXT,
    fare_basis_code TEXT,
    fare_airline TEXT,
    restriction_code TEXT,
    one_direction_cost BIGINT,
    round_trip_cost BIGINT,
    round_trip_required TEXT
);


CREATE TABLE fare_basis (
    fare_basis_code TEXT,
    booking_class TEXT,
    class_type TEXT,
    premium TEXT,
    economy TEXT,
    discounted TEXT,
    night TEXT,
    season TEXT,
    basis_days TEXT
);


CREATE TABLE flight (
    flight_id BIGINT DEFAULT '0' NOT NULL,
    flight_days TEXT,
    from_airport TEXT,
    to_airport TEXT,
    departure_time BIGINT,
    arrival_time BIGINT,
    airline_flight TEXT,
    airline_code TEXT,
    flight_number TEXT,
    aircraft_code_sequence TEXT,
    meal_code TEXT,
    stops BIGINT,
    connections BIGINT,
    dual_carrier TEXT,
    time_elapsed BIGINT
);


CREATE TABLE flight_fare (
    flight_id BIGINT,
    fare_id BIGINT
);


CREATE TABLE flight_leg (
    flight_id BIGINT,
    leg_number BIGINT,
    leg_flight BIGINT
);


CREATE TABLE flight_stop (
    flight_id BIGINT,
    stop_number BIGINT,
    stop_days TEXT,
    stop_airport TEXT,
    arrival_time BIGINT,
    arrival_airline TEXT,
    arrival_flight_number TEXT,
    departure_time BIGINT,
    departure_airline TEXT,
    departure_flight_number TEXT,
    stop_time BIGINT
);


CREATE TABLE food_service (
    meal_code TEXT,
    meal_number BIGINT,
    compartment TEXT,
    meal_description TEXT
);


CREATE TABLE ground_service (
    city_code TEXT,
    airport_code TEXT,
    transport_type TEXT,
    ground_fare BIGINT
);


CREATE TABLE month (
    month_number BIGINT,
    month_name TEXT
);


CREATE TABLE restriction (
    restriction_code TEXT,
    advance_purchase BIGINT,
    stopovers TEXT,
    saturday_stay_required TEXT,
    minimum_stay BIGINT,
    maximum_stay BIGINT,
    application TEXT,
    no_discounts TEXT
);


CREATE TABLE state (
    state_code TEXT,
    state_name TEXT,
    country_name TEXT
);


CREATE TABLE time_interval (
    period TEXT,
    begin_time BIGINT,
    end_time BIGINT
);


CREATE TABLE time_zone (
    time_zone_code TEXT,
    time_zone_name TEXT,
    hours_from_gmt BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many flights require a round-trip to purchase the fare?`:

"""

Test #86
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total population in cities by country?`:

"""

Test #87
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average length of rivers in each country?`:

"""

Test #88
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many rivers flow through each country?`:

"""

Test #89
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many mountains are there in each country?`:

"""

Test #90
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many lakes are there in each state?`:

"""

Test #91
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which states have the highest population density in people per square kilometer, ordered from highest to lowest?`:

"""

Test #92
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which lakes have the largest areas in square kilometers, ordered from largest to smallest?`:

"""

Test #93
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the top 5 cities with the highest population? Give both city names and the population.`:

"""

Test #94
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the longest rivers in meters, ordered from longest to shortest?`:

"""

Test #95
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the highest mountains in meters, ordered from highest to lowest altitude?`:

"""

Test #96
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of the population of the United States to the population of California?`:

"""

Test #97
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of the length of the Mississippi River to the length of the Rhine River?`:

"""

Test #98
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of the altitude of 'Mount Everest' to the altitude of 'Dhaulagiri'? Match strings exactly`:

"""

Test #99
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How does the population of each city vary in relation to the population of its corresponding state? Return the city name, and the proportion of each city's population relative to the state.`:

"""

Test #100
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Get the ratio of population per area for each state`:

"""

Test #101
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which countries have both lakes and rivers?`:

"""

Test #102
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which states border the state where lake ontario is?`:

"""

Test #103
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which lakes have a name that starts with "Lake"? They should be located in states with an area greater than 1000 square kilometers.`:

"""

Test #104
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the highest point in each state and what is the population density of that state?`:

"""

Test #105
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average length of rivers per country in countries with a lake?`:

"""

Test #106
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using ILIKE
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which states have fewer than a hundred thousand people?`:

"""

Test #107
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using ILIKE
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which rivers traverse at least 3 cities/landmarks?`:

"""

Test #108
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using ILIKE
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names and areas of the lakes in Michigan?`:

"""

Test #109
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using ILIKE
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names and altitudes of the mountains in Nepal?`:

"""

Test #110
Database : geography
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter names using ILIKE
### Input: 
CREATE TABLE border_info (
    state_name TEXT,
    border TEXT
);


CREATE TABLE city (
    city_name TEXT,
    population BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE highlow (
    state_name TEXT,
    highest_elevation TEXT,
    lowest_point TEXT,
    highest_point TEXT,
    lowest_elevation TEXT
);


CREATE TABLE lake (
    lake_name TEXT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE mountain (
    mountain_name TEXT,
    mountain_altitude BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    state_name TEXT
);


CREATE TABLE river (
    river_name TEXT,
    length BIGINT,
    country_name TEXT DEFAULT '' NOT NULL,
    traverse TEXT
);


CREATE TABLE state (
    state_name TEXT,
    population BIGINT,
    area double,
    country_name TEXT DEFAULT '' NOT NULL,
    capital TEXT,
    density double 
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Get the cities in the United States and their population`:

"""

Test #111
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of restaurants serving each type of food?`:

"""

Test #112
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total count of restaurants in each city?`:

"""

Test #113
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average rating of restaurants serving each type of food?`:

"""

Test #114
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many restaurants serve Italian food in each city?`:

"""

Test #115
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many restaurants are there in each city? Order the results by the number of restaurants in descending order.`:

"""

Test #116
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which street has the most number of restaurants?`:

"""

Test #117
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which restaurants serve Italian cuisine or are located in New York? Order the results by the restaurant name.`:

"""

Test #118
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average rating of restaurants in each region? Order the results by the region name.`:

"""

Test #119
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names of the top 3 restaurants with the highest ratings?`:

"""

Test #120
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `List the restaurants starting from the best ratings to the lowest`:

"""

Test #121
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of restaurants with rating > 4.5 to the total number of restaurants in the database.`:

"""

Test #122
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of restaurants with a rating above 4.0 to restaurants with a rating below 4.0 overall?`:

"""

Test #123
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of restaurants with a rating above 4 to restaurants with a rating below 4 in New York?`:

"""

Test #124
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of restaurants serving vegan food to restaurants serving non-vegan food in San Francisco? Match food_type case insensitively`:

"""

Test #125
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of Italian restaurants out of all restaurants in Los Angeles?`:

"""

Test #126
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What cities have more than one restaurants with the same name, and how many of them are there? Return the city name, restaurant name, and restaurant count`:

"""

Test #127
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average rating of restaurants that serve Mexican food in each city?`:

"""

Test #128
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average rating of restaurants in each region?`:

"""

Test #129
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many restaurants serve Italian food in each region?`:

"""

Test #130
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many restaurants are there in each region?`:

"""

Test #131
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Match all strings case-insensitively using wildcard operators
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which city has the highest-rated restaurant?`:

"""

Test #132
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Match all strings case-insensitively using wildcard operators
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What's the name and rating of all the restaurants that have a rating greater than 4 and are located in the city of New York?`:

"""

Test #133
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Match all strings case-insensitively using wildcard operators
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What's the name and food type of all the restaurants located on Market St in San Francisco?`:

"""

Test #134
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Match all strings case-insensitively using wildcard operators
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names of the restaurants that serve Italian food?`:

"""

Test #135
Database : restaurants
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Match all strings case-insensitively using wildcard operators
### Input: CREATE TABLE geographic (
    city_name TEXT,
    county TEXT,
    region TEXT
);


CREATE TABLE location (
    restaurant_id BIGINT,
    house_number BIGINT,
    street_name TEXT,
    city_name TEXT
);


CREATE TABLE restaurant (
    id BIGINT,
    name TEXT,
    food_type TEXT,
    city_name TEXT,
    rating real
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names of the restaurants in Los Angeles that have a rating higher than 4?`:

"""

Test #136
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of papers published per year?`:

"""

Test #137
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of papers published in each year?`:

"""

Test #138
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of papers associated with each dataset?`:

"""

Test #139
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many keyphrases are associated with each paper?`:

"""

Test #140
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many authors have published more than 2 papers?`:

"""

Test #141
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which papers have the highest number of authors, ordered by the number of authors in descending order?`:

"""

Test #142
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of keyphrases associated with each paper, ordered by the paper ID in ascending order?`:

"""

Test #143
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the titles of the papers published in the year 2020, ordered alphabetically?`:

"""

Test #144
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names of the journals in the database, ordered by the length of the journal name from shortest to longest?`:

"""

Test #145
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `For each paper that cites other papers, how many other papers does it cite? Sort by the number of papers cited in descending order`:

"""

Test #146
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of papers that have more than 1 keyphrases to papers that have 1 keyphrase?`:

"""

Test #147
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of papers that have been cited by 2 or more papers to papers that have been cited by less than 2 papers?`:

"""

Test #148
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of papers published in the year 2020 to the total number of papers in the database?`:

"""

Test #149
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of authors who have written 3 or more papers to authors who have written less than 3 papers?`:

"""

Test #150
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the proportion of papers that belong to more than 1 dataset to papers that belong to 1 dataset?`:

"""

Test #151
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which papers are associated with the keyphrase "Machine Learning"?`:

"""

Test #152
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which authors have published the most papers, ordered by the number of papers they have published in descending order?`:

"""

Test #153
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of unique keyphrases associated with papers published in the journal with "IEEE Transactions" in its name?`:

"""

Test #154
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of papers published in each journal, ordered by the journal name?`:

"""

Test #155
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many papers cite each paper in the dataset named "COVID-19 Research"?`:

"""

Test #156
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter strings using ILIKE
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the name of the venue where the paper with paper ID 2 was published, and how many papers were published in total in that venue?`:

"""

Test #157
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Always filter strings with an exact match
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names of the authors who wrote the paper with the title "The Effects of Climate Change on Agriculture"?`:

"""

Test #158
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter strings with case-insensitive matching
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many papers were published in the journal "nature" in the year 2020?`:

"""

Test #159
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter paper names, journal names, using exact matches. Filter keyphrases with case-insensitive matching.
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many papers are associated with the keyphrase "machine learning" and were published in the journal named "IEEE Transactions on Pattern Analysis and Machine Intelligence"?`:

"""

Test #160
Database : scholar
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter paper names using exact matches. Filter keyphrases and journal names with case-insensitive matching.
### Input: 
CREATE TABLE author (
    authorid BIGINT NOT NULL,
    authorname TEXT
);


CREATE TABLE cite (
    citingpaperid BIGINT NOT NULL,
    citedpaperid BIGINT NOT NULL
);


CREATE TABLE dataset (
    datasetid BIGINT NOT NULL,
    datasetname TEXT
);


CREATE TABLE field (
    fieldid BIGINT
);


CREATE TABLE journal (
    journalid BIGINT NOT NULL,
    journalname TEXT
);


CREATE TABLE keyphrase (
    keyphraseid BIGINT NOT NULL,
    keyphrasename TEXT
);


CREATE TABLE paper (
    paperid BIGINT NOT NULL,
    title TEXT,
    venueid BIGINT,
    year BIGINT,
    numciting BIGINT,
    numcitedby BIGINT,
    journalid BIGINT
);


CREATE TABLE paperdataset (
    paperid BIGINT,
    datasetid BIGINT
);


CREATE TABLE paperfield (
    fieldid BIGINT,
    paperid BIGINT
);


CREATE TABLE paperkeyphrase (
    paperid BIGINT,
    keyphraseid BIGINT
);


CREATE TABLE venue (
    venueid BIGINT NOT NULL,
    venuename TEXT
);


CREATE TABLE writes (
    paperid BIGINT,
    authorid BIGINT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many authors wrote papers that were published in the journal "Science" in the year 2020?`:

"""

Test #161
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many reviews were written for businesses located in California in the last 10 months?`:

"""

Test #162
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of check-ins on the 2 days before Saturday?`:

"""

Test #163
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many reviews were there 2 months before the review with id 3?`:

"""

Test #164
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What was the message that came with the tip made exactly 2 months after March 2021?`:

"""

Test #165
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many months between June 2021 and December 2021 had reviews?`:

"""

Test #166
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which neighbourhoods have the highest number of businesses, and how many businesses are located in each neighbourhood?`:

"""

Test #167
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of check-ins for each day of the week for the business with ID "abc123"?`:

"""

Test #168
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total count of check-ins for each business id?`:

"""

Test #169
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Return the name and average rating for each business in new york`:

"""

Test #170
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many check-ins occurred on each day of the week?`:

"""

Test #171
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Please provide a list of business names in New York and their average ratings ordered by the highest average rating first.`:

"""

Test #172
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the latitude and longitude of the business with the highest rating?`:

"""

Test #173
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the top 3 businesses in terms of review count?`:

"""

Test #174
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the names of the businesses in the database, ordered alphabetically?`:

"""

Test #175
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many reviews were posted in each month of the year 2021, ordered by the month?`:

"""

Test #176
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of the number of businesses in each state to the total number of businesses in the database?`:

"""

Test #177
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of open businesses to closed businesses in the city of San Francisco?`:

"""

Test #178
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of check-ins on weekends to check-ins on weekdays for the business named "Mark's Bistro"?`:

"""

Test #179
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the ratio of businesses in the state of California to businesses in the state of New York?`:

"""

Test #180
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How does the ratio of positive reviews (rating > 3) to negative reviews (rating < 3) vary across different categories of businesses, ordered by descending ratio?`:

"""

Test #181
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which users have posted reviews for businesses located in the neighbourhood of "Downtown" and how many reviews have they posted?`:

"""

Test #182
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of reviews for each category in the state of "California"?`:

"""

Test #183
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of reviews for each business category?`:

"""

Test #184
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of check-ins for each business in the state of California?`:

"""

Test #185
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What are the top 2 categories of businesses with the highest average rating?`:

"""

Test #186
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the total number of reviews posted in the year 2021 for businesses in the category "Cafe"?`:

"""

Test #187
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
The rating of businesses in a city refers to the average rating of the businesses in that city. I.e., you must compute the average rating of each business before computing the average rating of businesses in the city.

### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the average rating of businesses in the city of San Francisco?`:

"""

Test #188
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many reviews were posted for each business id in the year 2021?`:

"""

Test #189
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many reviews were posted by users with the name "Sarah Williams" in the month of April 2021?`:

"""

Test #190
Database : yelp
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

### Input: CREATE TABLE business (
    bid BIGINT,
    business_id TEXT,
    name TEXT,
    full_address TEXT,
    city TEXT,
    latitude TEXT,
    longitude TEXT,
    review_count BIGINT,
    is_open BIGINT,
    state TEXT
);


CREATE TABLE category (
    id BIGINT,
    business_id TEXT,
    category_name TEXT
);


CREATE TABLE checkin (
    cid BIGINT,
    business_id TEXT,
    count BIGINT,
    day TEXT
);


CREATE TABLE neighbourhood (
    id BIGINT,
    business_id TEXT,
    neighbourhood_name TEXT
);


CREATE TABLE review (
    rid BIGINT,
    business_id TEXT,
    user_id TEXT,
    rating real,
    TEXT TEXT,
    year BIGINT,
    month TEXT
);


CREATE TABLE tip (
    tip_id BIGINT,
    business_id TEXT,
    TEXT TEXT,
    user_id TEXT,
    likes BIGINT,
    year BIGINT,
    month TEXT
);


CREATE TABLE users (
    uid BIGINT,
    user_id TEXT,
    name TEXT
);



### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many check-ins occurred on Mondays at businesses in the state of California?`:

"""

Test #191
Database : broker
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
-- Dimension tables
CREATE TABLE sbCustomer (
  sbCustId varchar(20) PRIMARY KEY,
  sbCustName varchar(100) NOT NULL,
  sbCustEmail varchar(100) NOT NULL,
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date NOT NULL,
  sbCustStatus varchar(20) NOT NULL -- possible values: active, inactive, suspended, closed
);

CREATE TABLE sbTicker (
  sbTickerId varchar(20) PRIMARY KEY,
  sbTickerSymbol varchar(10) NOT NULL,
  sbTickerName varchar(100) NOT NULL, 
  sbTickerType varchar(20) NOT NULL, -- possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50) NOT NULL,
  sbTickerCurrency varchar(10) NOT NULL,
  sbTickerDb2x varchar(20), -- 2 letter exchange code
  sbTickerIsActive TINYINT(1) NOT NULL
);

-- Fact tables  
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20) NOT NULL,
  sbDpDate date NOT NULL,
  sbDpOpen numeric(10,2) NOT NULL,
  sbDpHigh numeric(10,2) NOT NULL, 
  sbDpLow numeric(10,2) NOT NULL,
  sbDpClose numeric(10,2) NOT NULL,
  sbDpVolume BIGINT NOT NULL,
  sbDpEpochMs BIGINT NOT NULL, -- epoch milliseconds for DATETIME
  sbDpSource varchar(50)
);

CREATE TABLE sbTransaction (
  sbTxId varchar(50) PRIMARY KEY,
  sbTxCustId varchar(20) NOT NULL,
  sbTxTickerId varchar(20) NOT NULL,
  sbTxDateTime DATETIME NOT NULL,
  sbTxType varchar(20) NOT NULL, -- possible values: buy, sell
  sbTxShares numeric(10,2) NOT NULL,
  sbTxPrice numeric(10,2) NOT NULL,
  sbTxAmount numeric(10,2) NOT NULL,
  sbTxCcy varchar(10), -- transaction currency  
  sbTxTax numeric(10,2) NOT NULL,
  sbTxCommission numeric(10,2) NOT NULL,
  sbTxKpx varchar(10), -- internal code
  sbTxSettlementDateStr varchar(25), -- settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) NOT NULL -- possible values: success, fail, pending
);


-- sbCustomer

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Return the customer who made the most sell transactions on 2023-04-01. Return the id, name and number of transactions.`:

"""

Test #192
Database : broker
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
-- Dimension tables
CREATE TABLE sbCustomer (
  sbCustId varchar(20) PRIMARY KEY,
  sbCustName varchar(100) NOT NULL,
  sbCustEmail varchar(100) NOT NULL,
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date NOT NULL,
  sbCustStatus varchar(20) NOT NULL -- possible values: active, inactive, suspended, closed
);

CREATE TABLE sbTicker (
  sbTickerId varchar(20) PRIMARY KEY,
  sbTickerSymbol varchar(10) NOT NULL,
  sbTickerName varchar(100) NOT NULL, 
  sbTickerType varchar(20) NOT NULL, -- possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50) NOT NULL,
  sbTickerCurrency varchar(10) NOT NULL,
  sbTickerDb2x varchar(20), -- 2 letter exchange code
  sbTickerIsActive TINYINT(1) NOT NULL
);

-- Fact tables  
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20) NOT NULL,
  sbDpDate date NOT NULL,
  sbDpOpen numeric(10,2) NOT NULL,
  sbDpHigh numeric(10,2) NOT NULL, 
  sbDpLow numeric(10,2) NOT NULL,
  sbDpClose numeric(10,2) NOT NULL,
  sbDpVolume BIGINT NOT NULL,
  sbDpEpochMs BIGINT NOT NULL, -- epoch milliseconds for DATETIME
  sbDpSource varchar(50)
);

CREATE TABLE sbTransaction (
  sbTxId varchar(50) PRIMARY KEY,
  sbTxCustId varchar(20) NOT NULL,
  sbTxTickerId varchar(20) NOT NULL,
  sbTxDateTime DATETIME NOT NULL,
  sbTxType varchar(20) NOT NULL, -- possible values: buy, sell
  sbTxShares numeric(10,2) NOT NULL,
  sbTxPrice numeric(10,2) NOT NULL,
  sbTxAmount numeric(10,2) NOT NULL,
  sbTxCcy varchar(10), -- transaction currency  
  sbTxTax numeric(10,2) NOT NULL,
  sbTxCommission numeric(10,2) NOT NULL,
  sbTxKpx varchar(10), -- internal code
  sbTxSettlementDateStr varchar(25), -- settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) NOT NULL -- possible values: success, fail, pending
);


-- sbCustomer

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What is the monthly average transaction price for successful transactions in the 1st quarter of 2023?`:

"""

Test #193
Database : broker
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
-- Dimension tables
CREATE TABLE sbCustomer (
  sbCustId varchar(20) PRIMARY KEY,
  sbCustName varchar(100) NOT NULL,
  sbCustEmail varchar(100) NOT NULL,
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date NOT NULL,
  sbCustStatus varchar(20) NOT NULL -- possible values: active, inactive, suspended, closed
);

CREATE TABLE sbTicker (
  sbTickerId varchar(20) PRIMARY KEY,
  sbTickerSymbol varchar(10) NOT NULL,
  sbTickerName varchar(100) NOT NULL, 
  sbTickerType varchar(20) NOT NULL, -- possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50) NOT NULL,
  sbTickerCurrency varchar(10) NOT NULL,
  sbTickerDb2x varchar(20), -- 2 letter exchange code
  sbTickerIsActive TINYINT(1) NOT NULL
);

-- Fact tables  
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20) NOT NULL,
  sbDpDate date NOT NULL,
  sbDpOpen numeric(10,2) NOT NULL,
  sbDpHigh numeric(10,2) NOT NULL, 
  sbDpLow numeric(10,2) NOT NULL,
  sbDpClose numeric(10,2) NOT NULL,
  sbDpVolume BIGINT NOT NULL,
  sbDpEpochMs BIGINT NOT NULL, -- epoch milliseconds for DATETIME
  sbDpSource varchar(50)
);

CREATE TABLE sbTransaction (
  sbTxId varchar(50) PRIMARY KEY,
  sbTxCustId varchar(20) NOT NULL,
  sbTxTickerId varchar(20) NOT NULL,
  sbTxDateTime DATETIME NOT NULL,
  sbTxType varchar(20) NOT NULL, -- possible values: buy, sell
  sbTxShares numeric(10,2) NOT NULL,
  sbTxPrice numeric(10,2) NOT NULL,
  sbTxAmount numeric(10,2) NOT NULL,
  sbTxCcy varchar(10), -- transaction currency  
  sbTxTax numeric(10,2) NOT NULL,
  sbTxCommission numeric(10,2) NOT NULL,
  sbTxKpx varchar(10), -- internal code
  sbTxSettlementDateStr varchar(25), -- settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) NOT NULL -- possible values: success, fail, pending
);


-- sbCustomer

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Lowest daily closest price for symbol `VTI` in the past 7 days`:

"""

Test #194
Database : broker
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
-- Dimension tables
CREATE TABLE sbCustomer (
  sbCustId varchar(20) PRIMARY KEY,
  sbCustName varchar(100) NOT NULL,
  sbCustEmail varchar(100) NOT NULL,
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date NOT NULL,
  sbCustStatus varchar(20) NOT NULL -- possible values: active, inactive, suspended, closed
);

CREATE TABLE sbTicker (
  sbTickerId varchar(20) PRIMARY KEY,
  sbTickerSymbol varchar(10) NOT NULL,
  sbTickerName varchar(100) NOT NULL, 
  sbTickerType varchar(20) NOT NULL, -- possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50) NOT NULL,
  sbTickerCurrency varchar(10) NOT NULL,
  sbTickerDb2x varchar(20), -- 2 letter exchange code
  sbTickerIsActive TINYINT(1) NOT NULL
);

-- Fact tables  
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20) NOT NULL,
  sbDpDate date NOT NULL,
  sbDpOpen numeric(10,2) NOT NULL,
  sbDpHigh numeric(10,2) NOT NULL, 
  sbDpLow numeric(10,2) NOT NULL,
  sbDpClose numeric(10,2) NOT NULL,
  sbDpVolume BIGINT NOT NULL,
  sbDpEpochMs BIGINT NOT NULL, -- epoch milliseconds for DATETIME
  sbDpSource varchar(50)
);

CREATE TABLE sbTransaction (
  sbTxId varchar(50) PRIMARY KEY,
  sbTxCustId varchar(20) NOT NULL,
  sbTxTickerId varchar(20) NOT NULL,
  sbTxDateTime DATETIME NOT NULL,
  sbTxType varchar(20) NOT NULL, -- possible values: buy, sell
  sbTxShares numeric(10,2) NOT NULL,
  sbTxPrice numeric(10,2) NOT NULL,
  sbTxAmount numeric(10,2) NOT NULL,
  sbTxCcy varchar(10), -- transaction currency  
  sbTxTax numeric(10,2) NOT NULL,
  sbTxCommission numeric(10,2) NOT NULL,
  sbTxKpx varchar(10), -- internal code
  sbTxSettlementDateStr varchar(25), -- settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) NOT NULL -- possible values: success, fail, pending
);


-- sbCustomer

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Return the customer id and the difference between their time from joining to their first transaction. Ignore customers who haven't made any transactions.`:

"""

Test #195
Database : broker
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: 
-- Dimension tables
CREATE TABLE sbCustomer (
  sbCustId varchar(20) PRIMARY KEY,
  sbCustName varchar(100) NOT NULL,
  sbCustEmail varchar(100) NOT NULL,
  sbCustPhone varchar(20),
  sbCustAddress1 varchar(200),
  sbCustAddress2 varchar(200),
  sbCustCity varchar(50),
  sbCustState varchar(20),
  sbCustCountry varchar(50),
  sbCustPostalCode varchar(20),
  sbCustJoinDate date NOT NULL,
  sbCustStatus varchar(20) NOT NULL -- possible values: active, inactive, suspended, closed
);

CREATE TABLE sbTicker (
  sbTickerId varchar(20) PRIMARY KEY,
  sbTickerSymbol varchar(10) NOT NULL,
  sbTickerName varchar(100) NOT NULL, 
  sbTickerType varchar(20) NOT NULL, -- possible values: stock, etf, mutualfund
  sbTickerExchange varchar(50) NOT NULL,
  sbTickerCurrency varchar(10) NOT NULL,
  sbTickerDb2x varchar(20), -- 2 letter exchange code
  sbTickerIsActive TINYINT(1) NOT NULL
);

-- Fact tables  
CREATE TABLE sbDailyPrice (
  sbDpTickerId varchar(20) NOT NULL,
  sbDpDate date NOT NULL,
  sbDpOpen numeric(10,2) NOT NULL,
  sbDpHigh numeric(10,2) NOT NULL, 
  sbDpLow numeric(10,2) NOT NULL,
  sbDpClose numeric(10,2) NOT NULL,
  sbDpVolume BIGINT NOT NULL,
  sbDpEpochMs BIGINT NOT NULL, -- epoch milliseconds for DATETIME
  sbDpSource varchar(50)
);

CREATE TABLE sbTransaction (
  sbTxId varchar(50) PRIMARY KEY,
  sbTxCustId varchar(20) NOT NULL,
  sbTxTickerId varchar(20) NOT NULL,
  sbTxDateTime DATETIME NOT NULL,
  sbTxType varchar(20) NOT NULL, -- possible values: buy, sell
  sbTxShares numeric(10,2) NOT NULL,
  sbTxPrice numeric(10,2) NOT NULL,
  sbTxAmount numeric(10,2) NOT NULL,
  sbTxCcy varchar(10), -- transaction currency  
  sbTxTax numeric(10,2) NOT NULL,
  sbTxCommission numeric(10,2) NOT NULL,
  sbTxKpx varchar(10), -- internal code
  sbTxSettlementDateStr varchar(25), -- settlement date as string in yyyyMMdd HH:mm:ss format. NULL if not settled
  sbTxStatus varchar(10) NOT NULL -- possible values: success, fail, pending
);


-- sbCustomer

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `number of transactions by users who joined in the past 70 days`:

"""

Test #196
Database : derm_treatment
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: -- doctor dimension table
CREATE TABLE doctors (
  doc_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, -- possible values: dermatology, immunology, general, oncology
  year_reg INT, -- year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) -- board certification number
);

-- patient dimension table
CREATE TABLE patients (
  patient_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), -- Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2), 
  addr_zip VARCHAR(10),
  ins_type TEXT, -- possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20),
  height_cm FLOAT,
  weight_kg FLOAT
);

-- drug dimension table  
CREATE TABLE drugs (
  drug_id INT AUTO_INCREMENT PRIMARY KEY,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, -- possible values: biologic, small molecule, topical
  moa TEXT, -- mechanism of action
  fda_appr_dt DATE,  -- FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, -- possible values: oral, injection, topical 
  dos_amt DECIMAL(10,2),
  dos_unit VARCHAR(20),
  dos_freq_hrs INT,
  ndc VARCHAR(20) -- National Drug Code  
);

-- diagnosis dimension table
CREATE TABLE diagnoses (
  diag_id INT AUTO_INCREMENT PRIMARY KEY,  
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);

-- treatment fact table
CREATE TABLE treatments (
  treatment_id INT AUTO_INCREMENT PRIMARY KEY,
  patient_id INT REFERENCES patients(patient_id),
  doc_id INT REFERENCES doctors(doc_id), 
  drug_id INT REFERENCES drugs(drug_id),
  diag_id INT REFERENCES diagnoses(diag_id),
  start_dt DATE,
  end_dt DATE,  -- NULL if treatment is ongoing
  is_placebo TINYINT(1),
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT -- possible values: mg, ml, g
);

-- outcome fact table  
  CREATE TABLE outcomes (
    outcome_id INT AUTO_INCREMENT PRIMARY KEY,
    treatment_id INT REFERENCES treatments(treatment_id),
    assess_dt DATE,
    day7_lesion_cnt INT, -- lesion counts on day 7.
    day30_lesion_cnt INT,
    day100_lesion_cnt INT,
    day7_pasi_score DECIMAL(4,1), -- PASI score range 0-72
    day30_pasi_score DECIMAL(4,1),
    day100_pasi_score DECIMAL(4,1),
    day7_tewl DECIMAL(5,2), -- in g/m^2/h  
    day30_tewl DECIMAL(5,2),
    day100_tewl DECIMAL(5,2),  
    day7_itch_vas INT, -- visual analog scale 0-100
    day30_itch_vas INT,
    day100_itch_vas INT,
    day7_hfg DECIMAL(4,1), -- hair growth factor range 0-5  
    day30_hfg DECIMAL(4,1),
    day100_hfg DECIMAL(4,1)
  );

CREATE TABLE adverse_events (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per adverse event per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  reported_dt DATE,
  description TEXT
);

CREATE TABLE concomitant_meds (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per med per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  med_name VARCHAR(100),
  start_dt TEXT, -- YYYY-MM-DD
  end_dt TEXT, -- YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, -- possible values: mg, ml, g
  freq_hrs INT
);

-- insert into dimension tables first


### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment`:

"""

Test #197
Database : derm_treatment
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: -- doctor dimension table
CREATE TABLE doctors (
  doc_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, -- possible values: dermatology, immunology, general, oncology
  year_reg INT, -- year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) -- board certification number
);

-- patient dimension table
CREATE TABLE patients (
  patient_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), -- Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2), 
  addr_zip VARCHAR(10),
  ins_type TEXT, -- possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20),
  height_cm FLOAT,
  weight_kg FLOAT
);

-- drug dimension table  
CREATE TABLE drugs (
  drug_id INT AUTO_INCREMENT PRIMARY KEY,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, -- possible values: biologic, small molecule, topical
  moa TEXT, -- mechanism of action
  fda_appr_dt DATE,  -- FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, -- possible values: oral, injection, topical 
  dos_amt DECIMAL(10,2),
  dos_unit VARCHAR(20),
  dos_freq_hrs INT,
  ndc VARCHAR(20) -- National Drug Code  
);

-- diagnosis dimension table
CREATE TABLE diagnoses (
  diag_id INT AUTO_INCREMENT PRIMARY KEY,  
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);

-- treatment fact table
CREATE TABLE treatments (
  treatment_id INT AUTO_INCREMENT PRIMARY KEY,
  patient_id INT REFERENCES patients(patient_id),
  doc_id INT REFERENCES doctors(doc_id), 
  drug_id INT REFERENCES drugs(drug_id),
  diag_id INT REFERENCES diagnoses(diag_id),
  start_dt DATE,
  end_dt DATE,  -- NULL if treatment is ongoing
  is_placebo TINYINT(1),
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT -- possible values: mg, ml, g
);

-- outcome fact table  
  CREATE TABLE outcomes (
    outcome_id INT AUTO_INCREMENT PRIMARY KEY,
    treatment_id INT REFERENCES treatments(treatment_id),
    assess_dt DATE,
    day7_lesion_cnt INT, -- lesion counts on day 7.
    day30_lesion_cnt INT,
    day100_lesion_cnt INT,
    day7_pasi_score DECIMAL(4,1), -- PASI score range 0-72
    day30_pasi_score DECIMAL(4,1),
    day100_pasi_score DECIMAL(4,1),
    day7_tewl DECIMAL(5,2), -- in g/m^2/h  
    day30_tewl DECIMAL(5,2),
    day100_tewl DECIMAL(5,2),  
    day7_itch_vas INT, -- visual analog scale 0-100
    day30_itch_vas INT,
    day100_itch_vas INT,
    day7_hfg DECIMAL(4,1), -- hair growth factor range 0-5  
    day30_hfg DECIMAL(4,1),
    day100_hfg DECIMAL(4,1)
  );

CREATE TABLE adverse_events (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per adverse event per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  reported_dt DATE,
  description TEXT
);

CREATE TABLE concomitant_meds (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per med per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  med_name VARCHAR(100),
  start_dt TEXT, -- YYYY-MM-DD
  end_dt TEXT, -- YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, -- possible values: mg, ml, g
  freq_hrs INT
);

-- insert into dimension tables first


### Response : Based on your instructions, here is the SQL query I have generated to answer the question `List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.`:

"""

Test #198
Database : derm_treatment
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: -- doctor dimension table
CREATE TABLE doctors (
  doc_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, -- possible values: dermatology, immunology, general, oncology
  year_reg INT, -- year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) -- board certification number
);

-- patient dimension table
CREATE TABLE patients (
  patient_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), -- Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2), 
  addr_zip VARCHAR(10),
  ins_type TEXT, -- possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20),
  height_cm FLOAT,
  weight_kg FLOAT
);

-- drug dimension table  
CREATE TABLE drugs (
  drug_id INT AUTO_INCREMENT PRIMARY KEY,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, -- possible values: biologic, small molecule, topical
  moa TEXT, -- mechanism of action
  fda_appr_dt DATE,  -- FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, -- possible values: oral, injection, topical 
  dos_amt DECIMAL(10,2),
  dos_unit VARCHAR(20),
  dos_freq_hrs INT,
  ndc VARCHAR(20) -- National Drug Code  
);

-- diagnosis dimension table
CREATE TABLE diagnoses (
  diag_id INT AUTO_INCREMENT PRIMARY KEY,  
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);

-- treatment fact table
CREATE TABLE treatments (
  treatment_id INT AUTO_INCREMENT PRIMARY KEY,
  patient_id INT REFERENCES patients(patient_id),
  doc_id INT REFERENCES doctors(doc_id), 
  drug_id INT REFERENCES drugs(drug_id),
  diag_id INT REFERENCES diagnoses(diag_id),
  start_dt DATE,
  end_dt DATE,  -- NULL if treatment is ongoing
  is_placebo TINYINT(1),
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT -- possible values: mg, ml, g
);

-- outcome fact table  
  CREATE TABLE outcomes (
    outcome_id INT AUTO_INCREMENT PRIMARY KEY,
    treatment_id INT REFERENCES treatments(treatment_id),
    assess_dt DATE,
    day7_lesion_cnt INT, -- lesion counts on day 7.
    day30_lesion_cnt INT,
    day100_lesion_cnt INT,
    day7_pasi_score DECIMAL(4,1), -- PASI score range 0-72
    day30_pasi_score DECIMAL(4,1),
    day100_pasi_score DECIMAL(4,1),
    day7_tewl DECIMAL(5,2), -- in g/m^2/h  
    day30_tewl DECIMAL(5,2),
    day100_tewl DECIMAL(5,2),  
    day7_itch_vas INT, -- visual analog scale 0-100
    day30_itch_vas INT,
    day100_itch_vas INT,
    day7_hfg DECIMAL(4,1), -- hair growth factor range 0-5  
    day30_hfg DECIMAL(4,1),
    day100_hfg DECIMAL(4,1)
  );

CREATE TABLE adverse_events (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per adverse event per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  reported_dt DATE,
  description TEXT
);

CREATE TABLE concomitant_meds (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per med per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  med_name VARCHAR(100),
  start_dt TEXT, -- YYYY-MM-DD
  end_dt TEXT, -- YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, -- possible values: mg, ml, g
  freq_hrs INT
);

-- insert into dimension tables first


### Response : Based on your instructions, here is the SQL query I have generated to answer the question `what is average age of all registered male patients with private insurance currently?`:

"""

Test #199
Database : derm_treatment
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: -- doctor dimension table
CREATE TABLE doctors (
  doc_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, -- possible values: dermatology, immunology, general, oncology
  year_reg INT, -- year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) -- board certification number
);

-- patient dimension table
CREATE TABLE patients (
  patient_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), -- Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2), 
  addr_zip VARCHAR(10),
  ins_type TEXT, -- possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20),
  height_cm FLOAT,
  weight_kg FLOAT
);

-- drug dimension table  
CREATE TABLE drugs (
  drug_id INT AUTO_INCREMENT PRIMARY KEY,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, -- possible values: biologic, small molecule, topical
  moa TEXT, -- mechanism of action
  fda_appr_dt DATE,  -- FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, -- possible values: oral, injection, topical 
  dos_amt DECIMAL(10,2),
  dos_unit VARCHAR(20),
  dos_freq_hrs INT,
  ndc VARCHAR(20) -- National Drug Code  
);

-- diagnosis dimension table
CREATE TABLE diagnoses (
  diag_id INT AUTO_INCREMENT PRIMARY KEY,  
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);

-- treatment fact table
CREATE TABLE treatments (
  treatment_id INT AUTO_INCREMENT PRIMARY KEY,
  patient_id INT REFERENCES patients(patient_id),
  doc_id INT REFERENCES doctors(doc_id), 
  drug_id INT REFERENCES drugs(drug_id),
  diag_id INT REFERENCES diagnoses(diag_id),
  start_dt DATE,
  end_dt DATE,  -- NULL if treatment is ongoing
  is_placebo TINYINT(1),
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT -- possible values: mg, ml, g
);

-- outcome fact table  
  CREATE TABLE outcomes (
    outcome_id INT AUTO_INCREMENT PRIMARY KEY,
    treatment_id INT REFERENCES treatments(treatment_id),
    assess_dt DATE,
    day7_lesion_cnt INT, -- lesion counts on day 7.
    day30_lesion_cnt INT,
    day100_lesion_cnt INT,
    day7_pasi_score DECIMAL(4,1), -- PASI score range 0-72
    day30_pasi_score DECIMAL(4,1),
    day100_pasi_score DECIMAL(4,1),
    day7_tewl DECIMAL(5,2), -- in g/m^2/h  
    day30_tewl DECIMAL(5,2),
    day100_tewl DECIMAL(5,2),  
    day7_itch_vas INT, -- visual analog scale 0-100
    day30_itch_vas INT,
    day100_itch_vas INT,
    day7_hfg DECIMAL(4,1), -- hair growth factor range 0-5  
    day30_hfg DECIMAL(4,1),
    day100_hfg DECIMAL(4,1)
  );

CREATE TABLE adverse_events (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per adverse event per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  reported_dt DATE,
  description TEXT
);

CREATE TABLE concomitant_meds (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per med per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  med_name VARCHAR(100),
  start_dt TEXT, -- YYYY-MM-DD
  end_dt TEXT, -- YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, -- possible values: mg, ml, g
  freq_hrs INT
);

-- insert into dimension tables first


### Response : Based on your instructions, here is the SQL query I have generated to answer the question `show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.`:

"""

Test #200
Database : derm_treatment
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: -- doctor dimension table
CREATE TABLE doctors (
  doc_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  specialty TEXT, -- possible values: dermatology, immunology, general, oncology
  year_reg INT, -- year the doctor was registered and obtained license
  med_school_name VARCHAR(100),
  loc_city VARCHAR(50),
  loc_state CHAR(2),
  loc_zip VARCHAR(10),
  bd_cert_num VARCHAR(20) -- board certification number
);

-- patient dimension table
CREATE TABLE patients (
  patient_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  date_of_birth DATE,
  date_of_registration DATE,
  gender VARCHAR(10), -- Male, Female, Others
  email VARCHAR(100),
  phone VARCHAR(20),
  addr_street VARCHAR(100),
  addr_city VARCHAR(50),
  addr_state CHAR(2), 
  addr_zip VARCHAR(10),
  ins_type TEXT, -- possible values: private, medicare, medicaid, uninsured
  ins_policy_num VARCHAR(20),
  height_cm FLOAT,
  weight_kg FLOAT
);

-- drug dimension table  
CREATE TABLE drugs (
  drug_id INT AUTO_INCREMENT PRIMARY KEY,
  drug_name VARCHAR(100),
  manufacturer VARCHAR(100),
  drug_type TEXT, -- possible values: biologic, small molecule, topical
  moa TEXT, -- mechanism of action
  fda_appr_dt DATE,  -- FDA approval date. NULL if drug is still under trial.
  admin_route TEXT, -- possible values: oral, injection, topical 
  dos_amt DECIMAL(10,2),
  dos_unit VARCHAR(20),
  dos_freq_hrs INT,
  ndc VARCHAR(20) -- National Drug Code  
);

-- diagnosis dimension table
CREATE TABLE diagnoses (
  diag_id INT AUTO_INCREMENT PRIMARY KEY,  
  diag_code VARCHAR(10),
  diag_name VARCHAR(100),
  diag_desc TEXT
);

-- treatment fact table
CREATE TABLE treatments (
  treatment_id INT AUTO_INCREMENT PRIMARY KEY,
  patient_id INT REFERENCES patients(patient_id),
  doc_id INT REFERENCES doctors(doc_id), 
  drug_id INT REFERENCES drugs(drug_id),
  diag_id INT REFERENCES diagnoses(diag_id),
  start_dt DATE,
  end_dt DATE,  -- NULL if treatment is ongoing
  is_placebo TINYINT(1),
  tot_drug_amt DECIMAL(10,2),
  drug_unit TEXT -- possible values: mg, ml, g
);

-- outcome fact table  
  CREATE TABLE outcomes (
    outcome_id INT AUTO_INCREMENT PRIMARY KEY,
    treatment_id INT REFERENCES treatments(treatment_id),
    assess_dt DATE,
    day7_lesion_cnt INT, -- lesion counts on day 7.
    day30_lesion_cnt INT,
    day100_lesion_cnt INT,
    day7_pasi_score DECIMAL(4,1), -- PASI score range 0-72
    day30_pasi_score DECIMAL(4,1),
    day100_pasi_score DECIMAL(4,1),
    day7_tewl DECIMAL(5,2), -- in g/m^2/h  
    day30_tewl DECIMAL(5,2),
    day100_tewl DECIMAL(5,2),  
    day7_itch_vas INT, -- visual analog scale 0-100
    day30_itch_vas INT,
    day100_itch_vas INT,
    day7_hfg DECIMAL(4,1), -- hair growth factor range 0-5  
    day30_hfg DECIMAL(4,1),
    day100_hfg DECIMAL(4,1)
  );

CREATE TABLE adverse_events (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per adverse event per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  reported_dt DATE,
  description TEXT
);

CREATE TABLE concomitant_meds (
  id INT AUTO_INCREMENT PRIMARY KEY, -- 1 row per med per treatment_id
  treatment_id INT REFERENCES treatments(treatment_id),
  med_name VARCHAR(100),
  start_dt TEXT, -- YYYY-MM-DD
  end_dt TEXT, -- YYYY-MM-DD NULL if still taking
  dose_amt DECIMAL(10,2),
  dose_unit TEXT, -- possible values: mg, ml, g
  freq_hrs INT
);

-- insert into dimension tables first


### Response : Based on your instructions, here is the SQL query I have generated to answer the question `How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?`:

"""

Test #201
Database : ewallet
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE SCHEMA IF NOT EXISTS consumer_div;

CREATE TABLE users (
  uid BIGINT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  created_at DATETIME NOT NULL,
  last_login_at DATETIME,
  user_type VARCHAR(20) NOT NULL, -- possible values: individual, business, admin
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended, deleted
  country VARCHAR(2), -- 2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), -- possible values: pending, approved, rejected
  kyc_verified_at DATETIME
);

CREATE TABLE merchants (
  mid BIGINT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at DATETIME NOT NULL,
  country VARCHAR(2), -- 2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, -- Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);

CREATE TABLE coupons (
  cid BIGINT PRIMARY KEY,
  merchant_id BIGINT NOT NULL REFERENCES merchants(mid),
  code VARCHAR(20) NOT NULL,
  description TEXT,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  discount_type VARCHAR(20) NOT NULL, -- possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2) NOT NULL,
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, expired
  created_at DATETIME NOT NULL,
  updated_at DATETIME
);

-- Fact Tables --

CREATE TABLE wallet_transactions_daily (
  txid INT AUTO_INCREMENT PRIMARY KEY,
  sender_id BIGINT NOT NULL,
  sender_type INT NOT NULL, -- 0 for user, 1 for merchant
  receiver_id BIGINT NOT NULL,
  receiver_type INT NOT NULL, -- 0 for user, 1 for merchant
  amount DECIMAL(10,2) NOT NULL,
  status VARCHAR(20) NOT NULL, -- possible values: pending, success, failed, refunded
  type VARCHAR(20) NOT NULL, -- possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, -- NULL if transaction doesn't involve a coupon
  created_at DATETIME NOT NULL,
  completed_at DATETIME, -- NULL if failed
  transaction_ref VARCHAR(36) NOT NULL, -- randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);

CREATE TABLE wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE notifications (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL REFERENCES users(uid),
  message TEXT NOT NULL,
  type VARCHAR(50) NOT NULL, -- possible values: transaction, promotion, security, general 
  status VARCHAR(20) NOT NULL, -- possible values: unread, read, archived
  created_at DATETIME NOT NULL,
  read_at DATETIME, -- NULL if not read
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT -- can be external https or deeplink url within the app
);  

CREATE TABLE user_sessions (
  user_id BIGINT NOT NULL,
  session_start_ts DATETIME NOT NULL,
  session_end_ts DATETIME,
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);

CREATE TABLE user_setting_snapshot (
  user_id BIGINT NOT NULL,
  snapshot_date DATE NOT NULL,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INT, -- 0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, -- comma separated list of device ids
  verified_ips TEXT, -- comma separated list of IP addresses
  mfa_enabled TINYINT(1),
  marketing_opt_in TINYINT(1),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, snapshot_date)
);

-- users

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?`:

"""

Test #202
Database : ewallet
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE SCHEMA IF NOT EXISTS consumer_div;

CREATE TABLE users (
  uid BIGINT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  created_at DATETIME NOT NULL,
  last_login_at DATETIME,
  user_type VARCHAR(20) NOT NULL, -- possible values: individual, business, admin
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended, deleted
  country VARCHAR(2), -- 2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), -- possible values: pending, approved, rejected
  kyc_verified_at DATETIME
);

CREATE TABLE merchants (
  mid BIGINT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at DATETIME NOT NULL,
  country VARCHAR(2), -- 2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, -- Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);

CREATE TABLE coupons (
  cid BIGINT PRIMARY KEY,
  merchant_id BIGINT NOT NULL REFERENCES merchants(mid),
  code VARCHAR(20) NOT NULL,
  description TEXT,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  discount_type VARCHAR(20) NOT NULL, -- possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2) NOT NULL,
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, expired
  created_at DATETIME NOT NULL,
  updated_at DATETIME
);

-- Fact Tables --

CREATE TABLE wallet_transactions_daily (
  txid INT AUTO_INCREMENT PRIMARY KEY,
  sender_id BIGINT NOT NULL,
  sender_type INT NOT NULL, -- 0 for user, 1 for merchant
  receiver_id BIGINT NOT NULL,
  receiver_type INT NOT NULL, -- 0 for user, 1 for merchant
  amount DECIMAL(10,2) NOT NULL,
  status VARCHAR(20) NOT NULL, -- possible values: pending, success, failed, refunded
  type VARCHAR(20) NOT NULL, -- possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, -- NULL if transaction doesn't involve a coupon
  created_at DATETIME NOT NULL,
  completed_at DATETIME, -- NULL if failed
  transaction_ref VARCHAR(36) NOT NULL, -- randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);

CREATE TABLE wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE notifications (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL REFERENCES users(uid),
  message TEXT NOT NULL,
  type VARCHAR(50) NOT NULL, -- possible values: transaction, promotion, security, general 
  status VARCHAR(20) NOT NULL, -- possible values: unread, read, archived
  created_at DATETIME NOT NULL,
  read_at DATETIME, -- NULL if not read
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT -- can be external https or deeplink url within the app
);  

CREATE TABLE user_sessions (
  user_id BIGINT NOT NULL,
  session_start_ts DATETIME NOT NULL,
  session_end_ts DATETIME,
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);

CREATE TABLE user_setting_snapshot (
  user_id BIGINT NOT NULL,
  snapshot_date DATE NOT NULL,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INT, -- 0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, -- comma separated list of device ids
  verified_ips TEXT, -- comma separated list of IP addresses
  mfa_enabled TINYINT(1),
  marketing_opt_in TINYINT(1),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, snapshot_date)
);

-- users

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.`:

"""

Test #203
Database : ewallet
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE SCHEMA IF NOT EXISTS consumer_div;

CREATE TABLE users (
  uid BIGINT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  created_at DATETIME NOT NULL,
  last_login_at DATETIME,
  user_type VARCHAR(20) NOT NULL, -- possible values: individual, business, admin
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended, deleted
  country VARCHAR(2), -- 2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), -- possible values: pending, approved, rejected
  kyc_verified_at DATETIME
);

CREATE TABLE merchants (
  mid BIGINT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at DATETIME NOT NULL,
  country VARCHAR(2), -- 2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, -- Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);

CREATE TABLE coupons (
  cid BIGINT PRIMARY KEY,
  merchant_id BIGINT NOT NULL REFERENCES merchants(mid),
  code VARCHAR(20) NOT NULL,
  description TEXT,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  discount_type VARCHAR(20) NOT NULL, -- possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2) NOT NULL,
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, expired
  created_at DATETIME NOT NULL,
  updated_at DATETIME
);

-- Fact Tables --

CREATE TABLE wallet_transactions_daily (
  txid INT AUTO_INCREMENT PRIMARY KEY,
  sender_id BIGINT NOT NULL,
  sender_type INT NOT NULL, -- 0 for user, 1 for merchant
  receiver_id BIGINT NOT NULL,
  receiver_type INT NOT NULL, -- 0 for user, 1 for merchant
  amount DECIMAL(10,2) NOT NULL,
  status VARCHAR(20) NOT NULL, -- possible values: pending, success, failed, refunded
  type VARCHAR(20) NOT NULL, -- possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, -- NULL if transaction doesn't involve a coupon
  created_at DATETIME NOT NULL,
  completed_at DATETIME, -- NULL if failed
  transaction_ref VARCHAR(36) NOT NULL, -- randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);

CREATE TABLE wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE notifications (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL REFERENCES users(uid),
  message TEXT NOT NULL,
  type VARCHAR(50) NOT NULL, -- possible values: transaction, promotion, security, general 
  status VARCHAR(20) NOT NULL, -- possible values: unread, read, archived
  created_at DATETIME NOT NULL,
  read_at DATETIME, -- NULL if not read
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT -- can be external https or deeplink url within the app
);  

CREATE TABLE user_sessions (
  user_id BIGINT NOT NULL,
  session_start_ts DATETIME NOT NULL,
  session_end_ts DATETIME,
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);

CREATE TABLE user_setting_snapshot (
  user_id BIGINT NOT NULL,
  snapshot_date DATE NOT NULL,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INT, -- 0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, -- comma separated list of device ids
  verified_ips TEXT, -- comma separated list of IP addresses
  mfa_enabled TINYINT(1),
  marketing_opt_in TINYINT(1),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, snapshot_date)
);

-- users

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `what was the average user session duration in seconds split by device_type?`:

"""

Test #204
Database : ewallet
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE SCHEMA IF NOT EXISTS consumer_div;

CREATE TABLE users (
  uid BIGINT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  created_at DATETIME NOT NULL,
  last_login_at DATETIME,
  user_type VARCHAR(20) NOT NULL, -- possible values: individual, business, admin
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended, deleted
  country VARCHAR(2), -- 2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), -- possible values: pending, approved, rejected
  kyc_verified_at DATETIME
);

CREATE TABLE merchants (
  mid BIGINT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at DATETIME NOT NULL,
  country VARCHAR(2), -- 2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, -- Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);

CREATE TABLE coupons (
  cid BIGINT PRIMARY KEY,
  merchant_id BIGINT NOT NULL REFERENCES merchants(mid),
  code VARCHAR(20) NOT NULL,
  description TEXT,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  discount_type VARCHAR(20) NOT NULL, -- possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2) NOT NULL,
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, expired
  created_at DATETIME NOT NULL,
  updated_at DATETIME
);

-- Fact Tables --

CREATE TABLE wallet_transactions_daily (
  txid INT AUTO_INCREMENT PRIMARY KEY,
  sender_id BIGINT NOT NULL,
  sender_type INT NOT NULL, -- 0 for user, 1 for merchant
  receiver_id BIGINT NOT NULL,
  receiver_type INT NOT NULL, -- 0 for user, 1 for merchant
  amount DECIMAL(10,2) NOT NULL,
  status VARCHAR(20) NOT NULL, -- possible values: pending, success, failed, refunded
  type VARCHAR(20) NOT NULL, -- possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, -- NULL if transaction doesn't involve a coupon
  created_at DATETIME NOT NULL,
  completed_at DATETIME, -- NULL if failed
  transaction_ref VARCHAR(36) NOT NULL, -- randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);

CREATE TABLE wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE notifications (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL REFERENCES users(uid),
  message TEXT NOT NULL,
  type VARCHAR(50) NOT NULL, -- possible values: transaction, promotion, security, general 
  status VARCHAR(20) NOT NULL, -- possible values: unread, read, archived
  created_at DATETIME NOT NULL,
  read_at DATETIME, -- NULL if not read
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT -- can be external https or deeplink url within the app
);  

CREATE TABLE user_sessions (
  user_id BIGINT NOT NULL,
  session_start_ts DATETIME NOT NULL,
  session_end_ts DATETIME,
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);

CREATE TABLE user_setting_snapshot (
  user_id BIGINT NOT NULL,
  snapshot_date DATE NOT NULL,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INT, -- 0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, -- comma separated list of device ids
  verified_ips TEXT, -- comma separated list of IP addresses
  mfa_enabled TINYINT(1),
  marketing_opt_in TINYINT(1),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, snapshot_date)
);

-- users

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Give me today's median merchant wallet balance for all active merchants whose category contains 'retail'`:

"""

Test #205
Database : ewallet
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE SCHEMA IF NOT EXISTS consumer_div;

CREATE TABLE users (
  uid BIGINT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  created_at DATETIME NOT NULL,
  last_login_at DATETIME,
  user_type VARCHAR(20) NOT NULL, -- possible values: individual, business, admin
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended, deleted
  country VARCHAR(2), -- 2-letter country code
  address_billing TEXT,
  address_delivery TEXT,
  kyc_status VARCHAR(20), -- possible values: pending, approved, rejected
  kyc_verified_at DATETIME
);

CREATE TABLE merchants (
  mid BIGINT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  website_url VARCHAR(200),
  logo_url VARCHAR(200),
  created_at DATETIME NOT NULL,
  country VARCHAR(2), -- 2-letter country code
  state VARCHAR(50),
  city VARCHAR(50),
  postal_code VARCHAR(20),
  address TEXT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, suspended
  category VARCHAR(50),
  sub_category VARCHAR(50),
  mcc INT, -- Merchant Category Code
  contact_name VARCHAR(100),
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20)
);

CREATE TABLE coupons (
  cid BIGINT PRIMARY KEY,
  merchant_id BIGINT NOT NULL REFERENCES merchants(mid),
  code VARCHAR(20) NOT NULL,
  description TEXT,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  discount_type VARCHAR(20) NOT NULL, -- possible values: percentage, fixed_amount
  discount_value DECIMAL(10,2) NOT NULL,
  min_purchase_amount DECIMAL(10,2),
  max_discount_amount DECIMAL(10,2),
  redemption_limit INT,
  status VARCHAR(20) NOT NULL, -- possible values: active, inactive, expired
  created_at DATETIME NOT NULL,
  updated_at DATETIME
);

-- Fact Tables --

CREATE TABLE wallet_transactions_daily (
  txid INT AUTO_INCREMENT PRIMARY KEY,
  sender_id BIGINT NOT NULL,
  sender_type INT NOT NULL, -- 0 for user, 1 for merchant
  receiver_id BIGINT NOT NULL,
  receiver_type INT NOT NULL, -- 0 for user, 1 for merchant
  amount DECIMAL(10,2) NOT NULL,
  status VARCHAR(20) NOT NULL, -- possible values: pending, success, failed, refunded
  type VARCHAR(20) NOT NULL, -- possible values: credit, debit
  description TEXT,
  coupon_id BIGINT, -- NULL if transaction doesn't involve a coupon
  created_at DATETIME NOT NULL,
  completed_at DATETIME, -- NULL if failed
  transaction_ref VARCHAR(36) NOT NULL, -- randomly generated uuid4 for users' reference
  gateway_name VARCHAR(50),
  gateway_ref VARCHAR(50),
  device_id VARCHAR(50),
  ip_address VARCHAR(50),
  user_agent TEXT
);

CREATE TABLE wallet_user_balance_daily (
  user_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE wallet_merchant_balance_daily (
  merchant_id BIGINT,
  balance DECIMAL(10,2) NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE notifications (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL REFERENCES users(uid),
  message TEXT NOT NULL,
  type VARCHAR(50) NOT NULL, -- possible values: transaction, promotion, security, general 
  status VARCHAR(20) NOT NULL, -- possible values: unread, read, archived
  created_at DATETIME NOT NULL,
  read_at DATETIME, -- NULL if not read
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36),
  action_url TEXT -- can be external https or deeplink url within the app
);  

CREATE TABLE user_sessions (
  user_id BIGINT NOT NULL,
  session_start_ts DATETIME NOT NULL,
  session_end_ts DATETIME,
  device_type VARCHAR(10), -- possible values: mobile_app, web_app, email, sms
  device_id VARCHAR(36)
);

CREATE TABLE user_setting_snapshot (
  user_id BIGINT NOT NULL,
  snapshot_date DATE NOT NULL,
  tx_limit_daily DECIMAL(10,2),
  tx_limit_monthly DECIMAL(10,2),
  membership_status INT, -- 0 for bronze, 1 for silver, 2 for gold, 3 for platinum, 4 for VIP
  password_hash VARCHAR(255),
  api_key VARCHAR(255),
  verified_devices TEXT, -- comma separated list of device ids
  verified_ips TEXT, -- comma separated list of IP addresses
  mfa_enabled TINYINT(1),
  marketing_opt_in TINYINT(1),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, snapshot_date)
);

-- users

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date`:

"""

Test #206
Database : car_dealership
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE cars (
  id INT AUTO_INCREMENT PRIMARY KEY,
  make TEXT NOT NULL, -- manufacturer of the car
  model TEXT NOT NULL, -- model name of the car
  year INT NOT NULL, -- year of manufacture
  color TEXT NOT NULL, -- color of the car
  vin_number VARCHAR(17) NOT NULL UNIQUE, -- Vehicle Identification Number
  engine_type TEXT NOT NULL, -- type of engine (e.g., V6, V8, Electric)
  transmission TEXT NOT NULL, -- type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2) NOT NULL, -- cost of the car
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP -- DATETIME when the car was added to the system
);

CREATE TABLE salespersons (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  phone VARCHAR(20) NOT NULL,
  hire_date DATE NOT NULL,
  termination_date DATE,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

  CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    address TEXT NOT NULL,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    zip_code VARCHAR(10) NOT NULL,
    crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

CREATE TABLE sales (
  id INT AUTO_INCREMENT PRIMARY KEY,
  car_id INT NOT NULL REFERENCES cars(id),
  salesperson_id INT NOT NULL REFERENCES salespersons(id),
  customer_id INT NOT NULL REFERENCES customers(id),
  sale_price NUMERIC(10, 2) NOT NULL,
  sale_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE inventory_snapshots (
  id INT AUTO_INCREMENT PRIMARY KEY,
  snapshot_date DATE NOT NULL,
  car_id INT NOT NULL REFERENCES cars(id),
  is_in_inventory TINYINT(1) NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_received (
  id INT AUTO_INCREMENT PRIMARY KEY,
  sale_id INT NOT NULL REFERENCES sales(id),
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: cash, check, credit_card, debit_card, financing
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_made (
  id INT AUTO_INCREMENT PRIMARY KEY,
  vendor_name TEXT NOT NULL,
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: check, bank_transfer, credit_card
  invoice_number VARCHAR(50) NOT NULL,
  invoice_date DATE NOT NULL,
  due_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- cars

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Return the name and phone number of the salesperson with the shortest time from being hired to getting fired. Return the number of days he/she was employed for.`:

"""

Test #207
Database : car_dealership
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE cars (
  id INT AUTO_INCREMENT PRIMARY KEY,
  make TEXT NOT NULL, -- manufacturer of the car
  model TEXT NOT NULL, -- model name of the car
  year INT NOT NULL, -- year of manufacture
  color TEXT NOT NULL, -- color of the car
  vin_number VARCHAR(17) NOT NULL UNIQUE, -- Vehicle Identification Number
  engine_type TEXT NOT NULL, -- type of engine (e.g., V6, V8, Electric)
  transmission TEXT NOT NULL, -- type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2) NOT NULL, -- cost of the car
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP -- DATETIME when the car was added to the system
);

CREATE TABLE salespersons (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  phone VARCHAR(20) NOT NULL,
  hire_date DATE NOT NULL,
  termination_date DATE,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

  CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    address TEXT NOT NULL,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    zip_code VARCHAR(10) NOT NULL,
    crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

CREATE TABLE sales (
  id INT AUTO_INCREMENT PRIMARY KEY,
  car_id INT NOT NULL REFERENCES cars(id),
  salesperson_id INT NOT NULL REFERENCES salespersons(id),
  customer_id INT NOT NULL REFERENCES customers(id),
  sale_price NUMERIC(10, 2) NOT NULL,
  sale_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE inventory_snapshots (
  id INT AUTO_INCREMENT PRIMARY KEY,
  snapshot_date DATE NOT NULL,
  car_id INT NOT NULL REFERENCES cars(id),
  is_in_inventory TINYINT(1) NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_received (
  id INT AUTO_INCREMENT PRIMARY KEY,
  sale_id INT NOT NULL REFERENCES sales(id),
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: cash, check, credit_card, debit_card, financing
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_made (
  id INT AUTO_INCREMENT PRIMARY KEY,
  vendor_name TEXT NOT NULL,
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: check, bank_transfer, credit_card
  invoice_number VARCHAR(50) NOT NULL,
  invoice_date DATE NOT NULL,
  due_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- cars

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Return the number of payments made on weekends to the vendor named 'Utility Company'`:

"""

Test #208
Database : car_dealership
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE cars (
  id INT AUTO_INCREMENT PRIMARY KEY,
  make TEXT NOT NULL, -- manufacturer of the car
  model TEXT NOT NULL, -- model name of the car
  year INT NOT NULL, -- year of manufacture
  color TEXT NOT NULL, -- color of the car
  vin_number VARCHAR(17) NOT NULL UNIQUE, -- Vehicle Identification Number
  engine_type TEXT NOT NULL, -- type of engine (e.g., V6, V8, Electric)
  transmission TEXT NOT NULL, -- type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2) NOT NULL, -- cost of the car
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP -- DATETIME when the car was added to the system
);

CREATE TABLE salespersons (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  phone VARCHAR(20) NOT NULL,
  hire_date DATE NOT NULL,
  termination_date DATE,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

  CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    address TEXT NOT NULL,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    zip_code VARCHAR(10) NOT NULL,
    crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

CREATE TABLE sales (
  id INT AUTO_INCREMENT PRIMARY KEY,
  car_id INT NOT NULL REFERENCES cars(id),
  salesperson_id INT NOT NULL REFERENCES salespersons(id),
  customer_id INT NOT NULL REFERENCES customers(id),
  sale_price NUMERIC(10, 2) NOT NULL,
  sale_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE inventory_snapshots (
  id INT AUTO_INCREMENT PRIMARY KEY,
  snapshot_date DATE NOT NULL,
  car_id INT NOT NULL REFERENCES cars(id),
  is_in_inventory TINYINT(1) NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_received (
  id INT AUTO_INCREMENT PRIMARY KEY,
  sale_id INT NOT NULL REFERENCES sales(id),
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: cash, check, credit_card, debit_card, financing
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_made (
  id INT AUTO_INCREMENT PRIMARY KEY,
  vendor_name TEXT NOT NULL,
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: check, bank_transfer, credit_card
  invoice_number VARCHAR(50) NOT NULL,
  invoice_date DATE NOT NULL,
  due_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- cars

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `show me the daily total amount of payments received in the whole of the previous ISO week not including the current week, split by the payment_method`:

"""

Test #209
Database : car_dealership
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE cars (
  id INT AUTO_INCREMENT PRIMARY KEY,
  make TEXT NOT NULL, -- manufacturer of the car
  model TEXT NOT NULL, -- model name of the car
  year INT NOT NULL, -- year of manufacture
  color TEXT NOT NULL, -- color of the car
  vin_number VARCHAR(17) NOT NULL UNIQUE, -- Vehicle Identification Number
  engine_type TEXT NOT NULL, -- type of engine (e.g., V6, V8, Electric)
  transmission TEXT NOT NULL, -- type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2) NOT NULL, -- cost of the car
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP -- DATETIME when the car was added to the system
);

CREATE TABLE salespersons (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  phone VARCHAR(20) NOT NULL,
  hire_date DATE NOT NULL,
  termination_date DATE,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

  CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    address TEXT NOT NULL,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    zip_code VARCHAR(10) NOT NULL,
    crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

CREATE TABLE sales (
  id INT AUTO_INCREMENT PRIMARY KEY,
  car_id INT NOT NULL REFERENCES cars(id),
  salesperson_id INT NOT NULL REFERENCES salespersons(id),
  customer_id INT NOT NULL REFERENCES customers(id),
  sale_price NUMERIC(10, 2) NOT NULL,
  sale_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE inventory_snapshots (
  id INT AUTO_INCREMENT PRIMARY KEY,
  snapshot_date DATE NOT NULL,
  car_id INT NOT NULL REFERENCES cars(id),
  is_in_inventory TINYINT(1) NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_received (
  id INT AUTO_INCREMENT PRIMARY KEY,
  sale_id INT NOT NULL REFERENCES sales(id),
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: cash, check, credit_card, debit_card, financing
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_made (
  id INT AUTO_INCREMENT PRIMARY KEY,
  vendor_name TEXT NOT NULL,
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: check, bank_transfer, credit_card
  invoice_number VARCHAR(50) NOT NULL,
  invoice_date DATE NOT NULL,
  due_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- cars

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `Which cars were in inventory in the latest snapshot for march 2023? Return the car id, make, model, and year. Cars are considered to be in inventory" if is_in_inventory is True."`:

"""

Test #210
Database : car_dealership
---------------
"""
### Instructions: Your task is to convert a question into a one-line SQL query, given a MYSQL database schema. Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
- When creating a ratio, give it as a float and not an integer
- Break down questions individual steps/columns
- Never create more than 2 columns to answer a question
- Always join and label the columns being returned
- Do not use any of the following functions: quarter, weekofyear, dayofweek, time_format, dayname, time_format
For Example, if the question is ``What is the total number of citations received by each author?`, break it into the following steps:
- Find the sum of each authors publication number
- Join it into a table with the authors name as one column and their publicaiton number as another
So the correct query to respond with would be:
SELECT a.name AS author_name, SUM(p.citation_num) AS total_citations FROM writes w JOIN publication p ON w.pid = p.pid
JOIN author a ON w.aid = a.aid GROUP BY a.name;
### Input: CREATE TABLE cars (
  id INT AUTO_INCREMENT PRIMARY KEY,
  make TEXT NOT NULL, -- manufacturer of the car
  model TEXT NOT NULL, -- model name of the car
  year INT NOT NULL, -- year of manufacture
  color TEXT NOT NULL, -- color of the car
  vin_number VARCHAR(17) NOT NULL UNIQUE, -- Vehicle Identification Number
  engine_type TEXT NOT NULL, -- type of engine (e.g., V6, V8, Electric)
  transmission TEXT NOT NULL, -- type of transmission (e.g., Automatic, Manual)
  cost NUMERIC(10, 2) NOT NULL, -- cost of the car
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP -- DATETIME when the car was added to the system
);

CREATE TABLE salespersons (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  phone VARCHAR(20) NOT NULL,
  hire_date DATE NOT NULL,
  termination_date DATE,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

  CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    address TEXT NOT NULL,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    zip_code VARCHAR(10) NOT NULL,
    crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

CREATE TABLE sales (
  id INT AUTO_INCREMENT PRIMARY KEY,
  car_id INT NOT NULL REFERENCES cars(id),
  salesperson_id INT NOT NULL REFERENCES salespersons(id),
  customer_id INT NOT NULL REFERENCES customers(id),
  sale_price NUMERIC(10, 2) NOT NULL,
  sale_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE inventory_snapshots (
  id INT AUTO_INCREMENT PRIMARY KEY,
  snapshot_date DATE NOT NULL,
  car_id INT NOT NULL REFERENCES cars(id),
  is_in_inventory TINYINT(1) NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_received (
  id INT AUTO_INCREMENT PRIMARY KEY,
  sale_id INT NOT NULL REFERENCES sales(id),
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: cash, check, credit_card, debit_card, financing
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payments_made (
  id INT AUTO_INCREMENT PRIMARY KEY,
  vendor_name TEXT NOT NULL,
  payment_date DATE NOT NULL,
  payment_amount NUMERIC(10, 2) NOT NULL,
  payment_method TEXT NOT NULL, -- values: check, bank_transfer, credit_card
  invoice_number VARCHAR(50) NOT NULL,
  invoice_date DATE NOT NULL,
  due_date DATE NOT NULL,
  crtd_ts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- cars

### Response : Based on your instructions, here is the SQL query I have generated to answer the question `What were the total quarterly sales in 2023 grouped by customer's state? Represent each quarter as the first date in the quarter.`:

"""

