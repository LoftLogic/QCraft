Gold Query #1
SELECT author.name FROM author WHERE author.aid IN (SELECT domain_author.aid FROM domain_author WHERE domain_author.did IN (SELECT domain.did FROM DOMAIN WHERE domain.name IN ('Machine Learning', 'Data Science')) GROUP BY 1 HAVING COUNT(DISTINCT domain_author.did) = 2);SELECT author.aid FROM author WHERE author.aid IN (SELECT domain_author.aid FROM domain_author WHERE domain_author.did IN (SELECT domain.did FROM DOMAIN WHERE domain.name IN ('Machine Learning', 'Data Science')) GROUP BY 1 HAVING COUNT(DISTINCT domain_author.did) = 2);SELECT author.name, author.aid FROM author WHERE author.aid IN (SELECT domain_author.aid FROM domain_author WHERE domain_author.did IN (SELECT domain.did FROM DOMAIN WHERE domain.name IN ('Machine Learning', 'Data Science')) GROUP BY 1 HAVING COUNT(DISTINCT domain_author.did) = 2);
Gold Query #2
SELECT author.name, SUM(publication.citation_num) AS total_citations FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid GROUP BY author.name ORDER BY total_citations DESC;
Gold Query #3
SELECT publication.year, COUNT(DISTINCT publication.pid) AS total_publications FROM publication GROUP BY publication.year ORDER BY CASE WHEN publication.year IS NULL THEN 1 ELSE 0 END, publication.year;
Gold Query #4
SELECT domain.name, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY domain.name;
SELECT domain.did, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY domain.did;SELECT domain.name, domain.did, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY domain.name, domain.did;
Gold Query #5
SELECT publication.year, AVG(publication.citation_num) AS average_citations FROM publication GROUP BY publication.year ORDER BY CASE WHEN publication.year IS NULL THEN 1 ELSE 0 END, publication.year;
Gold Query #6
SELECT publication.title FROM publication ORDER BY publication.citation_num DESC LIMIT 1;
Gold Query #7
SELECT d.name, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN domain_author AS da ON a.aid = da.aid JOIN domain AS d ON da.did = d.did GROUP BY d.name ORDER BY CASE WHEN author_count IS NULL THEN 1 ELSE 0 END DESC, author_count DESC LIMIT 5;SELECT d.did, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN domain_author AS da ON a.aid = da.aid JOIN domain AS d ON da.did = d.did GROUP BY d.did ORDER BY CASE WHEN author_count IS NULL THEN 1 ELSE 0 END DESC, author_count DESC LIMIT 5;SELECT d.name, d.did, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN domain_author AS da ON a.aid = da.aid JOIN domain AS d ON da.did = d.did GROUP BY d.name, d.did ORDER BY CASE WHEN author_count IS NULL THEN 1 ELSE 0 END DESC, author_count DESC LIMIT 5;
Gold Query #8
SELECT publication.title FROM publication ORDER BY CASE WHEN publication.reference_num IS NULL THEN 1 ELSE 0 END DESC, publication.reference_num DESC LIMIT 3;
Gold Query #9
SELECT publication.title, publication.citation_num FROM publication ORDER BY CASE WHEN publication.citation_num IS NULL THEN 1 ELSE 0 END DESC, publication.citation_num DESC LIMIT 3;SELECT publication.pid, publication.citation_num FROM publication ORDER BY CASE WHEN publication.citation_num IS NULL THEN 1 ELSE 0 END DESC, publication.citation_num DESC LIMIT 3;SELECT publication.title, publication.pid, publication.citation_num FROM publication ORDER BY CASE WHEN publication.citation_num IS NULL THEN 1 ELSE 0 END DESC, publication.citation_num DESC LIMIT 3;
Gold Query #10
SELECT DISTINCT publication.title FROM publication ORDER BY CASE WHEN publication.title IS NULL THEN 1 ELSE 0 END, publication.title ASC;
Gold Query #11
SELECT CAST(COUNT(DISTINCT publication.pid) AS DOUBLE) / NULLIF(COUNT(DISTINCT author.aid), 0) AS publication_to_author_ratio FROM publication, author;
Gold Query #12
SELECT CAST(COUNT(DISTINCT CASE WHEN NOT cid IS NULL THEN pid END) AS DOUBLE) / NULLIF(COUNT(DISTINCT CASE WHEN NOT jid IS NULL THEN pid END), 0) AS ratio FROM publication;
Gold Query #13
SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS DOUBLE) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_publication LEFT JOIN domain_keyword ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC;SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS DOUBLE) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_keyword LEFT JOIN domain_publication ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC;SELECT d.did, COALESCE(CAST(COUNT(DISTINCT dp.pid) AS DOUBLE) / NULLIF(COUNT(DISTINCT dk.kid), 0), 0) AS publication_to_keyword_ratio FROM domain AS d LEFT JOIN domain_publication AS dp ON d.did = dp.did LEFT JOIN domain_keyword AS dk ON d.did = dk.did GROUP BY d.did ORDER BY publication_to_keyword_ratio DESC;
Gold Query #14
SELECT publication.year, COUNT(DISTINCT publication.pid) AS num_publications, COUNT(DISTINCT publication.jid) AS num_journals, CAST(COUNT(DISTINCT publication.pid) AS DOUBLE) / NULLIF(COUNT(DISTINCT publication.jid), 0) AS ratio FROM publication GROUP BY publication.year ORDER BY CASE WHEN publication.year IS NULL THEN 1 ELSE 0 END, publication.year;
Gold Query #15
SELECT organization.continent, CAST(COUNT(DISTINCT author.aid) AS DOUBLE) / NULLIF(COUNT(DISTINCT organization.oid), 0) AS ratio FROM organization LEFT JOIN author ON author.oid = organization.oid GROUP BY organization.continent ORDER BY ratio DESC;WITH author_counts AS (SELECT o.continent, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN organization AS o ON a.oid = o.oid GROUP BY o.continent), organization_counts AS (SELECT o.continent, COUNT(DISTINCT o.oid) AS organization_count FROM organization AS o GROUP BY o.continent) SELECT ac.continent, CAST(ac.author_count AS FLOAT) / NULLIF(oc.organization_count, 0) AS author_to_organization_ratio FROM author_counts AS ac JOIN organization_counts AS oc ON ac.continent = oc.continent ORDER BY author_to_organization_ratio DESC;
Gold Query #16
SELECT author.name, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY author.name ORDER BY publication_count DESC LIMIT 1;SELECT author.aid, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY author.aid ORDER BY publication_count DESC LIMIT 1;SELECT author.name, author.aid, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY author.name, author.aid ORDER BY publication_count DESC LIMIT 1;
Gold Query #17
SELECT conference.name, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY conference.name ORDER BY CASE WHEN total_publications IS NULL THEN 1 ELSE 0 END DESC, total_publications DESC;SELECT conference.cid, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY conference.cid ORDER BY CASE WHEN total_publications IS NULL THEN 1 ELSE 0 END DESC, total_publications DESC;SELECT conference.name, conference.cid, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY conference.name, conference.cid ORDER BY CASE WHEN total_publications IS NULL THEN 1 ELSE 0 END DESC, total_publications DESC;
Gold Query #18
SELECT journal.name, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid = journal.jid GROUP BY journal.name ORDER BY total_publications DESC;SELECT journal.jid, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid = journal.jid GROUP BY journal.jid ORDER BY total_publications DESC;SELECT journal.name, journal.jid, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid = journal.jid GROUP BY journal.name, journal.jid ORDER BY total_publications DESC;SELECT journal.name, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid = publication.jid GROUP BY journal.name ORDER BY total_publications DESC;SELECT journal.jid, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid = publication.jid GROUP BY journal.jid ORDER BY total_publications DESC;SELECT journal.name, journal.jid, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid = publication.jid GROUP BY journal.name, journal.jid ORDER BY total_publications DESC;
Gold Query #19
SELECT conference.name, COUNT(publication.pid) AS num_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY conference.name, conference.cid ORDER BY num_publications DESC;
Gold Query #20
SELECT COUNT(DISTINCT publication.pid) FROM publication JOIN journal ON publication.jid = journal.jid WHERE LOWER(journal.name) LIKE LOWER('J%');
Gold Query #21
SELECT DISTINCT organization.name FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';SELECT DISTINCT organization.oid FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';SELECT DISTINCT organization.name, organization.oid FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';
Gold Query #22
SELECT DISTINCT a2.name FROM author AS a1 JOIN domain_author AS da1 ON a1.aid = da1.aid JOIN domain_author AS da2 ON da1.did = da2.did JOIN author AS a2 ON da2.aid = a2.aid WHERE LOWER(LOWER(a1.name)) LIKE LOWER('%martin%');SELECT DISTINCT a2.aid FROM author AS a1 JOIN domain_author AS da1 ON a1.aid = da1.aid JOIN domain_author AS da2 ON da1.did = da2.did JOIN author AS a2 ON da2.aid = a2.aid WHERE LOWER(LOWER(a1.name)) LIKE LOWER('%martin%');SELECT DISTINCT a2.name, a2.aid FROM author AS a1 JOIN domain_author AS da1 ON a1.aid = da1.aid JOIN domain_author AS da2 ON da1.did = da2.did JOIN author AS a2 ON da2.aid = a2.aid WHERE LOWER(LOWER(a1.name)) LIKE LOWER('%martin%');
Gold Query #23
SELECT DISTINCT name FROM author WHERE oid IS NULL;SELECT DISTINCT aid FROM author WHERE oid IS NULL;SELECT DISTINCT name, aid FROM author WHERE oid IS NULL;
Gold Query #24
SELECT DISTINCT publication.title FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE LOWER(domain.name) LIKE LOWER('%Sociology%') AND publication.year = 2020 AND publication.cid = domain_conference.cid;SELECT DISTINCT publication.pid FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE LOWER(domain.name) LIKE LOWER('%Sociology%') AND publication.year = 2020 AND publication.cid = domain_conference.cid;SELECT DISTINCT publication.title, publication.pid FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE LOWER(domain.name) LIKE LOWER('%Sociology%') AND publication.year = 2020 AND publication.cid = domain_conference.cid;
Gold Query #25
SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE LOWER(domain.name) LIKE LOWER('%computer%science%');
Gold Query #26
SELECT DATE_ADD('0000-01-01 00:00:00', INTERVAL (TIMESTAMPDIFF(MONTH, '0000-01-01 00:00:00', s.admit_term)) MONTH) AS month, COUNT(*) AS total_students FROM student AS s GROUP BY MONTH ORDER BY CASE WHEN total_students IS NULL THEN 1 ELSE 0 END DESC, total_students DESC LIMIT 1;
Gold Query #27
SELECT AVG(predicted_graduation_semester - admit_term) AS average_predicted_time_to_graduation FROM student;
Gold Query #28
SELECT COUNT(*) AS num_students_graduated FROM student WHERE predicted_graduation_semester >= DATE_ADD('0000-01-01 00:00:00', INTERVAL (TIMESTAMPDIFF(YEAR, '0000-01-01 00:00:00', CURRENT_DATE)) YEAR) - INTERVAL '10' YEAR;
Gold Query #29
SELECT CAST(DATEDIFF(CURRENT_DATE, MAX(admit_term)) AS SIGNED) AS duration_since_last_admitted_student FROM student;
Gold Query #30
SELECT DISTINCT co.course_id FROM advising.course_offering AS co JOIN advising.offering_instructor AS oi ON co.offering_id = oi.offering_id WHERE (co.semester = 1 OR co.semester = 2) AND co.end_time < '13:00:00' AND co.thursday IS NOT NULL;
Gold Query #31
SELECT course_tags_count.course_id, SUM(course_tags_count.hilarious) AS total_hilarious FROM course_tags_count GROUP BY course_tags_count.course_id;
Gold Query #32
SELECT i.name, AVG(c.clarity_score) FROM course AS c JOIN course_offering AS co ON c.course_id = co.course_id JOIN offering_instructor AS oi ON co.offering_id = oi.offering_id JOIN instructor AS i ON oi.instructor_id = i.instructor_id GROUP BY i.name;SELECT i.instructor_id, AVG(c.clarity_score) FROM course AS c JOIN course_offering AS co ON c.course_id = co.course_id JOIN offering_instructor AS oi ON co.offering_id = oi.offering_id JOIN instructor AS i ON oi.instructor_id = i.instructor_id GROUP BY i.instructor_id;SELECT i.name, i.instructor_id, AVG(c.clarity_score) FROM course AS c JOIN course_offering AS co ON c.course_id = co.course_id JOIN offering_instructor AS oi ON co.offering_id = oi.offering_id JOIN instructor AS i ON oi.instructor_id = i.instructor_id GROUP BY i.name, i.instructor_id;
Gold Query #33
SELECT course_offering.has_final_exam, COUNT(offering_id) AS num_courses FROM course_offering GROUP BY course_offering.has_final_exam;SELECT COUNT(CASE WHEN co.has_final_exam THEN 1 END) AS num_with_final_exam, COUNT(CASE WHEN NOT co.has_final_exam THEN 1 END) AS num_without_final_exam FROM course_offering AS co;
Gold Query #34
SELECT course.department, COUNT(DISTINCT course.course_id) AS num_courses FROM course GROUP BY course.department ORDER BY num_courses DESC;
Gold Query #35
SELECT course_offering.semester, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM course_offering GROUP BY course_offering.semester ORDER BY CASE WHEN course_offering.semester IS NULL THEN 1 ELSE 0 END, course_offering.semester;SELECT semester.semester_id, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM semester LEFT JOIN course_offering ON semester.semester_id = course_offering.semester GROUP BY semester.semester_id;
Gold Query #36
SELECT course.name, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;SELECT course.name, course.course_id, course.number, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC LIMIT 1;
Gold Query #37
SELECT course_tags_count.course_id, course_tags_count.participation FROM course_tags_count ORDER BY course_tags_count.participation DESC;
Gold Query #38
SELECT course.course_id, SUM(course.num_enrolled) AS total_students FROM course GROUP BY course.course_id ORDER BY total_students DESC;SELECT course.name, SUM(course.num_enrolled) AS total_students FROM course GROUP BY course.name ORDER BY total_students DESC;SELECT course.number, SUM(course.num_enrolled) AS total_students FROM course GROUP BY course.number ORDER BY total_students DESC;SELECT course.course_id, course.name, SUM(course.num_enrolled) AS total_students FROM course GROUP BY course.course_id, course.name ORDER BY total_students DESC;SELECT course.course_id, course.number, SUM(course.num_enrolled) AS total_students FROM course GROUP BY course.course_id, course.number ORDER BY total_students DESC;SELECT course.name, course.number, SUM(course.num_enrolled) AS total_students FROM course GROUP BY course.name, course.number ORDER BY total_students DESC;SELECT course.course_id, course.name, course.number, SUM(course.num_enrolled) AS total_students FROM course GROUP BY course.course_id, course.name, course.number ORDER BY total_students DESC;
Gold Query #39
SELECT student.student_id, student.total_credit FROM student ORDER BY student.total_credit DESC;
Gold Query #40
SELECT instructor.name, COUNT(offering_instructor.offering_id) AS num_courses FROM offering_instructor JOIN instructor ON offering_instructor.instructor_id = instructor.instructor_id GROUP BY instructor.name ORDER BY CASE WHEN num_courses IS NULL THEN 1 ELSE 0 END DESC, num_courses DESC LIMIT 1;
Gold Query #41
SELECT CAST(SUM(CASE WHEN c.has_exams THEN c.num_enrolled ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN NOT c.has_exams THEN c.num_enrolled ELSE 0 END) AS ratio FROM course AS c;
Gold Query #42
SELECT course_tags_count.course_id, CAST(course_tags_count.clear_grading AS DOUBLE) / NULLIF(course_tags_count.good_feedback, 0) AS ratio FROM course_tags_count ORDER BY CASE WHEN course_tags_count.course_id IS NULL THEN 1 ELSE 0 END, course_tags_count.course_id;
Gold Query #43
SELECT course_offering.semester, CAST(SUM(CASE WHEN course.has_projects THEN 1 ELSE 0 END) AS DOUBLE) / NULLIF(SUM(CASE WHEN course.has_exams THEN 1 ELSE 0 END), 0) AS ratio FROM course JOIN course_offering ON course.course_id = course_offering.course_id GROUP BY course_offering.semester ORDER BY CASE WHEN course_offering.semester IS NULL THEN 1 ELSE 0 END, course_offering.semester;
Gold Query #44
SELECT course.course_id, CAST(course.helpfulness_score AS DOUBLE) / NULLIF(course.clarity_score, 0) AS ratio FROM course;
Gold Query #45
SELECT course.course_id, CAST(course.num_enrolled AS DOUBLE) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY CASE WHEN student_review_ratio IS NULL THEN 1 ELSE 0 END, student_review_ratio;SELECT course.name, CAST(course.num_enrolled AS DOUBLE) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY CASE WHEN student_review_ratio IS NULL THEN 1 ELSE 0 END, student_review_ratio;SELECT course.number, CAST(course.num_enrolled AS DOUBLE) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY CASE WHEN student_review_ratio IS NULL THEN 1 ELSE 0 END, student_review_ratio;SELECT course.course_id, course.name, CAST(course.num_enrolled AS DOUBLE) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY CASE WHEN student_review_ratio IS NULL THEN 1 ELSE 0 END, student_review_ratio;SELECT course.course_id, course.number, CAST(course.num_enrolled AS DOUBLE) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY CASE WHEN student_review_ratio IS NULL THEN 1 ELSE 0 END, student_review_ratio;SELECT course.name, course.number, CAST(course.num_enrolled AS DOUBLE) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY CASE WHEN student_review_ratio IS NULL THEN 1 ELSE 0 END, student_review_ratio;SELECT course.course_id, course.name, course.number, CAST(course.num_enrolled AS DOUBLE) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY CASE WHEN student_review_ratio IS NULL THEN 1 ELSE 0 END, student_review_ratio;
Gold Query #46
SELECT DISTINCT course.name AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE LOWER(program.name) LIKE LOWER('%Computer Science%');SELECT DISTINCT course.course_id AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE LOWER(program.name) LIKE LOWER('%Computer Science%');SELECT DISTINCT course.number AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE LOWER(program.name) LIKE LOWER('%Computer Science%');SELECT DISTINCT course.name, course.course_id AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE LOWER(program.name) LIKE LOWER('%Computer Science%');SELECT DISTINCT course.name, course.number AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE LOWER(program.name) LIKE LOWER('%Computer Science%');SELECT DISTINCT course.course_id, course.number AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE LOWER(program.name) LIKE LOWER('%Computer Science%');SELECT DISTINCT course.name, course.course_id, course.number AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE LOWER(program.name) LIKE LOWER('%Computer Science%');
Gold Query #47
SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = TRUE OR course_offering.has_final_exam = TRUE;
Gold Query #48
SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = TRUE OR course_offering.has_final_exam = TRUE;
Gold Query #49
SELECT program.name, SUM(student.total_credit) AS total_credits FROM student JOIN program ON student.program_id = program.program_id GROUP BY program.name;SELECT program.program_id, SUM(student.total_credit) AS total_credits FROM student JOIN program ON student.program_id = program.program_id GROUP BY program.program_id;SELECT program.name, program.program_id, SUM(student.total_credit) AS total_credits FROM student JOIN program ON student.program_id = program.program_id GROUP BY program.name, program.program_id;
Gold Query #50
SELECT program.name, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.name ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;SELECT program.program_id, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.program_id ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;SELECT program.name, program.program_id, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE NOT student.declare_major IS NULL GROUP BY program.name, program.program_id ORDER BY CASE WHEN number_of_students IS NULL THEN 1 ELSE 0 END DESC, number_of_students DESC;
Gold Query #51
SELECT student.firstname, student.lastname FROM student WHERE NOT student.minor IS NULL ORDER BY CASE WHEN student.lastname IS NULL THEN 1 ELSE 0 END, student.lastname;
Gold Query #52
SELECT AVG(student.total_gpa) FROM student JOIN program ON student.program_id = program.program_id WHERE LOWER(program.name) = 'mathematics';
Gold Query #53
SELECT course.name FROM course WHERE LOWER(course.department) LIKE LOWER('%Computer Science%') ORDER BY CASE WHEN course.name IS NULL THEN 1 ELSE 0 END, course.name ASC;
Gold Query #54
SELECT course.name, course.easiness_score FROM course WHERE course.department = 'Computer Science';SELECT course.course_id, course.easiness_score FROM course WHERE course.department = 'Computer Science';SELECT course.number, course.easiness_score FROM course WHERE course.department = 'Computer Science';SELECT course.name, course.course_id, course.easiness_score FROM course WHERE course.department = 'Computer Science';SELECT course.name, course.number, course.easiness_score FROM course WHERE course.department = 'Computer Science';SELECT course.course_id, course.number, course.easiness_score FROM course WHERE course.department = 'Computer Science';SELECT course.name, course.course_id, course.number, course.easiness_score FROM course WHERE course.department = 'Computer Science';
Gold Query #55
SELECT DISTINCT student_id FROM student_record WHERE student_record.how = 'in-person' AND student_record.grade IN ('A', 'C');
Gold Query #56
SELECT flight.flight_number, CAST((arrival_time - departure_time) / 60 AS SIGNED) AS duration_minutes FROM flight ORDER BY CASE WHEN duration_minutes IS NULL THEN 1 ELSE 0 END, duration_minutes LIMIT 1;SELECT flight.flight_id, CAST((arrival_time - departure_time) / 60 AS SIGNED) AS duration_minutes FROM flight ORDER BY CASE WHEN duration_minutes IS NULL THEN 1 ELSE 0 END, duration_minutes LIMIT 1;SELECT flight.flight_number, flight.flight_id, CAST((arrival_time - departure_time) / 60 AS SIGNED) AS duration_minutes FROM flight ORDER BY CASE WHEN duration_minutes IS NULL THEN 1 ELSE 0 END, duration_minutes LIMIT 1;
Gold Query #57
SELECT AVG(FROM_UNIXTIME(arrival_time) - FROM_UNIXTIME(departure_time) - INTERVAL '34' MINUTE) AS average_duration FROM flight;SELECT AVG(arrival_time - departure_time) / 60 - 34 AS average_duration FROM flight;
Gold Query #58
SELECT month.month_name, COUNT(*) AS departure_count FROM flight JOIN month ON EXTRACT(MONTH FROM FROM_UNIXTIME(flight.departure_time)) = month.month_number GROUP BY month.month_name, month.month_number ORDER BY CASE WHEN month.month_number IS NULL THEN 1 ELSE 0 END, month.month_number;SELECT DATE_ADD('0000-01-01 00:00:00', INTERVAL (TIMESTAMPDIFF(MONTH, '0000-01-01 00:00:00', FROM_UNIXTIME(flight.departure_time))) MONTH) AS month, COUNT(*) AS num_departures FROM flight GROUP BY MONTH ORDER BY CASE WHEN MONTH IS NULL THEN 1 ELSE 0 END, MONTH;
Gold Query #59
SELECT DATE_FORMAT(CAST(FROM_UNIXTIME(departure_time) AS TIME), '%H:%i') AS earliest_departure_time FROM flight ORDER BY CASE WHEN earliest_departure_time IS NULL THEN 1 ELSE 0 END, earliest_departure_time LIMIT 1;
Gold Query #60
SELECT DATEDIFF(CURRENT_DATE, FROM_UNIXTIME(departure_time)) AS difference_in_days FROM flight ORDER BY CASE WHEN departure_time IS NULL THEN 1 ELSE 0 END, departure_time LIMIT 1;SELECT DATEDIFF(CURRENT_DATE, FROM_UNIXTIME(MIN(f.departure_time))) AS days_difference FROM flight AS f;
Gold Query #61
SELECT fare.fare_airline, SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare GROUP BY fare.fare_airline ORDER BY CASE WHEN total_round_trip_cost IS NULL THEN 1 ELSE 0 END DESC, total_round_trip_cost DESC;
Gold Query #62
SELECT fare.fare_airline, AVG(fare.round_trip_cost) AS average_cost FROM fare WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY fare.fare_airline ORDER BY average_cost DESC;SELECT airline.airline_name, AVG(fare.round_trip_cost) AS avg_round_trip_cost FROM fare JOIN airline ON fare.fare_airline = airline.airline_code WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY airline.airline_name ORDER BY CASE WHEN avg_round_trip_cost IS NULL THEN 1 ELSE 0 END DESC, avg_round_trip_cost DESC;
Gold Query #63
SELECT f.from_airport, f.to_airport, AVG(f.one_direction_cost) AS average_cost FROM fare AS f GROUP BY f.from_airport, f.to_airport ORDER BY CASE WHEN f.from_airport IS NULL THEN 1 ELSE 0 END, f.from_airport, CASE WHEN f.to_airport IS NULL THEN 1 ELSE 0 END, f.to_airport;
Gold Query #64
Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.
Gold Query #65
SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport LEFT JOIN flight ON airport.airport_code = flight.from_airport AND flight.connections = 0 GROUP BY airport.airport_code;SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport JOIN flight ON airport.airport_code = flight.from_airport WHERE flight.connections = 0 GROUP BY airport.airport_code;
Gold Query #66
SELECT flight.flight_id, (flight.arrival_time - flight.departure_time) AS duration FROM flight WHERE to_airport = 'ORD' ORDER BY CASE WHEN duration IS NULL THEN 1 ELSE 0 END, duration ASC;
Gold Query #67
SELECT airport.airport_name, airport.minimum_connect_time FROM airport ORDER BY CASE WHEN airport.minimum_connect_time IS NULL THEN 1 ELSE 0 END, airport.minimum_connect_time ASC;SELECT airport.airport_code, airport.minimum_connect_time FROM airport ORDER BY CASE WHEN airport.minimum_connect_time IS NULL THEN 1 ELSE 0 END, airport.minimum_connect_time ASC;SELECT airport.airport_name, airport.airport_code, airport.minimum_connect_time FROM airport ORDER BY CASE WHEN airport.minimum_connect_time IS NULL THEN 1 ELSE 0 END, airport.minimum_connect_time ASC;
Gold Query #68
SELECT aircraft.aircraft_code FROM aircraft ORDER BY pay_load DESC LIMIT 1;
Gold Query #69
SELECT airline.airline_name, COUNT(flight.flight_id) AS number_of_flights FROM flight JOIN airline ON flight.airline_code = airline.airline_code GROUP BY airline.airline_name ORDER BY number_of_flights DESC LIMIT 2;SELECT airline.airline_code, COUNT(flight.flight_id) AS number_of_flights FROM flight JOIN airline ON flight.airline_code = airline.airline_code GROUP BY airline.airline_code ORDER BY number_of_flights DESC LIMIT 2;SELECT airline.airline_name, airline.airline_code, COUNT(flight.flight_id) AS number_of_flights FROM flight JOIN airline ON flight.airline_code = airline.airline_code GROUP BY airline.airline_name, airline.airline_code ORDER BY number_of_flights DESC LIMIT 2;
Gold Query #70
SELECT aircraft.aircraft_code FROM aircraft WHERE aircraft.cruising_speed > 200 ORDER BY CASE WHEN aircraft.aircraft_code IS NULL THEN 1 ELSE 0 END, aircraft.aircraft_code ASC;
Gold Query #71
SELECT CAST(aircraft.range_miles AS DOUBLE) / NULLIF(aircraft.pay_load, 0) AS range_to_payload_ratio FROM aircraft;
Gold Query #72
SELECT fare.fare_id, CAST(fare.one_direction_cost AS DOUBLE) / NULLIF(fare.round_trip_cost, 0) AS cost_ratio FROM fare ORDER BY CASE WHEN cost_ratio IS NULL THEN 1 ELSE 0 END, cost_ratio;
Gold Query #73
SELECT aircraft.aircraft_code, CAST(aircraft.capacity AS DOUBLE) / NULLIF(aircraft.range_miles, 0) AS capacity_range_ratio FROM aircraft;
Gold Query #74
SELECT flight.airline_code, CAST(SUM(CASE WHEN flight.stops > 0 THEN 1 ELSE 0 END) AS DOUBLE) / NULLIF(COUNT(*), 0) AS ratio FROM flight GROUP BY flight.airline_code;
Gold Query #75
SELECT aircraft.manufacturer, AVG(CAST(aircraft.cruising_speed AS DOUBLE) / NULLIF(aircraft.pay_load, 0)) AS speed_payload_ratio FROM aircraft GROUP BY aircraft.manufacturer ORDER BY speed_payload_ratio DESC;
Gold Query #76
SELECT flight.flight_id, food_service.meal_description FROM flight JOIN food_service ON flight.meal_code = food_service.meal_code WHERE LOWER(food_service.compartment) LIKE '%first class%';
Gold Query #77
SELECT DISTINCT airline.airline_name FROM flight_stop JOIN airport ON flight_stop.stop_airport = airport.airport_code JOIN flight ON flight_stop.flight_id = flight.flight_id JOIN airline ON flight.airline_code = airline.airline_code WHERE LOWER(airport.airport_location) LIKE LOWER('%Dallas%');SELECT DISTINCT airline.airline_code FROM flight_stop JOIN airport ON flight_stop.stop_airport = airport.airport_code JOIN flight ON flight_stop.flight_id = flight.flight_id JOIN airline ON flight.airline_code = airline.airline_code WHERE LOWER(airport.airport_location) LIKE LOWER('%Dallas%');SELECT DISTINCT airline.airline_name, airline.airline_code FROM flight_stop JOIN airport ON flight_stop.stop_airport = airport.airport_code JOIN flight ON flight_stop.flight_id = flight.flight_id JOIN airline ON flight.airline_code = airline.airline_code WHERE LOWER(airport.airport_location) LIKE LOWER('%Dallas%');
Gold Query #78
SELECT DISTINCT airline.airline_name FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'LAX' AND flight.to_airport = 'ORD';SELECT DISTINCT airline.airline_code FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'LAX' AND flight.to_airport = 'ORD';SELECT DISTINCT airline.airline_name, airline.airline_code FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'LAX' AND flight.to_airport = 'ORD';
Gold Query #79
SELECT airline.airline_name, flight.stops FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'ORD' AND flight.to_airport = 'JFK' ORDER BY CASE WHEN flight.stops IS NULL THEN 1 ELSE 0 END, flight.stops;SELECT airline.airline_code, flight.stops FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'ORD' AND flight.to_airport = 'JFK' ORDER BY CASE WHEN flight.stops IS NULL THEN 1 ELSE 0 END, flight.stops;SELECT airline.airline_name, airline.airline_code, flight.stops FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'ORD' AND flight.to_airport = 'JFK' ORDER BY CASE WHEN flight.stops IS NULL THEN 1 ELSE 0 END, flight.stops;
Gold Query #80
SELECT DISTINCT airline.airline_name FROM airline WHERE NOT airline.airline_code IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);SELECT DISTINCT airline.airline_code FROM airline WHERE NOT airline.airline_code IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);SELECT DISTINCT airline.airline_name, airline.airline_code FROM airline WHERE NOT airline.airline_code IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);
Gold Query #81
SELECT state_code FROM airport WHERE LOWER(airport_name) LIKE LOWER('%Orlando International Airport%');
Gold Query #82
SELECT flight.flight_number FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';SELECT flight.flight_id FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';SELECT flight.flight_number, flight.flight_id FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';
Gold Query #83
SELECT SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare WHERE fare.from_airport = 'JFK' AND fare.to_airport = 'LAX';
Gold Query #84
SELECT minimum_connect_time FROM airport WHERE airport_code = 'JFK';
Gold Query #85
SELECT COUNT(DISTINCT flight_fare.flight_id) FROM flight_fare JOIN fare ON flight_fare.fare_id = fare.fare_id WHERE fare.round_trip_required = 'Yes';
Gold Query #86
SELECT city.country_name, SUM(city.population) AS total_population FROM city GROUP BY city.country_name ORDER BY total_population DESC;
Gold Query #87
SELECT river.country_name, AVG(river.length) AS average_length FROM river GROUP BY river.country_name ORDER BY average_length DESC;
Gold Query #88
SELECT river.country_name, COUNT(DISTINCT river.river_name) AS number_of_rivers FROM river GROUP BY river.country_name ORDER BY CASE WHEN number_of_rivers IS NULL THEN 1 ELSE 0 END DESC, number_of_rivers DESC;
Gold Query #89
SELECT mountain.country_name, COUNT(mountain.mountain_name) AS number_of_mountains FROM mountain GROUP BY mountain.country_name ORDER BY CASE WHEN number_of_mountains IS NULL THEN 1 ELSE 0 END DESC, number_of_mountains DESC;
Gold Query #90
SELECT lake.state_name, COUNT(lake.lake_name) AS lake_count FROM lake GROUP BY lake.state_name ORDER BY CASE WHEN lake_count IS NULL THEN 1 ELSE 0 END DESC, lake_count DESC;
Gold Query #91
SELECT state.state_name, state.density FROM state ORDER BY state.density DESC;
Gold Query #92
SELECT lake.lake_name, lake.area FROM lake ORDER BY lake.area DESC;
Gold Query #93
SELECT city.city_name, city.population FROM city ORDER BY city.population DESC LIMIT 5;
Gold Query #94
SELECT river.river_name, river.length FROM river ORDER BY river.length DESC;
Gold Query #95
SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain ORDER BY mountain.mountain_altitude DESC;
Gold Query #96
SELECT (SELECT SUM(population) FROM geography.state WHERE LOWER(country_name) = 'united states') / (SELECT SUM(population) FROM geography.state WHERE LOWER(state_name) = 'california') AS population_ratio FROM dual;
Gold Query #97
SELECT CAST((SELECT length FROM river WHERE LOWER(river_name) LIKE '%mississippi%') AS DOUBLE) / NULLIF((SELECT length FROM river WHERE LOWER(river_name) LIKE '%rhine%'), 0) AS ratio;
Gold Query #98
SELECT (CAST(everest.mountain_altitude AS DOUBLE) / NULLIF(dhaulagiri.mountain_altitude, 0)) AS altitude_ratio FROM (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Mount Everest') AS everest, (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Dhaulagiri') AS dhaulagiri;
Gold Query #99
SELECT city.city_name, CAST(city.population AS DOUBLE) / NULLIF(state.population, 0) AS population_ratio FROM city JOIN state ON city.state_name = state.state_name ORDER BY population_ratio DESC;
Gold Query #100
SELECT state_name, population / NULLIF(area, 0) AS population_density FROM state;
Gold Query #101
SELECT DISTINCT lake.country_name FROM lake JOIN river ON lake.country_name = river.country_name;
Gold Query #102
SELECT border_info.border FROM border_info JOIN lake ON border_info.state_name = lake.state_name WHERE LOWER(lake.lake_name) LIKE LOWER('%Ontario%');
Gold Query #103
SELECT lake.lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.area > 1000 AND LOWER(lake.lake_name) LIKE LOWER('Lake%') ORDER BY CASE WHEN lake.lake_name IS NULL THEN 1 ELSE 0 END, lake.lake_name;
Gold Query #104
SELECT highlow.state_name, highlow.highest_point, state.density FROM highlow JOIN state ON highlow.state_name = state.state_name;
Gold Query #105
SELECT l.country_name, AVG(r.length) AS average_length FROM river AS r JOIN lake AS l ON r.country_name = l.country_name GROUP BY 1;
Gold Query #106
SELECT state_name FROM state WHERE population < 100000;
Gold Query #107
SELECT river_name FROM river WHERE traverse LIKE '%,%,%';
Gold Query #108
SELECT lake_name, area FROM lake WHERE LOWER(state_name) LIKE LOWER('%Michigan%');
Gold Query #109
SELECT mountain_name, mountain_altitude FROM mountain WHERE LOWER(country_name) LIKE LOWER('%Nepal%');
Gold Query #110
SELECT city_name, population FROM city WHERE LOWER(country_name) LIKE LOWER('%United States%');
Gold Query #111
SELECT restaurant.food_type, COUNT(DISTINCT restaurant.id) AS total_number_of_restaurants FROM restaurant GROUP BY restaurant.food_type;
Gold Query #112
SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS total_count FROM LOCATION GROUP BY location.city_name;
Gold Query #113
SELECT restaurant.food_type, AVG(restaurant.rating) AS average_rating FROM restaurant GROUP BY restaurant.food_type ORDER BY average_rating DESC;
Gold Query #114
SELECT restaurant.city_name, COUNT(*) AS number_of_restaurants FROM restaurant WHERE LOWER(restaurant.food_type) LIKE LOWER('%Italian%') GROUP BY restaurant.city_name ORDER BY number_of_restaurants DESC;
Gold Query #115
SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS number_of_restaurants FROM LOCATION GROUP BY location.city_name ORDER BY number_of_restaurants DESC;
Gold Query #116
SELECT street_name FROM location GROUP BY street_name ORDER BY CASE WHEN COUNT(restaurant_id) IS NULL THEN 1 ELSE 0 END DESC, COUNT(restaurant_id) DESC LIMIT 1;
Gold Query #117
SELECT name FROM restaurant WHERE LOWER(food_type) LIKE LOWER('%Italian%') OR LOWER(city_name) LIKE LOWER('%New York%') ORDER BY CASE WHEN name IS NULL THEN 1 ELSE 0 END, name;
Gold Query #118
SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name GROUP BY geographic.region ORDER BY CASE WHEN geographic.region IS NULL THEN 1 ELSE 0 END, geographic.region;
Gold Query #119
SELECT restaurant.name FROM restaurant ORDER BY restaurant.rating DESC LIMIT 3;
Gold Query #120
SELECT name, rating FROM restaurant ORDER BY CASE WHEN rating IS NULL THEN 1 ELSE 0 END DESC, rating DESC;SELECT id, rating FROM restaurant ORDER BY CASE WHEN rating IS NULL THEN 1 ELSE 0 END DESC, rating DESC;SELECT name, id, rating FROM restaurant ORDER BY CASE WHEN rating IS NULL THEN 1 ELSE 0 END DESC, rating DESC;
Gold Query #121
SELECT CAST(COUNT(*) AS DOUBLE) / NULLIF((SELECT COUNT(*) FROM restaurant), 0) AS rating_ratio FROM restaurant WHERE rating > 4.5;
Gold Query #122
SELECT CAST(SUM(CASE WHEN restaurant.rating > 4.0 THEN 1 ELSE 0 END) AS DOUBLE) / NULLIF(SUM(CASE WHEN restaurant.rating < 4.0 THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant;
Gold Query #123
SELECT CAST(COUNT(CASE WHEN rating > 4 THEN 1 END) AS DOUBLE) / NULLIF(COUNT(CASE WHEN rating < 4 THEN 1 END), 0) AS ratio FROM restaurant WHERE LOWER(city_name) LIKE LOWER('New York');
Gold Query #124
SELECT CAST(SUM(CASE WHEN LOWER(restaurant.food_type) LIKE '%vegan%' THEN 1 ELSE 0 END) AS DOUBLE) / NULLIF(SUM(CASE WHEN NOT LOWER(restaurant.food_type) LIKE '%vegan%' THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant WHERE LOWER(LOWER(restaurant.city_name)) LIKE LOWER('%san francisco%');
Gold Query #125
SELECT CAST(COUNT(CASE WHEN LOWER(food_type) LIKE LOWER('%Italian%') THEN 1 END) AS DOUBLE) / NULLIF(COUNT(food_type), 0) AS ratio FROM restaurant WHERE LOWER(city_name) LIKE LOWER('%Los Angeles%');
Gold Query #126
SELECT r.city_name, r.name, COUNT(r.id) AS restaurant_count FROM restaurant AS r GROUP BY r.city_name, r.name HAVING COUNT(r.id) > 1;
Gold Query #127
SELECT location.city_name, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(restaurant.food_type) LIKE '%mexican%' GROUP BY location.city_name;
Gold Query #128
SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM geographic JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY 1;
Gold Query #129
SELECT geographic.region, COUNT(restaurant.id) AS number_of_restaurants FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name WHERE LOWER(restaurant.food_type) LIKE '%italian%' GROUP BY geographic.region ORDER BY number_of_restaurants DESC;
Gold Query #130
SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY CASE WHEN number_of_restaurants IS NULL THEN 1 ELSE 0 END DESC, number_of_restaurants DESC;SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic LEFT JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY CASE WHEN number_of_restaurants IS NULL THEN 1 ELSE 0 END DESC, number_of_restaurants DESC;
Gold Query #131
SELECT DISTINCT restaurant.city_name FROM restaurant WHERE rating = (SELECT MAX(rating) FROM restaurant);
Gold Query #132
SELECT restaurant.name, restaurant.rating FROM restaurant WHERE restaurant.rating > 4 AND LOWER(restaurant.city_name) LIKE LOWER('%New York%');
Gold Query #133
SELECT restaurant.name, restaurant.food_type FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(location.street_name) LIKE LOWER('%Market St%') AND LOWER(location.city_name) LIKE LOWER('%San Francisco%');
Gold Query #134
SELECT restaurant.name FROM restaurant WHERE LOWER(LOWER(restaurant.food_type)) LIKE LOWER('%italian%');
Gold Query #135
SELECT DISTINCT restaurant.name FROM restaurant WHERE LOWER(restaurant.city_name) LIKE LOWER('%Los Angeles%') AND restaurant.rating > 4 ORDER BY CASE WHEN restaurant.name IS NULL THEN 1 ELSE 0 END, restaurant.name;
Gold Query #136
SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY CASE WHEN paper.year IS NULL THEN 1 ELSE 0 END, paper.year;
Gold Query #137
SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY CASE WHEN paper.year IS NULL THEN 1 ELSE 0 END, paper.year;
Gold Query #138
SELECT paperdataset.datasetid, COUNT(DISTINCT paperdataset.paperid) AS total_papers FROM paperdataset GROUP BY paperdataset.datasetid;SELECT dataset.datasetname, COUNT(paperdataset.paperid) AS total_papers FROM paperdataset JOIN dataset ON paperdataset.datasetid = dataset.datasetid GROUP BY dataset.datasetname;
Gold Query #139
SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY keyphrase_count DESC;SELECT p.title, COUNT(pk.keyphraseid) AS num_keyphrases FROM paper AS p JOIN paperkeyphrase AS pk ON p.paperid = pk.paperid GROUP BY p.title ORDER BY num_keyphrases DESC;
Gold Query #140
SELECT COUNT(*) AS number_of_authors FROM (SELECT writes.authorid FROM writes GROUP BY writes.authorid HAVING COUNT(writes.paperid) > 2) AS subquery;
Gold Query #141
SELECT paper.paperid, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY paper.paperid ORDER BY CASE WHEN num_authors IS NULL THEN 1 ELSE 0 END DESC, num_authors DESC;SELECT paper.title, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY paper.title ORDER BY CASE WHEN num_authors IS NULL THEN 1 ELSE 0 END DESC, num_authors DESC;SELECT paper.paperid, paper.title, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY paper.paperid, paper.title ORDER BY CASE WHEN num_authors IS NULL THEN 1 ELSE 0 END DESC, num_authors DESC;
Gold Query #142
SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS total_keyphrases FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY CASE WHEN paperkeyphrase.paperid IS NULL THEN 1 ELSE 0 END, paperkeyphrase.paperid ASC;
Gold Query #143
SELECT paper.title FROM paper WHERE paper.year = 2020 ORDER BY CASE WHEN paper.title IS NULL THEN 1 ELSE 0 END, paper.title ASC;
Gold Query #144
SELECT journal.journalname FROM journal ORDER BY CASE WHEN LENGTH(journal.journalname) IS NULL THEN 1 ELSE 0 END, LENGTH(journal.journalname) ASC;
Gold Query #145
SELECT cite.citingpaperid, COUNT(*) AS citation_count FROM cite GROUP BY cite.citingpaperid ORDER BY citation_count DESC;SELECT p.paperid, p.numciting FROM paper AS p WHERE p.numciting > 0 ORDER BY CASE WHEN p.numciting IS NULL THEN 1 ELSE 0 END DESC, p.numciting DESC;SELECT p.title, COUNT(c.citedpaperid) AS num_cited_papers FROM paper AS p JOIN cite AS c ON p.paperid = c.citingpaperid GROUP BY p.title ORDER BY CASE WHEN num_cited_papers IS NULL THEN 1 ELSE 0 END DESC, num_cited_papers DESC;
Gold Query #146
SELECT CAST(COUNT(DISTINCT CASE WHEN keyphrase_count > 1 THEN subquery.paperid END) AS DOUBLE) / NULLIF(COUNT(DISTINCT CASE WHEN keyphrase_count = 1 THEN subquery.paperid END), 0) AS ratio FROM (SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid) AS subquery;
Gold Query #147
SELECT CAST(COUNT(CASE WHEN paper.numcitedby > 1 THEN 1 END) AS DOUBLE) / NULLIF(COUNT(CASE WHEN paper.numcitedby < 2 THEN 1 END), 0) AS ratio FROM paper;
Gold Query #148
SELECT CAST(COUNT(CASE WHEN paper.year = 2020 THEN 1 END) AS DOUBLE) / NULLIF(COUNT(paper.paperid), 0) AS ratio FROM paper;
Gold Query #149
SELECT CAST(COUNT(DISTINCT CASE WHEN paper_count >= 3 THEN subquery.authorid END) AS DOUBLE) / NULLIF(COUNT(DISTINCT CASE WHEN paper_count < 3 THEN subquery.authorid END), 0) AS ratio FROM (SELECT writes.authorid, COUNT(writes.paperid) AS paper_count FROM writes GROUP BY writes.authorid) AS subquery;
Gold Query #150
SELECT CAST(COUNT(CASE WHEN dataset_count > 1 THEN 1 END) AS DOUBLE) / NULLIF(COUNT(CASE WHEN dataset_count = 1 THEN 1 END), 0) AS ratio FROM (SELECT paperdataset.paperid, COUNT(paperdataset.datasetid) AS dataset_count FROM paperdataset GROUP BY paperdataset.paperid) AS subquery;
Gold Query #151
SELECT paper.title FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE LOWER(keyphrase.keyphrasename) LIKE LOWER('%Machine Learning%');SELECT paper.paperid FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE LOWER(keyphrase.keyphrasename) LIKE LOWER('%Machine Learning%');SELECT paper.title, paper.paperid FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE LOWER(keyphrase.keyphrasename) LIKE LOWER('%Machine Learning%');
Gold Query #152
SELECT author.authorname, COUNT(DISTINCT writes.paperid) AS number_of_papers FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY author.authorname ORDER BY number_of_papers DESC;SELECT author.authorid, COUNT(DISTINCT writes.paperid) AS number_of_papers FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY author.authorid ORDER BY number_of_papers DESC;SELECT author.authorname, author.authorid, COUNT(DISTINCT writes.paperid) AS number_of_papers FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY author.authorname, author.authorid ORDER BY number_of_papers DESC;
Gold Query #153
SELECT COUNT(DISTINCT paperkeyphrase.keyphraseid) AS total_keyphrases FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid WHERE LOWER(journal.journalname) LIKE LOWER('%IEEE Transactions%');
Gold Query #154
SELECT journal.journalname, COUNT(DISTINCT paper.paperid) AS total_papers FROM paper JOIN journal ON paper.journalid = journal.journalid GROUP BY journal.journalname ORDER BY CASE WHEN journal.journalname IS NULL THEN 1 ELSE 0 END, journal.journalname;
Gold Query #155
SELECT paperdataset.paperid, COUNT(cite.citedpaperid) AS citation_count FROM paperdataset JOIN cite ON paperdataset.paperid = cite.citedpaperid WHERE paperdataset.datasetid = (SELECT datasetid FROM dataset WHERE LOWER(datasetname) LIKE LOWER('%COVID-19 Research%')) GROUP BY paperdataset.paperid ORDER BY CASE WHEN citation_count IS NULL THEN 1 ELSE 0 END DESC, citation_count DESC;SELECT p.title, COUNT(c.citingpaperid) AS num_citing_papers FROM paper AS p JOIN paperdataset AS pd ON p.paperid = pd.paperid JOIN cite AS c ON p.paperid = c.citedpaperid JOIN dataset AS d ON pd.datasetid = d.datasetid WHERE d.datasetname = 'COVID-19 Research' GROUP BY p.title ORDER BY num_citing_papers DESC;
Gold Query #156
SELECT venue.venuename, COUNT(DISTINCT paper.paperid) FROM paper JOIN venue ON paper.venueid = venue.venueid WHERE paper.venueid = (SELECT venueid FROM paper WHERE paperid = 2) GROUP BY venue.venuename;
Gold Query #157
SELECT author.authorname FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.title = 'The Effects of Climate Change on Agriculture';
Gold Query #158
SELECT COUNT(paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid WHERE paper.year = 2020 AND LOWER(journal.journalname) LIKE LOWER('%nature%');
Gold Query #159
SELECT COUNT(DISTINCT paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE LOWER(keyphrase.keyphrasename) LIKE LOWER('%machine learning%') AND journal.journalname = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';
Gold Query #160
SELECT COUNT(DISTINCT writes.authorid) AS number_of_authors FROM writes JOIN paper ON writes.paperid = paper.paperid JOIN journal ON paper.journalid = journal.journalid WHERE LOWER(journal.journalname) LIKE LOWER('%Science%') AND paper.year = 2020;
Gold Query #161
SELECT COUNT(*) AS review_count FROM yelp.review AS r JOIN yelp.business AS b ON r.business_id = b.business_id WHERE b.state = 'CA' AND (YEAR(CURDATE()) * 12 + MONTH(CURDATE()) - (YEAR(STR_TO_DATE(r.month, '%M')) * 12 + MONTH(STR_TO_DATE(r.month, '%M')))) <= 10;
Gold Query #162
SELECT SUM(COUNT) AS total_checkins FROM checkin WHERE DAY IN ('Thursday', 'Friday');
Gold Query #163
SELECT COUNT(*) AS review_count FROM review WHERE STR_TO_DATE(CONCAT(review.year, '-', CASE review.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END, '-01'), '%Y-%m-%d') = (SELECT DATE_SUB(STR_TO_DATE(CONCAT(r.year, '-', CASE r.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END, '-01'), '%Y-%m-%d'), INTERVAL 2 MONTH) FROM review AS r WHERE r.rid = 3);
Gold Query #164
SELECT text AS message FROM tip WHERE LOWER(MONTH) LIKE LOWER('%May%') AND YEAR = 2021 LIMIT 1;
Gold Query #165
SELECT COUNT(DISTINCT MONTH) AS num_months FROM review WHERE YEAR = 2021 AND CASE MONTH WHEN 'January' THEN 1 WHEN 'February' THEN 2 WHEN 'March' THEN 3 WHEN 'April' THEN 4 WHEN 'May' THEN 5 WHEN 'June' THEN 6 WHEN 'July' THEN 7 WHEN 'August' THEN 8 WHEN 'September' THEN 9 WHEN 'October' THEN 10 WHEN 'November' THEN 11 WHEN 'December' THEN 12 END BETWEEN 6 AND 12;
Gold Query #166
SELECT neighbourhood.neighbourhood_name, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY neighbourhood.neighbourhood_name ORDER BY business_count DESC;SELECT neighbourhood.id, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY neighbourhood.id ORDER BY business_count DESC;SELECT neighbourhood.neighbourhood_name, neighbourhood.id, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY neighbourhood.neighbourhood_name, neighbourhood.id ORDER BY business_count DESC;
Gold Query #167
SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin WHERE checkin.business_id = 'abc123' GROUP BY checkin.day ORDER BY total_checkins DESC;
Gold Query #168
SELECT checkin.business_id, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.business_id ORDER BY total_checkins DESC;
Gold Query #169
SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE LOWER(business.city) LIKE LOWER('%NEW YORK%') GROUP BY business.name;
Gold Query #170
SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.day ORDER BY total_checkins DESC;
Gold Query #171
SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE LOWER(business.city) LIKE LOWER('%New York%') GROUP BY business.name, business.business_id ORDER BY average_rating DESC;
Gold Query #172
SELECT business.latitude, business.longitude FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id, business.latitude, business.longitude ORDER BY CASE WHEN AVG(review.rating) IS NULL THEN 1 ELSE 0 END DESC, AVG(review.rating) DESC LIMIT 1;
Gold Query #173
SELECT business.name, business.review_count FROM business ORDER BY business.review_count DESC LIMIT 3;SELECT business.business_id, business.review_count FROM business ORDER BY business.review_count DESC LIMIT 3;SELECT business.bid, business.review_count FROM business ORDER BY business.review_count DESC LIMIT 3;SELECT business.name, business.business_id, business.review_count FROM business ORDER BY business.review_count DESC LIMIT 3;SELECT business.name, business.bid, business.review_count FROM business ORDER BY business.review_count DESC LIMIT 3;SELECT business.business_id, business.bid, business.review_count FROM business ORDER BY business.review_count DESC LIMIT 3;SELECT business.name, business.business_id, business.bid, business.review_count FROM business ORDER BY business.review_count DESC LIMIT 3;
Gold Query #174
SELECT business.name FROM business ORDER BY CASE WHEN business.name IS NULL THEN 1 ELSE 0 END, business.name ASC;
Gold Query #175
SELECT review.month, COUNT(review.rid) AS review_count FROM yelp.review WHERE review.year = 2021 GROUP BY review.month ORDER BY STR_TO_DATE(CONCAT('1 ', review.month, ' 2021'), '%d %M %Y');
Gold Query #176
SELECT business.state, COUNT(business.business_id) / NULLIF(CAST((SELECT COUNT(*) FROM business) AS DOUBLE), 0) AS ratio FROM business GROUP BY business.state;
Gold Query #177
SELECT CAST(SUM(CASE WHEN business.is_open = 1 THEN 1 ELSE 0 END) AS DOUBLE) / NULLIF(SUM(CASE WHEN business.is_open = 0 THEN 1 ELSE 0 END), 0) AS ratio FROM business WHERE LOWER(LOWER(business.city)) LIKE LOWER('%san francisco%');
Gold Query #178
SELECT CAST(SUM(CASE WHEN checkin.day IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END) AS DOUBLE) / NULLIF(SUM(CASE WHEN NOT checkin.day IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END), 0) AS ratio FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE LOWER(business.name) LIKE LOWER('%Mark''s Bistro%');
Gold Query #179
SELECT CAST(COUNT(CASE WHEN business.state = 'CA' THEN 1 END) AS DOUBLE) / NULLIF(COUNT(CASE WHEN business.state = 'NY' THEN 1 END), 0) AS ratio FROM business;
Gold Query #180
SELECT category.category_name, CAST(COUNT(CASE WHEN review.rating > 3 THEN 1 END) AS DOUBLE) / NULLIF(COUNT(CASE WHEN review.rating < 3 THEN 1 END), 0) AS ratio FROM review JOIN category ON review.business_id = category.business_id GROUP BY category.category_name ORDER BY ratio DESC;SELECT category.id, CAST(COUNT(CASE WHEN review.rating > 3 THEN 1 END) AS DOUBLE) / NULLIF(COUNT(CASE WHEN review.rating < 3 THEN 1 END), 0) AS ratio FROM review JOIN category ON review.business_id = category.business_id GROUP BY category.id ORDER BY ratio DESC;SELECT category.category_name, category.id, CAST(COUNT(CASE WHEN review.rating > 3 THEN 1 END) AS DOUBLE) / NULLIF(COUNT(CASE WHEN review.rating < 3 THEN 1 END), 0) AS ratio FROM review JOIN category ON review.business_id = category.business_id GROUP BY category.category_name, category.id ORDER BY ratio DESC;
Gold Query #181
SELECT users.name, COUNT(review.rid) AS review_count FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id JOIN users ON review.user_id = users.user_id WHERE LOWER(neighbourhood.neighbourhood_name) LIKE LOWER('%Downtown%') GROUP BY users.name ORDER BY review_count DESC;SELECT users.user_id, COUNT(review.rid) AS review_count FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id JOIN users ON review.user_id = users.user_id WHERE LOWER(neighbourhood.neighbourhood_name) LIKE LOWER('%Downtown%') GROUP BY users.user_id ORDER BY review_count DESC;SELECT users.name, users.user_id, COUNT(review.rid) AS review_count FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id JOIN users ON review.user_id = users.user_id WHERE LOWER(neighbourhood.neighbourhood_name) LIKE LOWER('%Downtown%') GROUP BY users.name, users.user_id ORDER BY review_count DESC;
Gold Query #182
SELECT category.category_name, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'CA' GROUP BY category.category_name ORDER BY total_reviews DESC;SELECT category.id, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'CA' GROUP BY category.id ORDER BY total_reviews DESC;SELECT category.category_name, category.id, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'CA' GROUP BY category.category_name, category.id ORDER BY total_reviews DESC;
Gold Query #183
SELECT category.category_name, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY category.category_name ORDER BY total_reviews DESC;SELECT category.id, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY category.id ORDER BY total_reviews DESC;SELECT category.category_name, category.id, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY category.category_name, category.id ORDER BY total_reviews DESC;
Gold Query #184
SELECT business.business_id, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY business.business_id ORDER BY total_checkins DESC;SELECT business.name, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY business.name ORDER BY total_checkins DESC;SELECT business.bid, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY business.bid ORDER BY total_checkins DESC;SELECT business.business_id, business.name, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY business.business_id, business.name ORDER BY total_checkins DESC;SELECT business.business_id, business.bid, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY business.business_id, business.bid ORDER BY total_checkins DESC;SELECT business.name, business.bid, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY business.name, business.bid ORDER BY total_checkins DESC;SELECT business.business_id, business.name, business.bid, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY business.business_id, business.name, business.bid ORDER BY total_checkins DESC;
Gold Query #185
SELECT category.category_name FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY category.category_name ORDER BY AVG(business_rating.average_rating) DESC LIMIT 2;SELECT category.id FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY category.id ORDER BY AVG(business_rating.average_rating) DESC LIMIT 2;SELECT category.category_name, category.id FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY category.category_name, category.id ORDER BY AVG(business_rating.average_rating) DESC LIMIT 2;
Gold Query #186
SELECT COUNT(review.rid) AS total_reviews FROM review JOIN category ON review.business_id = category.business_id WHERE review.year = 2021 AND LOWER(category.category_name) LIKE LOWER('%Cafe%');
Gold Query #187
SELECT AVG(sf.average_rating) AS sf_average_rating FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE LOWER(LOWER(business.city)) LIKE LOWER('%san francisco%') GROUP BY business.business_id) AS sf;
Gold Query #188
SELECT review.business_id, COUNT(*) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.business_id ORDER BY review_count DESC;
Gold Query #189
SELECT COUNT(*) FROM review JOIN users ON review.user_id = users.user_id WHERE LOWER(users.name) LIKE LOWER('%Sarah Williams%') AND review.month = 'April' AND review.year = 2021;
Gold Query #190
SELECT SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' AND LOWER(checkin.day) LIKE LOWER('%Monday%');
Gold Query #191
WITH SellTransactions AS (SELECT sbTxCustId, COUNT(*) AS num_tx FROM sbTransaction WHERE CAST(sbTxDateTime AS DATE) = '2023-04-01' AND sbTxType = 'sell' GROUP BY sbTxCustId) SELECT c.sbCustId, c.sbCustName, st.num_tx FROM sbCustomer AS c JOIN SellTransactions AS st ON c.sbCustId = st.sbTxCustId ORDER BY CASE WHEN st.num_tx IS NULL THEN 1 ELSE 0 END DESC, st.num_tx DESC LIMIT 1;
Gold Query #192
SELECT DATE_ADD('0000-01-01 00:00:00', INTERVAL (TIMESTAMPDIFF(MONTH, '0000-01-01 00:00:00', sbTxDateTime)) MONTH) AS MONTH, AVG(sbTxPrice) AS avg_price FROM sbTransaction WHERE sbTxStatus = 'success' AND sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY MONTH ORDER BY CASE WHEN MONTH IS NULL THEN 1 ELSE 0 END, MONTH;
Gold Query #193
SELECT MIN(sdp.sbDpClose) AS lowest_price FROM sbDailyPrice AS sdp JOIN sbTicker AS st ON sdp.sbDpTickerId = st.sbTickerId WHERE st.sbTickerSymbol = 'VTI' AND sdp.sbDpDate >= CURRENT_DATE - INTERVAL '7' DAY;
Gold Query #194
SELECT c.sbCustId, DATEDIFF(t.FirstTxDate, c.sbCustJoinDate) AS DaysFromJoinToFirstTransaction FROM broker.sbCustomer AS c INNER JOIN (SELECT sbTxCustId, MIN(sbTxDateTime) AS FirstTxDate FROM broker.sbTransaction GROUP BY sbTxCustId) AS t ON c.sbCustId = t.sbTxCustId;
Gold Query #195
SELECT COUNT(t.sbTxCustId) AS transaction_count FROM sbTransaction AS t JOIN sbCustomer AS c ON t.sbTxCustId = c.sbCustId WHERE c.sbCustJoinDate >= CURRENT_DATE - INTERVAL '70' DAY;
Gold Query #196
SELECT t.treatment_id, t.start_dt, ae.reported_dt, ae.description FROM adverse_events AS ae JOIN treatments AS t ON ae.treatment_id = t.treatment_id WHERE ae.reported_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '10' DAY;
Gold Query #197
WITH doc_first_treatment AS (SELECT d.doc_id, d.last_name, d.year_reg, t.treatment_id, t.start_dt, ROW_NUMBER() OVER (PARTITION BY d.doc_id ORDER BY CASE WHEN t.start_dt IS NULL THEN 1 ELSE 0 END, t.start_dt ASC) AS rn FROM doctors AS d JOIN treatments AS t ON d.doc_id = t.doc_id WHERE d.year_reg = EXTRACT(YEAR FROM CURRENT_DATE) - 2) SELECT last_name, year_reg, start_dt AS first_treatment_date, treatment_id AS first_treatment_id FROM doc_first_treatment WHERE rn = 1;
Gold Query #198
SELECT AVG(YEAR(CURRENT_DATE) - YEAR(date_of_birth)) AS avg_age FROM derm_treatment.patients WHERE gender = 'Male' AND ins_type = 'private';
Gold Query #199
SELECT t.treatment_id, t.start_dt AS treatment_start_date, t.end_dt AS treatment_end_date, cm.start_dt AS concomitant_med_start_date, cm.end_dt AS concomitant_med_end_date FROM derm_treatment.treatments AS t JOIN derm_treatment.concomitant_meds AS cm ON t.treatment_id = cm.treatment_id WHERE t.is_placebo = TRUE AND cm.start_dt BETWEEN t.start_dt AND DATE_ADD(t.start_dt, INTERVAL 14 DAY) ORDER BY CASE WHEN t.treatment_id IS NULL THEN 1 ELSE 0 END, t.treatment_id;
Gold Query #200
SELECT COUNT(*) FROM treatments t JOIN diagnoses d ON t.diag_id = d.diag_id JOIN drugs dr ON t.drug_id = dr.drug_id WHERE LOWER(d.diag_name) LIKE LOWER('%psoriasis%') AND dr.fda_appr_dt IS NOT NULL AND t.end_dt >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);
Gold Query #201
SELECT AVG(tx_limit_daily) AS avg_daily_limit, AVG(tx_limit_monthly) AS avg_monthly_limit FROM user_setting_snapshot WHERE snapshot_date = (SELECT MIN(snapshot_date) FROM user_setting_snapshot WHERE snapshot_date >= '2023-01-01' AND snapshot_date < '2024-01-01');
Gold Query #202
SELECT u.username, u.email, u.created_at FROM users AS u LEFT JOIN notifications AS n ON u.uid = n.user_id AND n.created_at BETWEEN u.created_at AND u.created_at + INTERVAL '1' YEAR WHERE n.user_id IS NULL;
Gold Query #203
SELECT device_type, AVG(UNIX_TIMESTAMP((session_end_ts - session_start_ts))) AS avg_session_duration_seconds FROM user_sessions WHERE NOT session_end_ts IS NULL GROUP BY device_type;
Gold Query #204
WITH retail_merchants AS (SELECT mid FROM merchants WHERE LOWER(category) LIKE LOWER('%retail%') AND status = 'active'), merchant_balances AS (SELECT balance FROM wallet_merchant_balance_daily AS wmbd JOIN retail_merchants AS rm ON wmbd.merchant_id = rm.mid WHERE DATE(wmbd.updated_at) = CURRENT_DATE), ranked_balances AS (SELECT balance, ROW_NUMBER() OVER (ORDER BY balance) as `row_number`, COUNT(*) OVER () as total_rows FROM merchant_balances) SELECT AVG(balance) AS median_balance FROM ranked_balances WHERE `row_number` IN (FLOOR((total_rows + 1) / 2), CEIL((total_rows + 1) / 2));
Gold Query #205
WITH earliest_coupons AS (SELECT c.merchant_id, MIN(c.start_date) AS earliest_coupon_start_date FROM coupons AS c GROUP BY c.merchant_id) SELECT m.mid AS merchant_id, m.created_at AS merchant_registration_date, ec.earliest_coupon_start_date, c.cid AS earliest_coupon_id FROM merchants AS m JOIN earliest_coupons AS ec ON m.mid = ec.merchant_id JOIN coupons AS c ON ec.merchant_id = c.merchant_id AND ec.earliest_coupon_start_date = c.start_date WHERE ec.earliest_coupon_start_date <= m.created_at + INTERVAL '1' YEAR;
Gold Query #206
SELECT s.first_name, s.last_name, s.phone, s.termination_date - s.hire_date AS days_employed FROM salespersons AS s ORDER BY CASE WHEN days_employed IS NULL THEN 1 ELSE 0 END, days_employed ASC LIMIT 1;
Gold Query #207
SELECT COUNT(*) AS weekend_payments FROM payments_made WHERE vendor_name = 'Utility Company' AND DAYOFWEEK(payment_date) IN (1, 7);
Gold Query #208
SELECT payment_date, payment_method, SUM(payment_amount) AS total_amount FROM payments_received WHERE payment_date >= DATE_SUB(DATE(DATE_ADD(CURDATE(), INTERVAL -WEEKDAY(CURDATE()) DAY)), INTERVAL 1 WEEK) AND payment_date < DATE(DATE_ADD(CURDATE(), INTERVAL -WEEKDAY(CURDATE()) DAY)) GROUP BY payment_date, payment_method ORDER BY payment_date DESC, payment_method ASC;
Gold Query #209
WITH latest_snapshot AS (SELECT MAX(snapshot_date) AS snapshot_date FROM inventory_snapshots WHERE snapshot_date BETWEEN '2023-03-01' AND '2023-03-31'), latest_snapshot_data AS (SELECT inv.car_id FROM inventory_snapshots AS inv JOIN latest_snapshot AS ls ON inv.snapshot_date = ls.snapshot_date WHERE inv.is_in_inventory = TRUE) SELECT c.id, c.make, c.model, c.year FROM cars AS c JOIN latest_snapshot_data AS lsd ON c.id = lsd.car_id;
Gold Query #210
SELECT DATE_ADD('0000-01-01 00:00:00', INTERVAL (TIMESTAMPDIFF(QUARTER, '0000-01-01 00:00:00', s.sale_date)) QUARTER) AS QUARTER, c.state, SUM(s.sale_price) AS total_sales FROM sales AS s JOIN customers AS c ON s.customer_id = c.id WHERE EXTRACT(YEAR FROM s.sale_date) = 2023 GROUP BY c.state, QUARTER HAVING SUM(s.sale_price) > 0 ORDER BY CASE WHEN QUARTER IS NULL THEN 1 ELSE 0 END, QUARTER, CASE WHEN c.state IS NULL THEN 1 ELSE 0 END, c.state;
